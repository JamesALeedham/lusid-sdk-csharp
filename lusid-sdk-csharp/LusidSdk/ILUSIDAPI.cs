// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// # Introduction
    ///
    /// This page documents the [LUSID
    /// APIs](https://api.finbourne.com/swagger), which allows authorised
    /// clients to query and update their data within the LUSID platform.
    ///
    /// SDKs to interact with the LUSID APIs are available in the following
    /// languages :
    ///
    /// * [C#](https://github.com/finbourne/lusid-sdk-csharp)
    /// * [Java](https://github.com/finbourne/lusid-sdk-java)
    /// * [JavaScript](https://github.com/finbourne/lusid-sdk-js)
    /// * [Python](https://github.com/finbourne/lusid-sdk-python)
    ///
    /// # Data Model
    ///
    /// The LUSID API has a relatively lightweight but extremely powerful data
    /// model.   One of the goals of LUSID was not to enforce on clients a
    /// single rigid data model but rather to provide a flexible foundation
    /// onto which clients can streamline their data.   One of the primary
    /// tools to extend the data model is through using properties.  Properties
    /// can be associated with amongst others: -
    /// * Transactions
    /// * Instruments
    /// * Portfolios
    ///
    /// The LUSID data model is exposed through the LUSID APIs.  The APIs
    /// provide access to both business objects and the meta data used to
    /// configure the systems behaviours.   The key business entities are: -
    /// * **Portfolios**
    /// A portfolio is the primary container for transactions and holdings.
    /// * **Derived Portfolios**
    /// Derived portfolios allow portfolios to be created based on other
    /// portfolios, by overriding or overlaying specific items
    /// * **Holdings**
    /// A holding is a position account for a instrument within a portfolio.
    /// Holdings can only be adjusted via transactions.
    /// * **Transactions**
    /// A Transaction is a source of transactions used to manipulate holdings.
    /// * **Corporate Actions**
    /// A corporate action is a market event which occurs to a instrument, for
    /// example a stock split
    /// * **Instruments**
    /// A instrument represents a currency, tradable instrument or OTC contract
    /// that is attached to a transaction and a holding.
    /// * **Properties**
    /// Several entities allow additional user defined properties to be
    /// associated with them.   For example, a Portfolio manager may be
    /// associated with a portfolio
    ///
    /// Meta data includes: -
    /// * **Transaction Types**
    /// Transactions are booked with a specific transaction type.  The types
    /// are client defined and are used to map the Transaction to a series of
    /// movements which update the portfolio holdings.
    /// * **Properties Types**
    /// Types of user defined properties used within the system.
    ///
    /// This section describes the data model that LUSID exposes via the APIs.
    ///
    /// ## Scope
    ///
    /// All data in LUSID is segregated at the client level.  Entities in LUSID
    /// are identifiable by a unique code.  Every entity lives within a logical
    /// data partition known as a Scope.  Scope is an identity namespace
    /// allowing two entities with the same unique code to co-exist within
    /// individual address spaces.
    ///
    /// For example, prices for equities from different vendors may be uploaded
    /// into different scopes such as `client/vendor1` and `client/vendor2`.  A
    /// portfolio may then be valued using either of the price sources by
    /// referencing the appropriate scope.
    ///
    /// LUSID Clients cannot access scopes of other clients.
    ///
    /// ## Schema
    ///
    /// A detailed description of the entities used by the API and parameters
    /// for endpoints which take a JSON document can be retrieved via the
    /// `schema` endpoint.
    ///
    /// ## Instruments
    ///
    /// LUSID has its own instrument master implementation (LUSID CORE) which
    /// sources reference data from multiple data vendors.
    /// [OpenFIGI](https://openfigi.com/) and [PermID](https://permid.org/) are
    /// used as the instrument identifier when uploading transactions,
    /// holdings, prices, etc.
    /// The API exposes a `instrument/lookup` endpoint which can be used to
    /// lookup these identifiers given other market identifiers.
    ///
    /// Cash can be referenced using the ISO currency code prefixed with
    /// "`CCY_`" e.g. `CCY_GBP`
    ///
    /// For any instrument that are not recognised by LUSID (eg OTCs) a client
    /// can upload a client defined instrument. Securitised portfolios and
    /// funds can be modelled as client defined instruments.
    ///
    /// ## Instrument Prices (Analytics)
    ///
    /// Instrument prices are stored in LUSID's Analytics Store
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | InstrumentUid|string|Unique instrument identifier |
    /// | Value|decimal|Value of the analytic, eg price |
    /// | Denomination|string|Underlying unit of the analytic, eg currency, EPS
    /// etc. |
    ///
    ///
    /// ## Instrument Data
    ///
    /// Instrument data can be uploaded to the system using the [Instrument
    /// Properties](#tag/InstrumentProperties) endpoint.
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | InstrumentUid|string|Unique instrument identifier |
    ///
    ///
    /// ## Portfolios
    ///
    /// Portfolios are the top-level entity containers within LUSID, containing
    /// transactions, corporate actions and holdings.    The transactions build
    /// up the portfolio holdings on which valuations, analytics profit &amp;
    /// loss and risk can be calculated.
    /// Properties can be associated with Portfolios to add in additional model
    /// data.  Portfolio properties can be changed over time as well.  For
    /// example, to allow a Portfolio Manager to be linked with a Portfolio.
    ///
    /// Additionally, portfolios can be securitised and held by other
    /// portfolios, allowing LUSID to perform "drill-through" into underlying
    /// fund holdings
    ///
    /// ### Reference Portfolios
    /// Reference portfolios are portfolios that contain only holdings or
    /// weights, as opposed to transactions, and are designed to represent
    /// entities such as indices.
    ///
    /// ### Derived Portfolios
    ///
    /// LUSID also allows for a portfolio to be composed of another portfolio
    /// via derived portfolios.  A derived portfolio can contain its own
    /// transactions and also inherits any transactions from its parent
    /// portfolio.  Any changes made to the parent portfolio are automatically
    /// reflected in derived portfolio.
    ///
    /// Derived portfolios in conjunction with scopes are a powerful construct.
    /// For example, to do pre-trade what-if analysis, a derived portfolio
    /// could be created a new namespace linked to the underlying live (parent)
    /// portfolio.  Analysis can then be undertaken on the derived portfolio
    /// without affecting the live portfolio.
    ///
    /// ### Portfolio Groups
    /// Portfolio groups allow the construction of a hierarchy from portfolios
    /// and groups.  Portfolio operations on the group are executed on an
    /// aggregated set of portfolios in the hierarchy.
    ///
    /// For example:
    ///
    /// * Global Portfolios _(group)_
    /// * APAC _(group)_
    /// * Hong Kong _(portfolio)_
    /// * Japan _(portfolio)_
    /// * Europe _(group)_
    /// * France _(portfolio)_
    /// * Germany _(portfolio)_
    /// * UK _(portfolio)_
    ///
    /// In this example **Global Portfolios** is a group that consists of an
    /// aggregate of **Hong Kong**, **Japan**, **France**, **Germany** and
    /// **UK** portfolios.
    ///
    /// ### Movements Engine
    /// The Movements engine sits on top of the immutable event store and is
    /// used to manage the relationship between input trading actions and their
    /// associated portfolio holdings.
    ///
    /// The movements engine reads in the following entity types:-
    /// * Posting Transactions
    /// * Applying Corporate Actions
    /// * Holding Adjustments
    ///
    /// These are converted to one or more movements and used by the movements
    /// engine to calculate holdings.  At the same time it also calculates
    /// running balances, and realised P&amp;L.  The outputs from the movements
    /// engine are holdings and transactions.
    ///
    /// ## Transactions
    ///
    /// A transaction represents an economic activity against a Portfolio.
    ///
    /// Transactions are processed according to a configuration. This will tell
    /// the LUSID engine how to interpret the transaction and correctly update
    /// the holdings. LUSID comes with a set of transaction types you can use
    /// out of the box, or you can configure your own set(s) of transactions.
    ///
    /// For more details see the [LUSID Getting Started Guide for transaction
    /// configuration.](https://support.finbourne.com/hc/en-us/articles/360016737511-Configuring-Transaction-Types)
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | TransactionId|string|Unique transaction identifier |
    /// | Type|string|LUSID transaction type code - Buy, Sell, StockIn,
    /// StockOut, etc |
    /// | InstrumentUid|string|Unique instrument identifier |
    /// | TransactionDate|datetime|Transaction date |
    /// | SettlementDate|datetime|Settlement date |
    /// | Units|decimal|Quantity of transaction in units of the instrument |
    /// | TransactionPrice|tradeprice|Execution price for the transaction |
    /// | TotalConsideration|currencyandamount|Total value of the transaction |
    /// | ExchangeRate|decimal|Rate between transaction and settle currency |
    /// | TransactionCurrency|currency|Transaction currency |
    /// | CounterpartyId|string|Counterparty identifier |
    /// | Source|string|Where this transaction came from |
    /// | NettingSet|string|  |
    ///
    ///
    /// ### Example Transactions
    ///
    /// #### A Common Purchase Example
    /// Three example transactions are shown in the table below.
    ///
    /// They represent a purchase of USD denominated IBM shares within a
    /// Sterling denominated portfolio.
    ///
    /// * The first two transactions are for separate buy and fx trades
    /// * Buying 500 IBM shares for $71,480.00
    /// * A foreign exchange conversion to fund the IBM purchase. (Buy
    /// $71,480.00 for &amp;#163;54,846.60)
    /// * The third transaction is an alternate version of the above trades.
    /// Buying 500 IBM shares and settling directly in Sterling.
    ///
    /// | Column |  Buy Trade | Fx Trade | Buy Trade with foreign Settlement |
    /// | ----- | ----- | ----- | ----- |
    /// | TransactionId | FBN00001 | FBN00002 | FBN00003 |
    /// | Type | Buy | FxBuy | Buy |
    /// | InstrumentUid | FIGI_BBG000BLNNH6 | CCY_USD | FIGI_BBG000BLNNH6 |
    /// | TransactionDate | 2018-08-02 | 2018-08-02 | 2018-08-02 |
    /// | SettlementDate | 2018-08-06 | 2018-08-06 | 2018-08-06 |
    /// | Units | 500 | 71480 | 500 |
    /// | TransactionPrice | 142.96 | 1 | 142.96 |
    /// | TradeCurrency | USD | USD | USD |
    /// | ExchangeRate | 1 | 0.7673 | 0.7673 |
    /// | TotalConsideration.Amount | 71480.00 | 54846.60 | 54846.60 |
    /// | TotalConsideration.Currency | USD | GBP | GBP |
    /// | Trade/default/TradeToPortfolioRate&amp;ast; | 0.7673 | 0.7673 |
    /// 0.7673 |
    ///
    /// [&amp;ast; This is a property field]
    ///
    /// #### A Forward FX Example
    ///
    /// LUSID has a flexible transaction modelling system, and there are a
    /// number of different ways of modelling forward fx trades.
    ///
    /// The default LUSID transaction types are FwdFxBuy and FwdFxSell. Other
    /// types and behaviours can be configured as required.
    ///
    /// Using these transaction types, the holdings query will report two
    /// forward positions. One in each currency.
    ///
    /// Since an FX trade is an exchange of one currency for another, the
    /// following two 6 month forward transactions are equivalent:
    ///
    /// | Column |  Forward 'Sell' Trade | Forward 'Buy' Trade |
    /// | ----- | ----- | ----- |
    /// | TransactionId | FBN00004 | FBN00005 |
    /// | Type | FwdFxSell | FwdFxBuy |
    /// | InstrumentUid | CCY_GBP | CCY_USD |
    /// | TransactionDate | 2018-08-02 | 2018-08-02 |
    /// | SettlementDate | 2019-02-06 | 2019-02-06 |
    /// | Units | 10000.00 | 13142.00 |
    /// | TransactionPrice |1 | 1 |
    /// | TradeCurrency | GBP | USD |
    /// | ExchangeRate | 1.3142 | 0.760919 |
    /// | TotalConsideration.Amount | 13142.00 | 10000.00 |
    /// | TotalConsideration.Currency | USD | GBP |
    /// | Trade/default/TradeToPortfolioRate | 1.0 | 0.760919 |
    ///
    /// ## Holdings
    ///
    /// A holding represents a position in a instrument or cash on a given
    /// date.
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | InstrumentUid|string|Unique instrument identifier |
    /// | HoldingType|string|Type of holding, eg Position, Balance,
    /// CashCommitment, Receivable, ForwardFX |
    /// | Units|decimal|Quantity of holding |
    /// | SettledUnits|decimal|Settled quantity of holding |
    /// | Cost|decimal|Book cost of holding in transaction currency |
    /// | CostPortfolioCcy|decimal|Book cost of holding in portfolio currency |
    /// | Transaction|TransactionDto|If this is commitment-type holding, the
    /// transaction behind it |
    ///
    ///
    /// ## Corporate Actions
    ///
    /// Corporate actions are represented within LUSID in terms of a set of
    /// instrument-specific 'transitions'.  These transitions are used to
    /// specify the participants of the corporate action, and the effect that
    /// the corporate action will have on holdings in those participants.
    ///
    /// *Corporate action*
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    /// | SourceId|id|  |
    /// | CorporateActionCode|code|  |
    /// | AnnouncementDate|datetime|  |
    /// | ExDate|datetime|  |
    /// | RecordDate|datetime|  |
    /// | PaymentDate|datetime|  |
    ///
    ///
    ///
    /// *Transition*
    ///
    /// | Field|Type|Description |
    /// | ---|---|--- |
    ///
    ///
    /// ## Property
    ///
    /// Properties are key-value pairs that can be applied to any entity within
    /// a domain (where a domain is `trade`, `portfolio`, `security` etc).
    /// Properties must be defined before use with a `PropertyDefinition` and
    /// can then subsequently be added to entities.
    ///
    /// # Schemas
    ///
    /// The following headers are returned on all responses from LUSID
    ///
    /// | Name | Purpose |
    /// | --- | --- |
    /// | lusid-meta-duration | Duration of the request |
    /// | lusid-meta-success | Whether or not LUSID considered the request to
    /// be successful |
    /// | lusid-meta-requestId | The unique identifier for the request |
    /// | lusid-schema-url | Url of the schema for the data being returned |
    /// | lusid-property-schema-url | Url of the schema for any properties |
    ///
    /// # Error Codes
    ///
    /// | Code|Name|Description |
    /// | ---|---|--- |
    /// | &lt;a name="100"&gt;100&lt;/a&gt;|Personalisations not found|The
    /// personalisation(s) identified by the pattern provided could not be
    /// found, either because it does not exist or it has been deleted. Please
    /// check the pattern your provided. |
    /// | &lt;a name="101"&gt;101&lt;/a&gt;|NonRecursivePersonalisation|  |
    /// | &lt;a name="102"&gt;102&lt;/a&gt;|VersionNotFound|  |
    /// | &lt;a name="104"&gt;104&lt;/a&gt;|InstrumentNotFound|  |
    /// | &lt;a name="105"&gt;105&lt;/a&gt;|PropertyNotFound|  |
    /// | &lt;a name="106"&gt;106&lt;/a&gt;|PortfolioRecursionDepth|  |
    /// | &lt;a name="108"&gt;108&lt;/a&gt;|GroupNotFound|  |
    /// | &lt;a name="109"&gt;109&lt;/a&gt;|PortfolioNotFound|  |
    /// | &lt;a name="110"&gt;110&lt;/a&gt;|PropertySchemaNotFound|  |
    /// | &lt;a name="111"&gt;111&lt;/a&gt;|PortfolioAncestryNotFound|  |
    /// | &lt;a name="112"&gt;112&lt;/a&gt;|PortfolioWithIdAlreadyExists|  |
    /// | &lt;a name="113"&gt;113&lt;/a&gt;|OrphanedPortfolio|  |
    /// | &lt;a name="119"&gt;119&lt;/a&gt;|MissingBaseClaims|  |
    /// | &lt;a name="121"&gt;121&lt;/a&gt;|PropertyNotDefined|  |
    /// | &lt;a name="122"&gt;122&lt;/a&gt;|CannotDeleteSystemProperty|  |
    /// | &lt;a name="123"&gt;123&lt;/a&gt;|CannotModifyImmutablePropertyField|
    /// |
    /// | &lt;a name="124"&gt;124&lt;/a&gt;|PropertyAlreadyExists|  |
    /// | &lt;a name="125"&gt;125&lt;/a&gt;|InvalidPropertyLifeTime|  |
    /// | &lt;a name="127"&gt;127&lt;/a&gt;|CannotModifyDefaultDataType|  |
    /// | &lt;a name="128"&gt;128&lt;/a&gt;|GroupAlreadyExists|  |
    /// | &lt;a name="129"&gt;129&lt;/a&gt;|NoSuchDataType|  |
    /// | &lt;a name="132"&gt;132&lt;/a&gt;|ValidationError|  |
    /// | &lt;a name="133"&gt;133&lt;/a&gt;|LoopDetectedInGroupHierarchy|  |
    /// | &lt;a name="135"&gt;135&lt;/a&gt;|SubGroupAlreadyExists|  |
    /// | &lt;a name="138"&gt;138&lt;/a&gt;|PriceSourceNotFound|  |
    /// | &lt;a name="139"&gt;139&lt;/a&gt;|AnalyticStoreNotFound|  |
    /// | &lt;a name="141"&gt;141&lt;/a&gt;|AnalyticStoreAlreadyExists|  |
    /// | &lt;a name="143"&gt;143&lt;/a&gt;|ClientInstrumentAlreadyExists|  |
    /// | &lt;a name="144"&gt;144&lt;/a&gt;|DuplicateInParameterSet|  |
    /// | &lt;a name="147"&gt;147&lt;/a&gt;|ResultsNotFound|  |
    /// | &lt;a name="148"&gt;148&lt;/a&gt;|OrderFieldNotInResultSet|  |
    /// | &lt;a name="149"&gt;149&lt;/a&gt;|OperationFailed|  |
    /// | &lt;a name="150"&gt;150&lt;/a&gt;|ElasticSearchError|  |
    /// | &lt;a name="151"&gt;151&lt;/a&gt;|InvalidParameterValue|  |
    /// | &lt;a name="153"&gt;153&lt;/a&gt;|CommandProcessingFailure|  |
    /// | &lt;a name="154"&gt;154&lt;/a&gt;|EntityStateConstructionFailure|  |
    /// | &lt;a name="155"&gt;155&lt;/a&gt;|EntityTimelineDoesNotExist|  |
    /// | &lt;a name="156"&gt;156&lt;/a&gt;|EventPublishFailure|  |
    /// | &lt;a name="157"&gt;157&lt;/a&gt;|InvalidRequestFailure|  |
    /// | &lt;a name="158"&gt;158&lt;/a&gt;|EventPublishUnknown|  |
    /// | &lt;a name="159"&gt;159&lt;/a&gt;|EventQueryFailure|  |
    /// | &lt;a name="160"&gt;160&lt;/a&gt;|BlobDidNotExistFailure|  |
    /// | &lt;a name="162"&gt;162&lt;/a&gt;|SubSystemRequestFailure|  |
    /// | &lt;a name="163"&gt;163&lt;/a&gt;|SubSystemConfigurationFailure|  |
    /// | &lt;a name="165"&gt;165&lt;/a&gt;|FailedToDelete|  |
    /// | &lt;a name="166"&gt;166&lt;/a&gt;|UpsertClientInstrumentFailure|  |
    /// | &lt;a name="167"&gt;167&lt;/a&gt;|IllegalAsAtInterval|  |
    /// | &lt;a name="168"&gt;168&lt;/a&gt;|IllegalBitemporalQuery|  |
    /// | &lt;a name="169"&gt;169&lt;/a&gt;|InvalidAlternateId|  |
    /// | &lt;a
    /// name="170"&gt;170&lt;/a&gt;|CannotAddSourcePortfolioPropertyExplicitly|
    /// |
    /// | &lt;a name="171"&gt;171&lt;/a&gt;|EntityAlreadyExistsInGroup|  |
    /// | &lt;a name="173"&gt;173&lt;/a&gt;|EntityWithIdAlreadyExists|  |
    /// | &lt;a name="174"&gt;174&lt;/a&gt;|PortfolioDetailsDoNotExist|  |
    /// | &lt;a name="176"&gt;176&lt;/a&gt;|PortfolioWithNameAlreadyExists|  |
    /// | &lt;a name="177"&gt;177&lt;/a&gt;|InvalidTransactions|  |
    /// | &lt;a name="178"&gt;178&lt;/a&gt;|ReferencePortfolioNotFound|  |
    /// | &lt;a name="179"&gt;179&lt;/a&gt;|DuplicateIdFailure|  |
    /// | &lt;a name="180"&gt;180&lt;/a&gt;|CommandRetrievalFailure|  |
    /// | &lt;a name="181"&gt;181&lt;/a&gt;|DataFilterApplicationFailure|  |
    /// | &lt;a name="182"&gt;182&lt;/a&gt;|SearchFailed|  |
    /// | &lt;a
    /// name="183"&gt;183&lt;/a&gt;|MovementsEngineConfigurationKeyFailure|  |
    /// | &lt;a name="184"&gt;184&lt;/a&gt;|FxRateSourceNotFound|  |
    /// | &lt;a name="185"&gt;185&lt;/a&gt;|AccrualSourceNotFound|  |
    /// | &lt;a name="186"&gt;186&lt;/a&gt;|EntitlementsFailure|  |
    /// | &lt;a name="187"&gt;187&lt;/a&gt;|InvalidIdentityToken|  |
    /// | &lt;a name="188"&gt;188&lt;/a&gt;|InvalidRequestHeaders|  |
    /// | &lt;a name="189"&gt;189&lt;/a&gt;|PriceNotFound|  |
    /// | &lt;a name="190"&gt;190&lt;/a&gt;|InvalidSubHoldingKeysProvided|  |
    /// | &lt;a name="191"&gt;191&lt;/a&gt;|DuplicateSubHoldingKeysProvided|  |
    /// | &lt;a name="200"&gt;200&lt;/a&gt;|InvalidUnitForDataType|  |
    /// | &lt;a name="201"&gt;201&lt;/a&gt;|InvalidTypeForDataType|  |
    /// | &lt;a name="202"&gt;202&lt;/a&gt;|InvalidValueForDataType|  |
    /// | &lt;a name="203"&gt;203&lt;/a&gt;|UnitNotDefinedForDataType|  |
    /// | &lt;a name="204"&gt;204&lt;/a&gt;|UnitsNotSupportedOnDataType|  |
    /// | &lt;a name="205"&gt;205&lt;/a&gt;|CannotSpecifyUnitsOnDataType|  |
    /// | &lt;a name="206"&gt;206&lt;/a&gt;|UnitSchemaInconsistentWithDataType|
    /// |
    /// | &lt;a name="207"&gt;207&lt;/a&gt;|UnitDefinitionNotSpecified|  |
    /// | &lt;a name="208"&gt;208&lt;/a&gt;|DuplicateUnitDefinitionsSpecified|
    /// |
    /// | &lt;a name="209"&gt;209&lt;/a&gt;|InvalidUnitsDefinition|  |
    /// | &lt;a name="210"&gt;210&lt;/a&gt;|InvalidInstrumentIdentifierUnit|  |
    /// | &lt;a name="211"&gt;211&lt;/a&gt;|HoldingsAdjustmentDoesNotExist|  |
    /// | &lt;a name="212"&gt;212&lt;/a&gt;|CouldNotBuildExcelUrl|  |
    /// | &lt;a name="213"&gt;213&lt;/a&gt;|CouldNotGetExcelVersion|  |
    /// | &lt;a name="214"&gt;214&lt;/a&gt;|InstrumentByCodeNotFound|  |
    /// | &lt;a name="215"&gt;215&lt;/a&gt;|EntitySchemaDoesNotExist|  |
    /// | &lt;a name="216"&gt;216&lt;/a&gt;|FeatureNotSupportedOnPortfolioType|
    /// |
    /// | &lt;a name="217"&gt;217&lt;/a&gt;|QuotePublishFailure|  |
    /// | &lt;a name="218"&gt;218&lt;/a&gt;|QuoteQueryFailure|  |
    /// | &lt;a name="-10"&gt;-10&lt;/a&gt;|ServerConfigurationError|  |
    /// | &lt;a name="-1"&gt;-1&lt;/a&gt;|Unknown error|  |
    ///
    /// </summary>
    public partial interface ILUSIDAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfAnalyticStoreKey>> ListAnalyticStoresWithHttpMessagesAsync(System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AnalyticStore>> CreateAnalyticStoreWithHttpMessagesAsync(CreateAnalyticStoreRequest request = default(CreateAnalyticStoreRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='year'>
        /// </param>
        /// <param name='month'>
        /// </param>
        /// <param name='day'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AnalyticStore>> GetAnalyticStoreWithHttpMessagesAsync(string scope, int year, int month, int day, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='year'>
        /// </param>
        /// <param name='month'>
        /// </param>
        /// <param name='day'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletedEntityResponse>> DeleteAnalyticStoreWithHttpMessagesAsync(string scope, int year, int month, int day, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='year'>
        /// </param>
        /// <param name='month'>
        /// </param>
        /// <param name='day'>
        /// </param>
        /// <param name='data'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AnalyticStore>> InsertAnalyticsWithHttpMessagesAsync(string scope, int year, int month, int day, IList<InstrumentAnalytic> data = default(IList<InstrumentAnalytic>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfCorporateActionEvent>> GetCorporateActionsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='actions'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpsertCorporateActionsResponse>> BatchUpsertCorporateActionsWithHttpMessagesAsync(string scope, string code, IList<CreateCorporateAction> actions = default(IList<CreateCorporateAction>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataType>> CreateDataTypeWithHttpMessagesAsync(CreateDataTypeRequest request = default(CreateDataTypeRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='includeDefault'>
        /// </param>
        /// <param name='includeSystem'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfDataType>> ListDataTypesWithHttpMessagesAsync(string scope, bool? includeDefault = default(bool?), bool? includeSystem = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataType>> GetDataTypeWithHttpMessagesAsync(string scope, string name, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataType>> UpdateDataTypeWithHttpMessagesAsync(string scope, string name, UpdateDataTypeRequest request = default(UpdateDataTypeRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='units'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IUnitDefinition>> GetUnitsFromDataTypeWithHttpMessagesAsync(string scope, string name, IList<string> units = default(IList<string>), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='portfolio'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Portfolio>> CreateDerivedPortfolioWithHttpMessagesAsync(string scope, CreateDerivedTransactionPortfolioRequest portfolio = default(CreateDerivedTransactionPortfolioRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletedEntityResponse>> DeleteDerivedPortfolioDetailsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='definitions'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TryAddClientInstruments>> BatchAddClientInstrumentsWithHttpMessagesAsync(IList<CreateClientInstrumentRequest> definitions = default(IList<CreateClientInstrumentRequest>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='uids'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeleteClientInstrumentsResponse>> BatchDeleteClientInstrumentsWithHttpMessagesAsync(IList<string> uids = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='uid'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='instrumentPropertyKeys'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Instrument>> GetInstrumentWithHttpMessagesAsync(string uid, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='codeType'>
        /// Possible values include: 'Undefined', 'ReutersAssetId', 'CINS',
        /// 'Isin', 'Sedol', 'Cusip', 'Ticker', 'ClientInternal', 'Figi',
        /// 'CompositeFigi', 'ShareClassFigi', 'Wertpapier'
        /// </param>
        /// <param name='codes'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='instrumentPropertyKeys'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<LookupInstrumentsFromCodesResponse>> LookupInstrumentsFromCodesWithHttpMessagesAsync(string codeType = default(string), IList<string> codes = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='classifications'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpsertInstrumentPropertiesResponse>> BatchUpsertInstrumentPropertiesWithHttpMessagesAsync(IList<InstrumentProperty> classifications = default(IList<InstrumentProperty>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='domain'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetSamlIdentityProviderIdWithHttpMessagesAsync(string domain, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='version'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetExcelDownloadUrlWithHttpMessagesAsync(string version = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<VersionSummary>> GetLusidVersionsWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='pattern'>
        /// </param>
        /// <param name='scope'>
        /// Possible values include: 'User', 'Group', 'Default', 'All'
        /// </param>
        /// <param name='recursive'>
        /// </param>
        /// <param name='wildcards'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfPersonalisation>> GetPersonalisationsWithHttpMessagesAsync(string pattern = default(string), string scope = default(string), bool? recursive = false, bool? wildcards = false, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='personalisations'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpsertPersonalisationResponse>> UpsertPersonalisationsWithHttpMessagesAsync(IList<Personalisation> personalisations = default(IList<Personalisation>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='key'>
        /// </param>
        /// <param name='scope'>
        /// Possible values include: 'User', 'Group', 'Default', 'All'
        /// </param>
        /// <param name='group'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletedEntityResponse>> DeletePersonalisationWithHttpMessagesAsync(string key = default(string), string scope = default(string), string group = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfPortfolioGroup>> ListPortfolioGroupsWithHttpMessagesAsync(string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioGroup>> CreatePortfolioGroupWithHttpMessagesAsync(string scope, CreatePortfolioGroupRequest request = default(CreatePortfolioGroupRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioGroup>> GetPortfolioGroupWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioGroup>> UpdatePortfolioGroupWithHttpMessagesAsync(string scope, string code, UpdatePortfolioGroupRequest request = default(UpdatePortfolioGroupRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletedEntityResponse>> DeletePortfolioGroupWithHttpMessagesAsync(string scope, string code, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ListAggregationResponse>> GetAggregationByGroupWithHttpMessagesAsync(string scope, string code, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<NestedAggregationResponse>> GetNestedAggregationByGroupWithHttpMessagesAsync(string scope, string code, AggregationRequest request = default(AggregationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='fromAsAt'>
        /// </param>
        /// <param name='toAsAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfProcessedCommand>> GetPortfolioGroupCommandsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='propertyFilter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ExpandedGroup>> GetPortfolioGroupExpansionWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='identifier'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioGroup>> AddPortfolioToGroupWithHttpMessagesAsync(string scope, string code, ResourceId identifier = default(ResourceId), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='portfolioScope'>
        /// </param>
        /// <param name='portfolioCode'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioGroup>> DeletePortfolioFromGroupWithHttpMessagesAsync(string scope, string code, string portfolioScope, string portfolioCode, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='identifier'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioGroup>> AddSubGroupToGroupWithHttpMessagesAsync(string scope, string code, ResourceId identifier = default(ResourceId), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='subgroupScope'>
        /// </param>
        /// <param name='subgroupCode'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioGroup>> DeleteSubGroupFromGroupWithHttpMessagesAsync(string scope, string code, string subgroupScope, string subgroupCode, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfScope>> ListPortfolioScopesWithHttpMessagesAsync(IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfPortfolio>> ListPortfoliosWithHttpMessagesAsync(string scope, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Portfolio>> GetPortfolioWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Portfolio>> UpdatePortfolioWithHttpMessagesAsync(string scope, string code, UpdatePortfolioRequest request = default(UpdatePortfolioRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletedEntityResponse>> DeletePortfolioWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ListAggregationResponse>> GetAggregationByPortfolioWithHttpMessagesAsync(string scope, string code, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='fromAsAt'>
        /// </param>
        /// <param name='toAsAt'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfProcessedCommand>> GetPortfolioCommandsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioProperties>> GetPortfolioPropertiesWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='portfolioProperties'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioProperties>> UpsertPortfolioPropertiesWithHttpMessagesAsync(string scope, string code, IDictionary<string, PropertyValue> portfolioProperties = default(IDictionary<string, PropertyValue>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='portfolioPropertyKeys'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletedEntityResponse>> DeletePortfolioPropertiesWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), IList<string> portfolioPropertyKeys = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='request'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfReconciliationBreak>> ReconcileHoldingsWithHttpMessagesAsync(PortfoliosReconciliationRequest request = default(PortfoliosReconciliationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='keys'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfPropertyDefinition>> GetMultiplePropertyDefinitionsWithHttpMessagesAsync(IList<string> keys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='definition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PropertyDefinition>> CreatePropertyDefinitionWithHttpMessagesAsync(CreatePropertyDefinitionRequest definition = default(CreatePropertyDefinitionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='domain'>
        /// Possible values include: 'Trade', 'Portfolio', 'Security',
        /// 'Holding', 'ReferenceHolding', 'TxnType'
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PropertyDefinition>> GetPropertyDefinitionWithHttpMessagesAsync(string domain, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='domain'>
        /// Possible values include: 'Trade', 'Portfolio', 'Security',
        /// 'Holding', 'ReferenceHolding', 'TxnType'
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='definition'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PropertyDefinition>> UpdatePropertyDefinitionWithHttpMessagesAsync(string domain, string scope, string code, UpdatePropertyDefinitionRequest definition = default(UpdatePropertyDefinitionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='domain'>
        /// Possible values include: 'Trade', 'Portfolio', 'Security',
        /// 'Holding', 'ReferenceHolding', 'TxnType'
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletedEntityResponse>> DeletePropertyDefinitionWithHttpMessagesAsync(string domain, string scope, string code, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='referencePortfolio'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Portfolio>> CreateReferencePortfolioWithHttpMessagesAsync(string scope, CreateReferencePortfolioRequest referencePortfolio = default(CreateReferencePortfolioRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfReferencePortfolioConstituent>> GetReferencePortfolioConstituentsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='constituents'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpsertReferencePortfolioConstituentsResponse>> UpsertReferencePortfolioConstituentsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset effectiveAt, IList<ReferencePortfolioConstituentRequest> constituents = default(IList<ReferencePortfolioConstituentRequest>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='key'>
        /// </param>
        /// <param name='date'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Results>> GetResultsWithHttpMessagesAsync(string scope, string key, System.DateTimeOffset date, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='key'>
        /// </param>
        /// <param name='date'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Results>> UpsertResultsWithHttpMessagesAsync(string scope, string key, System.DateTimeOffset date, CreateResults request = default(CreateResults), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='resultsKey'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ListAggregationResponse>> GetAggregationByResultSetWithHttpMessagesAsync(string scope, string resultsKey, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfString>> ListEntitiesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='entity'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Schema>> GetEntitySchemaWithHttpMessagesAsync(string entity, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='propertyKeys'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PropertySchema>> GetPropertySchemaWithHttpMessagesAsync(IList<string> propertyKeys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfValueType>> GetValueTypesWithHttpMessagesAsync(IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='request'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfPortfolioGroup>> PortfolioGroupsSearchWithHttpMessagesAsync(object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='request'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfPortfolioSearchResult>> PortfoliosSearchWithHttpMessagesAsync(object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='request'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfPropertyDefinition>> PropertiesSearchWithHttpMessagesAsync(object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfTransactionMetaData>> ListConfigurationTransactionTypesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='types'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfTransactionMetaData>> SetConfigurationTransactionTypesWithHttpMessagesAsync(IList<TransactionConfigurationDataRequest> types = default(IList<TransactionConfigurationDataRequest>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='type'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TransactionConfigurationData>> CreateConfigurationTransactionTypeWithHttpMessagesAsync(TransactionConfigurationDataRequest type = default(TransactionConfigurationDataRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='createRequest'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Portfolio>> CreatePortfolioWithHttpMessagesAsync(string scope, CreateTransactionPortfolioRequest createRequest = default(CreateTransactionPortfolioRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioDetails>> GetDetailsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='details'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PortfolioDetails>> UpsertPortfolioDetailsWithHttpMessagesAsync(string scope, string code, CreatePortfolioDetails details = default(CreatePortfolioDetails), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='byTaxlots'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='instrumentPropertyKeys'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<VersionedResourceListOfHolding>> GetHoldingsWithHttpMessagesAsync(string scope, string code, bool? byTaxlots = default(bool?), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), IList<string> instrumentPropertyKeys = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='holdingAdjustments'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AdjustHolding>> SetHoldingsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='holdingAdjustments'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AdjustHolding>> AdjustHoldingsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletedEntityResponse>> CancelAdjustHoldingsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset effectiveAt, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='fromEffectiveAt'>
        /// </param>
        /// <param name='toEffectiveAt'>
        /// </param>
        /// <param name='asAtTime'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ResourceListOfHoldingsAdjustmentHeader>> ListHoldingsAdjustmentsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? fromEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? toEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAtTime = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='effectiveAt'>
        /// </param>
        /// <param name='asAtTime'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<HoldingsAdjustment>> GetHoldingsAdjustmentWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAtTime = default(System.DateTimeOffset?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='fromTransactionDate'>
        /// </param>
        /// <param name='toTransactionDate'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='instrumentPropertyKeys'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<VersionedResourceListOfTransaction>> GetTransactionsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? fromTransactionDate = default(System.DateTimeOffset?), System.DateTimeOffset? toTransactionDate = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> instrumentPropertyKeys = default(IList<string>), string filter = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='transactions'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpsertPortfolioTransactionsResponse>> UpsertTransactionsWithHttpMessagesAsync(string scope, string code, IList<TransactionRequest> transactions = default(IList<TransactionRequest>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletedEntityResponse>> DeleteTransactionsWithHttpMessagesAsync(string scope, string code, IList<string> id = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='transactionId'>
        /// </param>
        /// <param name='transactionProperties'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AddTransactionPropertyResponse>> AddTransactionPropertyWithHttpMessagesAsync(string scope, string code, string transactionId, IDictionary<string, PerpetualPropertyValue> transactionProperties = default(IDictionary<string, PerpetualPropertyValue>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='transactionId'>
        /// </param>
        /// <param name='transactionPropertyKey'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeletedEntityResponse>> DeletePropertyFromTransactionWithHttpMessagesAsync(string scope, string code, string transactionId, string transactionPropertyKey = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='scope'>
        /// </param>
        /// <param name='code'>
        /// </param>
        /// <param name='asAt'>
        /// </param>
        /// <param name='sortBy'>
        /// </param>
        /// <param name='start'>
        /// </param>
        /// <param name='limit'>
        /// </param>
        /// <param name='instrumentPropertyKeys'>
        /// </param>
        /// <param name='filter'>
        /// </param>
        /// <param name='parameters'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<VersionedResourceListOfOutputTransaction>> BuildTransactionsWithHttpMessagesAsync(string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> instrumentPropertyKeys = default(IList<string>), string filter = default(string), TransactionQueryParameters parameters = default(TransactionQueryParameters), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
