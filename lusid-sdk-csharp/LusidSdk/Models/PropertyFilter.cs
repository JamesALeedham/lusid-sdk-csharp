// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class PropertyFilter
    {
        /// <summary>
        /// Initializes a new instance of the PropertyFilter class.
        /// </summary>
        public PropertyFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PropertyFilter class.
        /// </summary>
        /// <param name="operatorProperty">Possible values include: 'Equals',
        /// 'NotEquals', 'GreaterThan', 'GreaterThanOrEqualTo', 'LessThan',
        /// 'LessThanOrEqualTo', 'In'</param>
        /// <param name="rightOperandType">Possible values include: 'Absolute',
        /// 'Property'</param>
        public PropertyFilter(string left = default(string), string operatorProperty = default(string), object right = default(object), string rightOperandType = default(string))
        {
            Left = left;
            OperatorProperty = operatorProperty;
            Right = right;
            RightOperandType = rightOperandType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "left")]
        public string Left { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Equals', 'NotEquals',
        /// 'GreaterThan', 'GreaterThanOrEqualTo', 'LessThan',
        /// 'LessThanOrEqualTo', 'In'
        /// </summary>
        [JsonProperty(PropertyName = "operator")]
        public string OperatorProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "right")]
        public object Right { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Absolute', 'Property'
        /// </summary>
        [JsonProperty(PropertyName = "rightOperandType")]
        public string RightOperandType { get; set; }

    }
}
