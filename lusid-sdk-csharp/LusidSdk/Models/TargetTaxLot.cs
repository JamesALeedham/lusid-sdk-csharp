// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Used to specify holdings target amounts at the tax-lot level
    /// </summary>
    public partial class TargetTaxLot
    {
        /// <summary>
        /// Initializes a new instance of the TargetTaxLot class.
        /// </summary>
        public TargetTaxLot()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TargetTaxLot class.
        /// </summary>
        /// <param name="units">Quantity of holding</param>
        /// <param name="cost">Book cost of holding in transaction
        /// currency</param>
        /// <param name="portfolioCost">Book cost of holding in portfolio
        /// currency</param>
        /// <param name="price">Purchase price. Part of the unique key required
        /// for multiple taxlots</param>
        /// <param name="purchaseDate">Purchase Date. Part of the unique key
        /// required for multiple taxlots</param>
        /// <param name="settlementDate">Original settlement date of the
        /// tax-lot's opening transaction.</param>
        public TargetTaxLot(double units, double? cost = default(double?), double? portfolioCost = default(double?), double? price = default(double?), System.DateTimeOffset? purchaseDate = default(System.DateTimeOffset?), System.DateTimeOffset? settlementDate = default(System.DateTimeOffset?))
        {
            Units = units;
            Cost = cost;
            PortfolioCost = portfolioCost;
            Price = price;
            PurchaseDate = purchaseDate;
            SettlementDate = settlementDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets quantity of holding
        /// </summary>
        [JsonProperty(PropertyName = "units")]
        public double Units { get; set; }

        /// <summary>
        /// Gets or sets book cost of holding in transaction currency
        /// </summary>
        [JsonProperty(PropertyName = "cost")]
        public double? Cost { get; set; }

        /// <summary>
        /// Gets or sets book cost of holding in portfolio currency
        /// </summary>
        [JsonProperty(PropertyName = "portfolioCost")]
        public double? PortfolioCost { get; set; }

        /// <summary>
        /// Gets or sets purchase price. Part of the unique key required for
        /// multiple taxlots
        /// </summary>
        [JsonProperty(PropertyName = "price")]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or sets purchase Date. Part of the unique key required for
        /// multiple taxlots
        /// </summary>
        [JsonProperty(PropertyName = "purchaseDate")]
        public System.DateTimeOffset? PurchaseDate { get; set; }

        /// <summary>
        /// Gets or sets original settlement date of the tax-lot's opening
        /// transaction.
        /// </summary>
        [JsonProperty(PropertyName = "settlementDate")]
        public System.DateTimeOffset? SettlementDate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            //Nothing to validate
        }
    }
}
