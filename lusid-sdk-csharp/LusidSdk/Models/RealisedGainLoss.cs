// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class RealisedGainLoss
    {
        /// <summary>
        /// Initializes a new instance of the RealisedGainLoss class.
        /// </summary>
        public RealisedGainLoss()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RealisedGainLoss class.
        /// </summary>
        /// <param name="instrumentUid">Unique instrument identifier</param>
        /// <param name="units">Quantity against which gain has been made in
        /// units of the instrument</param>
        /// <param name="purchaseTradeDate">Date the position was originally
        /// purchased</param>
        /// <param name="purchaseSettlementDate">Date the position originally
        /// settled</param>
        /// <param name="purchasePrice">Price the instrument was purchased
        /// at</param>
        /// <param name="costTradeCcy">Purchase cost in the trade
        /// currency</param>
        /// <param name="costPortfolioCcy">Purchase cost in the trade
        /// currency</param>
        /// <param name="realisedTradeCcy">Gains or losses in the trade
        /// currency</param>
        /// <param name="realisedTotal">Total gains or losses in the portfolio
        /// currency</param>
        /// <param name="realisedMarket">Market gains or losses in the
        /// portfolio currency</param>
        /// <param name="realisedCurrency">Currency gains or losses in the
        /// portfolio currency</param>
        public RealisedGainLoss(string instrumentUid = default(string), double? units = default(double?), System.DateTimeOffset? purchaseTradeDate = default(System.DateTimeOffset?), System.DateTimeOffset? purchaseSettlementDate = default(System.DateTimeOffset?), double? purchasePrice = default(double?), CurrencyAndAmount costTradeCcy = default(CurrencyAndAmount), CurrencyAndAmount costPortfolioCcy = default(CurrencyAndAmount), CurrencyAndAmount realisedTradeCcy = default(CurrencyAndAmount), CurrencyAndAmount realisedTotal = default(CurrencyAndAmount), CurrencyAndAmount realisedMarket = default(CurrencyAndAmount), CurrencyAndAmount realisedCurrency = default(CurrencyAndAmount))
        {
            InstrumentUid = instrumentUid;
            Units = units;
            PurchaseTradeDate = purchaseTradeDate;
            PurchaseSettlementDate = purchaseSettlementDate;
            PurchasePrice = purchasePrice;
            CostTradeCcy = costTradeCcy;
            CostPortfolioCcy = costPortfolioCcy;
            RealisedTradeCcy = realisedTradeCcy;
            RealisedTotal = realisedTotal;
            RealisedMarket = realisedMarket;
            RealisedCurrency = realisedCurrency;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets unique instrument identifier
        /// </summary>
        [JsonProperty(PropertyName = "instrumentUid")]
        public string InstrumentUid { get; private set; }

        /// <summary>
        /// Gets quantity against which gain has been made in units of the
        /// instrument
        /// </summary>
        [JsonProperty(PropertyName = "units")]
        public double? Units { get; private set; }

        /// <summary>
        /// Gets date the position was originally purchased
        /// </summary>
        [JsonProperty(PropertyName = "purchaseTradeDate")]
        public System.DateTimeOffset? PurchaseTradeDate { get; private set; }

        /// <summary>
        /// Gets date the position originally settled
        /// </summary>
        [JsonProperty(PropertyName = "purchaseSettlementDate")]
        public System.DateTimeOffset? PurchaseSettlementDate { get; private set; }

        /// <summary>
        /// Gets price the instrument was purchased at
        /// </summary>
        [JsonProperty(PropertyName = "purchasePrice")]
        public double? PurchasePrice { get; private set; }

        /// <summary>
        /// Gets purchase cost in the trade currency
        /// </summary>
        [JsonProperty(PropertyName = "costTradeCcy")]
        public CurrencyAndAmount CostTradeCcy { get; private set; }

        /// <summary>
        /// Gets purchase cost in the trade currency
        /// </summary>
        [JsonProperty(PropertyName = "costPortfolioCcy")]
        public CurrencyAndAmount CostPortfolioCcy { get; private set; }

        /// <summary>
        /// Gets gains or losses in the trade currency
        /// </summary>
        [JsonProperty(PropertyName = "realisedTradeCcy")]
        public CurrencyAndAmount RealisedTradeCcy { get; private set; }

        /// <summary>
        /// Gets total gains or losses in the portfolio currency
        /// </summary>
        [JsonProperty(PropertyName = "realisedTotal")]
        public CurrencyAndAmount RealisedTotal { get; private set; }

        /// <summary>
        /// Gets market gains or losses in the portfolio currency
        /// </summary>
        [JsonProperty(PropertyName = "realisedMarket")]
        public CurrencyAndAmount RealisedMarket { get; private set; }

        /// <summary>
        /// Gets currency gains or losses in the portfolio currency
        /// </summary>
        [JsonProperty(PropertyName = "realisedCurrency")]
        public CurrencyAndAmount RealisedCurrency { get; private set; }

    }
}
