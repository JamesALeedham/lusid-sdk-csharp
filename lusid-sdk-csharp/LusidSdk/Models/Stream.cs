// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Stream
    {
        /// <summary>
        /// Initializes a new instance of the Stream class.
        /// </summary>
        public Stream()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Stream class.
        /// </summary>
        public Stream(bool? canRead = default(bool?), bool? canSeek = default(bool?), bool? canTimeout = default(bool?), bool? canWrite = default(bool?), long? length = default(long?), long? position = default(long?), int? readTimeout = default(int?), int? writeTimeout = default(int?))
        {
            CanRead = canRead;
            CanSeek = canSeek;
            CanTimeout = canTimeout;
            CanWrite = canWrite;
            Length = length;
            Position = position;
            ReadTimeout = readTimeout;
            WriteTimeout = writeTimeout;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "canRead")]
        public bool? CanRead { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "canSeek")]
        public bool? CanSeek { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "canTimeout")]
        public bool? CanTimeout { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "canWrite")]
        public bool? CanWrite { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "length")]
        public long? Length { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "position")]
        public long? Position { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "readTimeout")]
        public int? ReadTimeout { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "writeTimeout")]
        public int? WriteTimeout { get; set; }

    }
}
