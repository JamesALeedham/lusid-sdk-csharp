// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class OutputTransactionDto
    {
        /// <summary>
        /// Initializes a new instance of the OutputTransactionDto class.
        /// </summary>
        public OutputTransactionDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OutputTransactionDto class.
        /// </summary>
        /// <param name="tradeId">Unique trade identifier</param>
        /// <param name="type">LUSID transaction type code - Buy, Sell,
        /// StockIn, StockOut, etc</param>
        /// <param name="description">LUSID transaction description</param>
        /// <param name="securityUid">Unique security identifier</param>
        /// <param name="tradeDate">Trade date</param>
        /// <param name="settlementDate">Settlement date</param>
        /// <param name="units">Quantity of trade in units of the
        /// security</param>
        /// <param name="tradePrice">Execution price for the trade</param>
        /// <param name="totalConsideration">Total value of the trade</param>
        /// <param name="exchangeRate">Rate between trade and settlement
        /// currency</param>
        /// <param name="tradeToPortfolioRate">Rate between trade and portfolio
        /// currency</param>
        /// <param name="tradeCurrency">Trade currency</param>
        /// <param name="counterpartyId">Counterparty identifier</param>
        /// <param name="source">Where this trade came from, either Client or
        /// System. Possible values include: 'System', 'Client'</param>
        /// <param name="transactionStatus">Transaction status (active, amended
        /// or cancelled). Possible values include: 'Active', 'Amended',
        /// 'Cancelled'</param>
        /// <param name="entryDateTime">Date/Time the transaction was booked
        /// into LUSID</param>
        /// <param name="cancelDateTime">Date/Time the cancellation was booked
        /// into LUSID</param>
        /// <param name="realisedGainLoss">Collection of gains or
        /// losses</param>
        public OutputTransactionDto(string tradeId, string type, string description, string securityUid = default(string), System.DateTimeOffset? tradeDate = default(System.DateTimeOffset?), System.DateTimeOffset? settlementDate = default(System.DateTimeOffset?), double? units = default(double?), TradePrice tradePrice = default(TradePrice), CurrencyAndAmount totalConsideration = default(CurrencyAndAmount), double? exchangeRate = default(double?), double? tradeToPortfolioRate = default(double?), string tradeCurrency = default(string), IList<PerpetualPropertyDto> properties = default(IList<PerpetualPropertyDto>), string counterpartyId = default(string), string source = default(string), string nettingSet = default(string), string transactionStatus = default(string), System.DateTimeOffset? entryDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? cancelDateTime = default(System.DateTimeOffset?), IList<RealisedGainLossDto> realisedGainLoss = default(IList<RealisedGainLossDto>))
        {
            TradeId = tradeId;
            Type = type;
            Description = description;
            SecurityUid = securityUid;
            TradeDate = tradeDate;
            SettlementDate = settlementDate;
            Units = units;
            TradePrice = tradePrice;
            TotalConsideration = totalConsideration;
            ExchangeRate = exchangeRate;
            TradeToPortfolioRate = tradeToPortfolioRate;
            TradeCurrency = tradeCurrency;
            Properties = properties;
            CounterpartyId = counterpartyId;
            Source = source;
            NettingSet = nettingSet;
            TransactionStatus = transactionStatus;
            EntryDateTime = entryDateTime;
            CancelDateTime = cancelDateTime;
            RealisedGainLoss = realisedGainLoss;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets unique trade identifier
        /// </summary>
        [JsonProperty(PropertyName = "tradeId")]
        public string TradeId { get; private set; }

        /// <summary>
        /// Gets LUSID transaction type code - Buy, Sell, StockIn, StockOut,
        /// etc
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets LUSID transaction description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets unique security identifier
        /// </summary>
        [JsonProperty(PropertyName = "securityUid")]
        public string SecurityUid { get; private set; }

        /// <summary>
        /// Gets trade date
        /// </summary>
        [JsonProperty(PropertyName = "tradeDate")]
        public System.DateTimeOffset? TradeDate { get; private set; }

        /// <summary>
        /// Gets settlement date
        /// </summary>
        [JsonProperty(PropertyName = "settlementDate")]
        public System.DateTimeOffset? SettlementDate { get; private set; }

        /// <summary>
        /// Gets quantity of trade in units of the security
        /// </summary>
        [JsonProperty(PropertyName = "units")]
        public double? Units { get; private set; }

        /// <summary>
        /// Gets execution price for the trade
        /// </summary>
        [JsonProperty(PropertyName = "tradePrice")]
        public TradePrice TradePrice { get; private set; }

        /// <summary>
        /// Gets total value of the trade
        /// </summary>
        [JsonProperty(PropertyName = "totalConsideration")]
        public CurrencyAndAmount TotalConsideration { get; private set; }

        /// <summary>
        /// Gets rate between trade and settlement currency
        /// </summary>
        [JsonProperty(PropertyName = "exchangeRate")]
        public double? ExchangeRate { get; private set; }

        /// <summary>
        /// Gets rate between trade and portfolio currency
        /// </summary>
        [JsonProperty(PropertyName = "tradeToPortfolioRate")]
        public double? TradeToPortfolioRate { get; private set; }

        /// <summary>
        /// Gets trade currency
        /// </summary>
        [JsonProperty(PropertyName = "tradeCurrency")]
        public string TradeCurrency { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IList<PerpetualPropertyDto> Properties { get; private set; }

        /// <summary>
        /// Gets counterparty identifier
        /// </summary>
        [JsonProperty(PropertyName = "counterpartyId")]
        public string CounterpartyId { get; private set; }

        /// <summary>
        /// Gets where this trade came from, either Client or System. Possible
        /// values include: 'System', 'Client'
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "nettingSet")]
        public string NettingSet { get; private set; }

        /// <summary>
        /// Gets transaction status (active, amended or cancelled). Possible
        /// values include: 'Active', 'Amended', 'Cancelled'
        /// </summary>
        [JsonProperty(PropertyName = "transactionStatus")]
        public string TransactionStatus { get; private set; }

        /// <summary>
        /// Gets date/Time the transaction was booked into LUSID
        /// </summary>
        [JsonProperty(PropertyName = "entryDateTime")]
        public System.DateTimeOffset? EntryDateTime { get; private set; }

        /// <summary>
        /// Gets date/Time the cancellation was booked into LUSID
        /// </summary>
        [JsonProperty(PropertyName = "cancelDateTime")]
        public System.DateTimeOffset? CancelDateTime { get; private set; }

        /// <summary>
        /// Gets collection of gains or losses
        /// </summary>
        [JsonProperty(PropertyName = "realisedGainLoss")]
        public IList<RealisedGainLossDto> RealisedGainLoss { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Properties != null)
            {
                foreach (var element in Properties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
