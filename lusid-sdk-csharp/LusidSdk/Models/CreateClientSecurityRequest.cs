// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CreateClientSecurityRequest
    {
        /// <summary>
        /// Initializes a new instance of the CreateClientSecurityRequest
        /// class.
        /// </summary>
        public CreateClientSecurityRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateClientSecurityRequest
        /// class.
        /// </summary>
        /// <param name="instrument">There could be multiple underlying
        /// instrument definitions (same
        /// instrument but different format), but for now store one.</param>
        public CreateClientSecurityRequest(string clientSecurityId, string name, IList<PropertyDto> properties, IList<KeyValuePairCodeTypeString> aliases = default(IList<KeyValuePairCodeTypeString>), ResourceId lookThroughPortfolioId = default(ResourceId), InstrumentDefinitionDto instrument = default(InstrumentDefinitionDto))
        {
            ClientSecurityId = clientSecurityId;
            Name = name;
            Properties = properties;
            Aliases = aliases;
            LookThroughPortfolioId = lookThroughPortfolioId;
            Instrument = instrument;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "clientSecurityId")]
        public string ClientSecurityId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IList<PropertyDto> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "aliases")]
        public IList<KeyValuePairCodeTypeString> Aliases { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lookThroughPortfolioId")]
        public ResourceId LookThroughPortfolioId { get; set; }

        /// <summary>
        /// Gets or sets there could be multiple underlying instrument
        /// definitions (same
        /// instrument but different format), but for now store one.
        /// </summary>
        [JsonProperty(PropertyName = "instrument")]
        public InstrumentDefinitionDto Instrument { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ClientSecurityId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientSecurityId");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Properties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Properties");
            }
            if (Properties != null)
            {
                foreach (var element in Properties)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
