// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CreateTransactionPortfolioRequest
    {
        /// <summary>
        /// Initializes a new instance of the CreateTransactionPortfolioRequest
        /// class.
        /// </summary>
        public CreateTransactionPortfolioRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateTransactionPortfolioRequest
        /// class.
        /// </summary>
        /// <param name="accountingMethod">Possible values include: 'Default',
        /// 'AverageCost', 'FirstInFirstOut', 'LastInFirstOut',
        /// 'HighestCostFirst', 'LowestCostFirst'</param>
        /// <param name="properties">Portfolio properties to add to the
        /// portfolio</param>
        public CreateTransactionPortfolioRequest(string displayName, string code, string baseCurrency, string description = default(string), System.DateTimeOffset? created = default(System.DateTimeOffset?), ResourceId corporateActionSourceId = default(ResourceId), string accountingMethod = default(string), IList<string> subHoldingKeys = default(IList<string>), IDictionary<string, CreatePropertyRequest> properties = default(IDictionary<string, CreatePropertyRequest>))
        {
            DisplayName = displayName;
            Description = description;
            Code = code;
            Created = created;
            BaseCurrency = baseCurrency;
            CorporateActionSourceId = corporateActionSourceId;
            AccountingMethod = accountingMethod;
            SubHoldingKeys = subHoldingKeys;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "created")]
        public System.DateTimeOffset? Created { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "baseCurrency")]
        public string BaseCurrency { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "corporateActionSourceId")]
        public ResourceId CorporateActionSourceId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Default', 'AverageCost',
        /// 'FirstInFirstOut', 'LastInFirstOut', 'HighestCostFirst',
        /// 'LowestCostFirst'
        /// </summary>
        [JsonProperty(PropertyName = "accountingMethod")]
        public string AccountingMethod { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "subHoldingKeys")]
        public IList<string> SubHoldingKeys { get; set; }

        /// <summary>
        /// Gets or sets portfolio properties to add to the portfolio
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, CreatePropertyRequest> Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DisplayName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayName");
            }
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (BaseCurrency == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BaseCurrency");
            }
            if (Properties != null)
            {
                foreach (var valueElement in Properties.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
        }
    }
}
