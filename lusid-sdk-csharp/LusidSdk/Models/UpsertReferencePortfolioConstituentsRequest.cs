// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class UpsertReferencePortfolioConstituentsRequest
    {
        /// <summary>
        /// Initializes a new instance of the
        /// UpsertReferencePortfolioConstituentsRequest class.
        /// </summary>
        public UpsertReferencePortfolioConstituentsRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// UpsertReferencePortfolioConstituentsRequest class.
        /// </summary>
        /// <param name="weightType">Possible values include: 'Static',
        /// 'Floating', 'Periodical'</param>
        /// <param name="constituents">Set of constituents (instrument/weight
        /// pairings)</param>
        /// <param name="periodType">Possible values include: 'Daily',
        /// 'Weekly', 'Monthly', 'Quarterly', 'Annually'</param>
        public UpsertReferencePortfolioConstituentsRequest(System.DateTimeOffset effectiveFrom, string weightType, IList<ReferencePortfolioConstituentRequest> constituents, string periodType = default(string), int? periodCount = default(int?))
        {
            EffectiveFrom = effectiveFrom;
            WeightType = weightType;
            PeriodType = periodType;
            PeriodCount = periodCount;
            Constituents = constituents;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "effectiveFrom")]
        public System.DateTimeOffset EffectiveFrom { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Static', 'Floating',
        /// 'Periodical'
        /// </summary>
        [JsonProperty(PropertyName = "weightType")]
        public string WeightType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Daily', 'Weekly', 'Monthly',
        /// 'Quarterly', 'Annually'
        /// </summary>
        [JsonProperty(PropertyName = "periodType")]
        public string PeriodType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "periodCount")]
        public int? PeriodCount { get; set; }

        /// <summary>
        /// Gets or sets set of constituents (instrument/weight pairings)
        /// </summary>
        [JsonProperty(PropertyName = "constituents")]
        public IList<ReferencePortfolioConstituentRequest> Constituents { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (WeightType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WeightType");
            }
            if (Constituents == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Constituents");
            }
        }
    }
}
