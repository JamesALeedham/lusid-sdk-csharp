// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LUSIDAPI.
    /// </summary>
    public static partial class LUSIDAPIExtensions
    {
            /// <summary>
            /// List all analytic stores in client
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListOfAnalyticStoreKey ListAnalyticStores(this ILUSIDAPI operations, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListAnalyticStoresAsync(asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all analytic stores in client
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfAnalyticStoreKey> ListAnalyticStoresAsync(this ILUSIDAPI operations, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAnalyticStoresWithHttpMessagesAsync(asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new analytic store for the given scope for the given date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A valid and fully populated analytic store creation request
            /// </param>
            public static AnalyticStore CreateAnalyticStore(this ILUSIDAPI operations, CreateAnalyticStoreRequest request = default(CreateAnalyticStoreRequest))
            {
                return operations.CreateAnalyticStoreAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new analytic store for the given scope for the given date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A valid and fully populated analytic store creation request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticStore> CreateAnalyticStoreAsync(this ILUSIDAPI operations, CreateAnalyticStoreRequest request = default(CreateAnalyticStoreRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAnalyticStoreWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an analytic store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='asAt'>
            /// AsAt date
            /// </param>
            public static AnalyticStore GetAnalyticStore(this ILUSIDAPI operations, string scope, int year, int month, int day, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetAnalyticStoreAsync(scope, year, month, day, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an analytic store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='asAt'>
            /// AsAt date
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticStore> GetAnalyticStoreAsync(this ILUSIDAPI operations, string scope, int year, int month, int day, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAnalyticStoreWithHttpMessagesAsync(scope, year, month, day, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new analytic store for the given scope for the given date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            public static DeletedEntityResponse DeleteAnalyticStore(this ILUSIDAPI operations, string scope, int year, int month, int day)
            {
                return operations.DeleteAnalyticStoreAsync(scope, year, month, day).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new analytic store for the given scope for the given date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeleteAnalyticStoreAsync(this ILUSIDAPI operations, string scope, int year, int month, int day, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAnalyticStoreWithHttpMessagesAsync(scope, year, month, day, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Insert analytics into an existing analytic store for the given scope and
            /// date.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='data'>
            /// </param>
            public static AnalyticStore InsertAnalytics(this ILUSIDAPI operations, string scope, int year, int month, int day, IList<InstrumentAnalytic> data = default(IList<InstrumentAnalytic>))
            {
                return operations.InsertAnalyticsAsync(scope, year, month, day, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Insert analytics into an existing analytic store for the given scope and
            /// date.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='data'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticStore> InsertAnalyticsAsync(this ILUSIDAPI operations, string scope, int year, int month, int day, IList<InstrumentAnalytic> data = default(IList<InstrumentAnalytic>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InsertAnalyticsWithHttpMessagesAsync(scope, year, month, day, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a corporate action based on dates
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope
            /// </param>
            /// <param name='code'>
            /// Corporate action source id
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective Date
            /// </param>
            /// <param name='asAt'>
            /// AsAt Date filter
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static IList<CorporateAction> GetCorporateActions(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetCorporateActionsAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a corporate action based on dates
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope
            /// </param>
            /// <param name='code'>
            /// Corporate action source id
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective Date
            /// </param>
            /// <param name='asAt'>
            /// AsAt Date filter
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CorporateAction>> GetCorporateActionsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCorporateActionsWithHttpMessagesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempt to create/update one or more corporate action. Failed actions will
            /// be identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the corporate action
            /// </param>
            /// <param name='code'>
            /// Source of the corporate action
            /// </param>
            /// <param name='actions'>
            /// The corporate actions to create
            /// </param>
            public static UpsertCorporateActionsResponse BatchUpsertCorporateActions(this ILUSIDAPI operations, string scope, string code, IList<CreateCorporateAction> actions = default(IList<CreateCorporateAction>))
            {
                return operations.BatchUpsertCorporateActionsAsync(scope, code, actions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempt to create/update one or more corporate action. Failed actions will
            /// be identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the corporate action
            /// </param>
            /// <param name='code'>
            /// Source of the corporate action
            /// </param>
            /// <param name='actions'>
            /// The corporate actions to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertCorporateActionsResponse> BatchUpsertCorporateActionsAsync(this ILUSIDAPI operations, string scope, string code, IList<CreateCorporateAction> actions = default(IList<CreateCorporateAction>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchUpsertCorporateActionsWithHttpMessagesAsync(scope, code, actions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new PropertyDataFormat. Note: Only non-default formats can be
            /// created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The definition of the new format
            /// </param>
            public static DataType CreateDataType(this ILUSIDAPI operations, CreateDataTypeRequest request = default(CreateDataTypeRequest))
            {
                return operations.CreateDataTypeAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new PropertyDataFormat. Note: Only non-default formats can be
            /// created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The definition of the new format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataType> CreateDataTypeAsync(this ILUSIDAPI operations, CreateDataTypeRequest request = default(CreateDataTypeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDataTypeWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all property data formats in the specified scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='includeDefault'>
            /// </param>
            /// <param name='includeSystem'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListOfDataType ListDataTypes(this ILUSIDAPI operations, string scope, bool? includeDefault = default(bool?), bool? includeSystem = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListDataTypesAsync(scope, includeDefault, includeSystem, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all property data formats in the specified scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='includeDefault'>
            /// </param>
            /// <param name='includeSystem'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfDataType> ListDataTypesAsync(this ILUSIDAPI operations, string scope, bool? includeDefault = default(bool?), bool? includeSystem = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDataTypesWithHttpMessagesAsync(scope, includeDefault, includeSystem, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a property data format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static DataType GetDataType(this ILUSIDAPI operations, string scope, string name)
            {
                return operations.GetDataTypeAsync(scope, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a property data format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataType> GetDataTypeAsync(this ILUSIDAPI operations, string scope, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataTypeWithHttpMessagesAsync(scope, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a PropertyDataFormat. Note: Only non-default formats can be updated.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the format being updated
            /// </param>
            /// <param name='name'>
            /// The name of the format to update
            /// </param>
            /// <param name='request'>
            /// The new definition of the format
            /// </param>
            public static DataType UpdateDataType(this ILUSIDAPI operations, string scope, string name, UpdateDataTypeRequest request = default(UpdateDataTypeRequest))
            {
                return operations.UpdateDataTypeAsync(scope, name, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a PropertyDataFormat. Note: Only non-default formats can be updated.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the format being updated
            /// </param>
            /// <param name='name'>
            /// The name of the format to update
            /// </param>
            /// <param name='request'>
            /// The new definition of the format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataType> UpdateDataTypeAsync(this ILUSIDAPI operations, string scope, string name, UpdateDataTypeRequest request = default(UpdateDataTypeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDataTypeWithHttpMessagesAsync(scope, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return the definitions for the specified list of units
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='units'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static IUnitDefinition GetUnitsFromDataType(this ILUSIDAPI operations, string scope, string name, IList<string> units = default(IList<string>), string filter = default(string))
            {
                return operations.GetUnitsFromDataTypeAsync(scope, name, units, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the definitions for the specified list of units
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='units'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IUnitDefinition> GetUnitsFromDataTypeAsync(this ILUSIDAPI operations, string scope, string name, IList<string> units = default(IList<string>), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUnitsFromDataTypeWithHttpMessagesAsync(scope, name, units, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create derived portfolio
            /// </summary>
            /// <remarks>
            /// Creates a portfolio that derives from an existing portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope into which to create the new derived portfolio
            /// </param>
            /// <param name='portfolio'>
            /// The root object of the new derived portfolio, containing a populated
            /// reference portfolio id and reference scope
            /// </param>
            public static Portfolio CreateDerivedPortfolio(this ILUSIDAPI operations, string scope, CreateDerivedTransactionPortfolioRequest portfolio = default(CreateDerivedTransactionPortfolioRequest))
            {
                return operations.CreateDerivedPortfolioAsync(scope, portfolio).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create derived portfolio
            /// </summary>
            /// <remarks>
            /// Creates a portfolio that derives from an existing portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope into which to create the new derived portfolio
            /// </param>
            /// <param name='portfolio'>
            /// The root object of the new derived portfolio, containing a populated
            /// reference portfolio id and reference scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Portfolio> CreateDerivedPortfolioAsync(this ILUSIDAPI operations, string scope, CreateDerivedTransactionPortfolioRequest portfolio = default(CreateDerivedTransactionPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDerivedPortfolioWithHttpMessagesAsync(scope, portfolio, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete portfolio details
            /// </summary>
            /// <remarks>
            /// Deletes the portfolio details for the given code
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            public static DeletedEntityResponse DeleteDerivedPortfolioDetails(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.DeleteDerivedPortfolioDetailsAsync(scope, code, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete portfolio details
            /// </summary>
            /// <remarks>
            /// Deletes the portfolio details for the given code
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeleteDerivedPortfolioDetailsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDerivedPortfolioDetailsWithHttpMessagesAsync(scope, code, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempt to create one or more client instruments. Failed instruments will
            /// be identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definitions'>
            /// </param>
            public static TryAddClientInstruments BatchAddClientInstruments(this ILUSIDAPI operations, IList<CreateClientInstrumentRequest> definitions = default(IList<CreateClientInstrumentRequest>))
            {
                return operations.BatchAddClientInstrumentsAsync(definitions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempt to create one or more client instruments. Failed instruments will
            /// be identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definitions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TryAddClientInstruments> BatchAddClientInstrumentsAsync(this ILUSIDAPI operations, IList<CreateClientInstrumentRequest> definitions = default(IList<CreateClientInstrumentRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchAddClientInstrumentsWithHttpMessagesAsync(definitions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempt to delete one or more client instruments. Failed instruments will
            /// be identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uids'>
            /// </param>
            public static DeleteClientInstrumentsResponse BatchDeleteClientInstruments(this ILUSIDAPI operations, IList<string> uids = default(IList<string>))
            {
                return operations.BatchDeleteClientInstrumentsAsync(uids).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempt to delete one or more client instruments. Failed instruments will
            /// be identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uids'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteClientInstrumentsResponse> BatchDeleteClientInstrumentsAsync(this ILUSIDAPI operations, IList<string> uids = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchDeleteClientInstrumentsWithHttpMessagesAsync(uids, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an individual instrument by the unique instrument uid.  Optionally,
            /// decorate each instrument with specific properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uid'>
            /// The uid of the requested instrument
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Keys of the properties to be retrieved
            /// </param>
            public static Instrument GetInstrument(this ILUSIDAPI operations, string uid, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>))
            {
                return operations.GetInstrumentAsync(uid, asAt, instrumentPropertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an individual instrument by the unique instrument uid.  Optionally,
            /// decorate each instrument with specific properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uid'>
            /// The uid of the requested instrument
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Keys of the properties to be retrieved
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Instrument> GetInstrumentAsync(this ILUSIDAPI operations, string uid, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstrumentWithHttpMessagesAsync(uid, asAt, instrumentPropertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lookup a large number of instruments by supplying a collection of
            /// non-Finbourne codes.  Optionally, decorate each instrument with specific
            /// properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeType'>
            /// The type of identifier. Possible values include: 'Undefined',
            /// 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip', 'Ticker',
            /// 'ClientInternal', 'Figi', 'CompositeFigi', 'ShareClassFigi', 'Wertpapier'
            /// </param>
            /// <param name='codes'>
            /// An array of codes
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Keys of the properties to be retrieved
            /// </param>
            public static LookupInstrumentsFromCodesResponse LookupInstrumentsFromCodes(this ILUSIDAPI operations, string codeType = default(string), IList<string> codes = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>))
            {
                return operations.LookupInstrumentsFromCodesAsync(codeType, codes, asAt, instrumentPropertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lookup a large number of instruments by supplying a collection of
            /// non-Finbourne codes.  Optionally, decorate each instrument with specific
            /// properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeType'>
            /// The type of identifier. Possible values include: 'Undefined',
            /// 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip', 'Ticker',
            /// 'ClientInternal', 'Figi', 'CompositeFigi', 'ShareClassFigi', 'Wertpapier'
            /// </param>
            /// <param name='codes'>
            /// An array of codes
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Keys of the properties to be retrieved
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LookupInstrumentsFromCodesResponse> LookupInstrumentsFromCodesAsync(this ILUSIDAPI operations, string codeType = default(string), IList<string> codes = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> instrumentPropertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LookupInstrumentsFromCodesWithHttpMessagesAsync(codeType, codes, asAt, instrumentPropertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert instrument properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classifications'>
            /// </param>
            public static UpsertInstrumentPropertiesResponse BatchUpsertInstrumentProperties(this ILUSIDAPI operations, IList<InstrumentProperty> classifications = default(IList<InstrumentProperty>))
            {
                return operations.BatchUpsertInstrumentPropertiesAsync(classifications).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert instrument properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classifications'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertInstrumentPropertiesResponse> BatchUpsertInstrumentPropertiesAsync(this ILUSIDAPI operations, IList<InstrumentProperty> classifications = default(IList<InstrumentProperty>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchUpsertInstrumentPropertiesWithHttpMessagesAsync(classifications, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the unique identifier for the SAML Identity Provider to be used by
            /// domain.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The domain that the user will be logging in to.
            /// </param>
            public static string GetSamlIdentityProviderId(this ILUSIDAPI operations, string domain)
            {
                return operations.GetSamlIdentityProviderIdAsync(domain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the unique identifier for the SAML Identity Provider to be used by
            /// domain.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The domain that the user will be logging in to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSamlIdentityProviderIdAsync(this ILUSIDAPI operations, string domain, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSamlIdentityProviderIdWithHttpMessagesAsync(domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Request an authorised url for an Excel client version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            public static string GetExcelDownloadUrl(this ILUSIDAPI operations, string version = default(string))
            {
                return operations.GetExcelDownloadUrlAsync(version).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Request an authorised url for an Excel client version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetExcelDownloadUrlAsync(this ILUSIDAPI operations, string version = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExcelDownloadUrlWithHttpMessagesAsync(version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the current major application version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static VersionSummary GetLusidVersions(this ILUSIDAPI operations)
            {
                return operations.GetLusidVersionsAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the current major application version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionSummary> GetLusidVersionsAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLusidVersionsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a personalisation, recursing to get any referenced if required.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pattern'>
            /// The search pattern or specific key
            /// </param>
            /// <param name='scope'>
            /// The scope level to request for. Possible values include: 'User', 'Group',
            /// 'Default', 'All'
            /// </param>
            /// <param name='recursive'>
            /// Whether to recurse into dereference recursive settings
            /// </param>
            /// <param name='wildcards'>
            /// Whether to apply wildcards to the provided pattern and pull back any
            /// matching
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ResourceListOfPersonalisation GetPersonalisations(this ILUSIDAPI operations, string pattern = default(string), string scope = default(string), bool? recursive = default(bool?), bool? wildcards = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetPersonalisationsAsync(pattern, scope, recursive, wildcards, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a personalisation, recursing to get any referenced if required.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pattern'>
            /// The search pattern or specific key
            /// </param>
            /// <param name='scope'>
            /// The scope level to request for. Possible values include: 'User', 'Group',
            /// 'Default', 'All'
            /// </param>
            /// <param name='recursive'>
            /// Whether to recurse into dereference recursive settings
            /// </param>
            /// <param name='wildcards'>
            /// Whether to apply wildcards to the provided pattern and pull back any
            /// matching
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPersonalisation> GetPersonalisationsAsync(this ILUSIDAPI operations, string pattern = default(string), string scope = default(string), bool? recursive = default(bool?), bool? wildcards = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonalisationsWithHttpMessagesAsync(pattern, scope, recursive, wildcards, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert one or more personalisations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personalisations'>
            /// </param>
            public static UpsertPersonalisationResponse UpsertPersonalisations(this ILUSIDAPI operations, IList<Personalisation> personalisations = default(IList<Personalisation>))
            {
                return operations.UpsertPersonalisationsAsync(personalisations).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert one or more personalisations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personalisations'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertPersonalisationResponse> UpsertPersonalisationsAsync(this ILUSIDAPI operations, IList<Personalisation> personalisations = default(IList<Personalisation>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertPersonalisationsWithHttpMessagesAsync(personalisations, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a personalisation at a specific scope (or use scope ALL to purge the
            /// setting entirely)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The key of the setting to be deleted
            /// </param>
            /// <param name='scope'>
            /// The scope to delete at (use ALL to purge the setting entirely). Possible
            /// values include: 'User', 'Group', 'Default', 'All'
            /// </param>
            /// <param name='group'>
            /// If deleting a setting at group level, specify the group here
            /// </param>
            public static DeletedEntityResponse DeletePersonalisation(this ILUSIDAPI operations, string key = default(string), string scope = default(string), string group = default(string))
            {
                return operations.DeletePersonalisationAsync(key, scope, group).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a personalisation at a specific scope (or use scope ALL to purge the
            /// setting entirely)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='key'>
            /// The key of the setting to be deleted
            /// </param>
            /// <param name='scope'>
            /// The scope to delete at (use ALL to purge the setting entirely). Possible
            /// values include: 'User', 'Group', 'Default', 'All'
            /// </param>
            /// <param name='group'>
            /// If deleting a setting at group level, specify the group here
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePersonalisationAsync(this ILUSIDAPI operations, string key = default(string), string scope = default(string), string group = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePersonalisationWithHttpMessagesAsync(key, scope, group, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all groups in a specified scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// A filter expression to apply to the result set
            /// </param>
            public static ResourceListOfPortfolioGroup ListPortfolioGroups(this ILUSIDAPI operations, string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListPortfolioGroupsAsync(scope, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all groups in a specified scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// A filter expression to apply to the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPortfolioGroup> ListPortfolioGroupsAsync(this ILUSIDAPI operations, string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortfolioGroupsWithHttpMessagesAsync(scope, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static PortfolioGroup CreatePortfolioGroup(this ILUSIDAPI operations, string scope, CreatePortfolioGroupRequest request = default(CreatePortfolioGroupRequest))
            {
                return operations.CreatePortfolioGroupAsync(scope, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> CreatePortfolioGroupAsync(this ILUSIDAPI operations, string scope, CreatePortfolioGroupRequest request = default(CreatePortfolioGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePortfolioGroupWithHttpMessagesAsync(scope, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            public static PortfolioGroup GetPortfolioGroup(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPortfolioGroupAsync(scope, code, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> GetPortfolioGroupAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioGroupWithHttpMessagesAsync(scope, code, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static PortfolioGroup UpdatePortfolioGroup(this ILUSIDAPI operations, string scope, string code, UpdatePortfolioGroupRequest request = default(UpdatePortfolioGroupRequest))
            {
                return operations.UpdatePortfolioGroupAsync(scope, code, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> UpdatePortfolioGroupAsync(this ILUSIDAPI operations, string scope, string code, UpdatePortfolioGroupRequest request = default(UpdatePortfolioGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePortfolioGroupWithHttpMessagesAsync(scope, code, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            public static DeletedEntityResponse DeletePortfolioGroup(this ILUSIDAPI operations, string scope, string code)
            {
                return operations.DeletePortfolioGroupAsync(scope, code).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioGroupAsync(this ILUSIDAPI operations, string scope, string code, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioGroupWithHttpMessagesAsync(scope, code, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate data in a group hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ListAggregationResponse GetAggregationByGroup(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetAggregationByGroupAsync(scope, code, request, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate data in a group hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListAggregationResponse> GetAggregationByGroupAsync(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregationByGroupWithHttpMessagesAsync(scope, code, request, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Obsolete - Aggregation request data in a group hierarchy into a data tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static NestedAggregationResponse GetNestedAggregationByGroup(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest))
            {
                return operations.GetNestedAggregationByGroupAsync(scope, code, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obsolete - Aggregation request data in a group hierarchy into a data tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NestedAggregationResponse> GetNestedAggregationByGroupAsync(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNestedAggregationByGroupWithHttpMessagesAsync(scope, code, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all commands that modified the portfolio groups(s) with the specified
            /// id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The portfolio group id
            /// </param>
            /// <param name='fromAsAt'>
            /// Filters commands by those that were processed at or after this time. Null
            /// means there is no lower limit.
            /// </param>
            /// <param name='toAsAt'>
            /// Filters commands by those that were processed at or before this time. Null
            /// means there is no upper limit (latest).
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// A filter expression to apply to the result set
            /// </param>
            public static ResourceListOfProcessedCommand GetPortfolioGroupCommands(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetPortfolioGroupCommandsAsync(scope, code, fromAsAt, toAsAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all commands that modified the portfolio groups(s) with the specified
            /// id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The portfolio group id
            /// </param>
            /// <param name='fromAsAt'>
            /// Filters commands by those that were processed at or after this time. Null
            /// means there is no lower limit.
            /// </param>
            /// <param name='toAsAt'>
            /// Filters commands by those that were processed at or before this time. Null
            /// means there is no upper limit (latest).
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// A filter expression to apply to the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfProcessedCommand> GetPortfolioGroupCommandsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioGroupCommandsWithHttpMessagesAsync(scope, code, fromAsAt, toAsAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a full expansion of an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='propertyFilter'>
            /// </param>
            public static ExpandedGroup GetPortfolioGroupExpansion(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>))
            {
                return operations.GetPortfolioGroupExpansionAsync(scope, code, effectiveAt, asAt, propertyFilter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a full expansion of an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='propertyFilter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpandedGroup> GetPortfolioGroupExpansionAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioGroupExpansionWithHttpMessagesAsync(scope, code, effectiveAt, asAt, propertyFilter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a portfolio to an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='identifier'>
            /// </param>
            public static PortfolioGroup AddPortfolioToGroup(this ILUSIDAPI operations, string scope, string code, ResourceId identifier = default(ResourceId))
            {
                return operations.AddPortfolioToGroupAsync(scope, code, identifier).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a portfolio to an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='identifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> AddPortfolioToGroupAsync(this ILUSIDAPI operations, string scope, string code, ResourceId identifier = default(ResourceId), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPortfolioToGroupWithHttpMessagesAsync(scope, code, identifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a portfolio that is currently present within an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='portfolioScope'>
            /// </param>
            /// <param name='portfolioCode'>
            /// </param>
            public static PortfolioGroup DeletePortfolioFromGroup(this ILUSIDAPI operations, string scope, string code, string portfolioScope, string portfolioCode)
            {
                return operations.DeletePortfolioFromGroupAsync(scope, code, portfolioScope, portfolioCode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a portfolio that is currently present within an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='portfolioScope'>
            /// </param>
            /// <param name='portfolioCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> DeletePortfolioFromGroupAsync(this ILUSIDAPI operations, string scope, string code, string portfolioScope, string portfolioCode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioFromGroupWithHttpMessagesAsync(scope, code, portfolioScope, portfolioCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a sub group to an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='identifier'>
            /// </param>
            public static PortfolioGroup AddSubGroupToGroup(this ILUSIDAPI operations, string scope, string code, ResourceId identifier = default(ResourceId))
            {
                return operations.AddSubGroupToGroupAsync(scope, code, identifier).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a sub group to an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='identifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> AddSubGroupToGroupAsync(this ILUSIDAPI operations, string scope, string code, ResourceId identifier = default(ResourceId), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddSubGroupToGroupWithHttpMessagesAsync(scope, code, identifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a subgroup that is currently present within an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='subgroupScope'>
            /// </param>
            /// <param name='subgroupCode'>
            /// </param>
            public static PortfolioGroup DeleteSubGroupFromGroup(this ILUSIDAPI operations, string scope, string code, string subgroupScope, string subgroupCode)
            {
                return operations.DeleteSubGroupFromGroupAsync(scope, code, subgroupScope, subgroupCode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a subgroup that is currently present within an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='subgroupScope'>
            /// </param>
            /// <param name='subgroupCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioGroup> DeleteSubGroupFromGroupAsync(this ILUSIDAPI operations, string scope, string code, string subgroupScope, string subgroupCode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSubGroupFromGroupWithHttpMessagesAsync(scope, code, subgroupScope, subgroupCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List scopes that contain portfolios
            /// </summary>
            /// <remarks>
            /// Lists all scopes that have previously been used
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// How to order the returned scopes
            /// </param>
            /// <param name='start'>
            /// The starting index for the returned scopes
            /// </param>
            /// <param name='limit'>
            /// The final index for the returned scopes
            /// </param>
            /// <param name='filter'>
            /// Filter to be applied to the list of scopes
            /// </param>
            public static ResourceListOfScope ListPortfolioScopes(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListPortfolioScopesAsync(sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List scopes that contain portfolios
            /// </summary>
            /// <remarks>
            /// Lists all scopes that have previously been used
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// How to order the returned scopes
            /// </param>
            /// <param name='start'>
            /// The starting index for the returned scopes
            /// </param>
            /// <param name='limit'>
            /// The final index for the returned scopes
            /// </param>
            /// <param name='filter'>
            /// Filter to be applied to the list of scopes
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfScope> ListPortfolioScopesAsync(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortfolioScopesWithHttpMessagesAsync(sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all portfolios
            /// </summary>
            /// <remarks>
            /// Get all portfolios in a scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope to get portfolios from
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListOfPortfolio ListPortfolios(this ILUSIDAPI operations, string scope, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListPortfoliosAsync(scope, effectiveAt, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all portfolios
            /// </summary>
            /// <remarks>
            /// Get all portfolios in a scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope to get portfolios from
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPortfolio> ListPortfoliosAsync(this ILUSIDAPI operations, string scope, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortfoliosWithHttpMessagesAsync(scope, effectiveAt, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get portfolio
            /// </summary>
            /// <remarks>
            /// Gets a single portfolio by code
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            public static Portfolio GetPortfolio(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPortfolioAsync(scope, code, effectiveAt, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get portfolio
            /// </summary>
            /// <remarks>
            /// Gets a single portfolio by code
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Portfolio> GetPortfolioAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioWithHttpMessagesAsync(scope, code, effectiveAt, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio to be updated
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='request'>
            /// The update request
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date for the change
            /// </param>
            public static Portfolio UpdatePortfolio(this ILUSIDAPI operations, string scope, string code, UpdatePortfolioRequest request = default(UpdatePortfolioRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.UpdatePortfolioAsync(scope, code, request, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio to be updated
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='request'>
            /// The update request
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date for the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Portfolio> UpdatePortfolioAsync(this ILUSIDAPI operations, string scope, string code, UpdatePortfolioRequest request = default(UpdatePortfolioRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePortfolioWithHttpMessagesAsync(scope, code, request, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete portfolio
            /// </summary>
            /// <remarks>
            /// Deletes a portfolio from the given effectiveAt
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            public static DeletedEntityResponse DeletePortfolio(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.DeletePortfolioAsync(scope, code, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete portfolio
            /// </summary>
            /// <remarks>
            /// Deletes a portfolio from the given effectiveAt
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioWithHttpMessagesAsync(scope, code, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate data in a portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ListAggregationResponse GetAggregationByPortfolio(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetAggregationByPortfolioAsync(scope, code, request, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate data in a portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListAggregationResponse> GetAggregationByPortfolioAsync(this ILUSIDAPI operations, string scope, string code, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregationByPortfolioWithHttpMessagesAsync(scope, code, request, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get modifications
            /// </summary>
            /// <remarks>
            /// Gets all commands that modified the portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The portfolio id
            /// </param>
            /// <param name='fromAsAt'>
            /// Filters commands by those that were processed at or after this time. Null
            /// means there is no lower limit.
            /// </param>
            /// <param name='toAsAt'>
            /// Filters commands by those that were processed at or before this time. Null
            /// means there is no upper limit (latest).
            /// </param>
            /// <param name='filter'>
            /// Command filter
            /// </param>
            public static ResourceListOfProcessedCommand GetPortfolioCommands(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), string filter = default(string))
            {
                return operations.GetPortfolioCommandsAsync(scope, code, fromAsAt, toAsAt, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get modifications
            /// </summary>
            /// <remarks>
            /// Gets all commands that modified the portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The portfolio id
            /// </param>
            /// <param name='fromAsAt'>
            /// Filters commands by those that were processed at or after this time. Null
            /// means there is no lower limit.
            /// </param>
            /// <param name='toAsAt'>
            /// Filters commands by those that were processed at or before this time. Null
            /// means there is no upper limit (latest).
            /// </param>
            /// <param name='filter'>
            /// Command filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfProcessedCommand> GetPortfolioCommandsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioCommandsWithHttpMessagesAsync(scope, code, fromAsAt, toAsAt, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get properties
            /// </summary>
            /// <remarks>
            /// Get properties attached to the portfolio.  If the asAt is not specified
            /// then
            /// the latest system time is used
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='sortBy'>
            /// Property to sort the results by
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static PortfolioProperties GetPortfolioProperties(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetPortfolioPropertiesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties
            /// </summary>
            /// <remarks>
            /// Get properties attached to the portfolio.  If the asAt is not specified
            /// then
            /// the latest system time is used
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='sortBy'>
            /// Property to sort the results by
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioProperties> GetPortfolioPropertiesAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioPropertiesWithHttpMessagesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update properties
            /// </summary>
            /// <remarks>
            /// Create one or more properties on a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='portfolioProperties'>
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date for the change
            /// </param>
            public static PortfolioProperties UpsertPortfolioProperties(this ILUSIDAPI operations, string scope, string code, IDictionary<string, CreatePropertyRequest> portfolioProperties = default(IDictionary<string, CreatePropertyRequest>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.UpsertPortfolioPropertiesAsync(scope, code, portfolioProperties, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties
            /// </summary>
            /// <remarks>
            /// Create one or more properties on a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='portfolioProperties'>
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date for the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioProperties> UpsertPortfolioPropertiesAsync(this ILUSIDAPI operations, string scope, string code, IDictionary<string, CreatePropertyRequest> portfolioProperties = default(IDictionary<string, CreatePropertyRequest>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertPortfolioPropertiesWithHttpMessagesAsync(scope, code, portfolioProperties, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete one, many or all properties from a portfolio for a specified
            /// effective date
            /// </summary>
            /// <remarks>
            /// Specifying no properties will delete all properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='portfolioPropertyKeys'>
            /// The keys of the property to be deleted. None specified indicates the intent
            /// to delete all properties
            /// </param>
            public static DeletedEntityResponse DeletePortfolioProperties(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), IList<string> portfolioPropertyKeys = default(IList<string>))
            {
                return operations.DeletePortfolioPropertiesAsync(scope, code, effectiveAt, portfolioPropertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete one, many or all properties from a portfolio for a specified
            /// effective date
            /// </summary>
            /// <remarks>
            /// Specifying no properties will delete all properties
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='portfolioPropertyKeys'>
            /// The keys of the property to be deleted. None specified indicates the intent
            /// to delete all properties
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioPropertiesAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), IList<string> portfolioPropertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioPropertiesWithHttpMessagesAsync(scope, code, effectiveAt, portfolioPropertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets multiple property definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keys'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListOfPropertyDefinition GetMultiplePropertyDefinitions(this ILUSIDAPI operations, IList<string> keys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetMultiplePropertyDefinitionsAsync(keys, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets multiple property definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keys'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPropertyDefinition> GetMultiplePropertyDefinitionsAsync(this ILUSIDAPI operations, IList<string> keys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiplePropertyDefinitionsWithHttpMessagesAsync(keys, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// </param>
            public static PropertyDefinition CreatePropertyDefinition(this ILUSIDAPI operations, CreatePropertyDefinitionRequest definition = default(CreatePropertyDefinitionRequest))
            {
                return operations.CreatePropertyDefinitionAsync(definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDefinition> CreatePropertyDefinitionAsync(this ILUSIDAPI operations, CreatePropertyDefinitionRequest definition = default(CreatePropertyDefinitionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePropertyDefinitionWithHttpMessagesAsync(definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            public static PropertyDefinition GetPropertyDefinition(this ILUSIDAPI operations, string domain, string scope, string name, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPropertyDefinitionAsync(domain, scope, name, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDefinition> GetPropertyDefinitionAsync(this ILUSIDAPI operations, string domain, string scope, string name, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertyDefinitionWithHttpMessagesAsync(domain, scope, name, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='definition'>
            /// </param>
            public static PropertyDefinition UpdatePropertyDefinition(this ILUSIDAPI operations, string domain, string scope, string name, UpdatePropertyDefinitionRequest definition = default(UpdatePropertyDefinitionRequest))
            {
                return operations.UpdatePropertyDefinitionAsync(domain, scope, name, definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='definition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDefinition> UpdatePropertyDefinitionAsync(this ILUSIDAPI operations, string domain, string scope, string name, UpdatePropertyDefinitionRequest definition = default(UpdatePropertyDefinitionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePropertyDefinitionWithHttpMessagesAsync(domain, scope, name, definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static DeletedEntityResponse DeletePropertyDefinition(this ILUSIDAPI operations, string domain, string scope, string name)
            {
                return operations.DeletePropertyDefinitionAsync(domain, scope, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePropertyDefinitionAsync(this ILUSIDAPI operations, string domain, string scope, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePropertyDefinitionWithHttpMessagesAsync(domain, scope, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Perform a reconciliation between two portfolios
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ResourceListOfReconciliationBreak PerformReconciliation(this ILUSIDAPI operations, ReconciliationRequest request = default(ReconciliationRequest))
            {
                return operations.PerformReconciliationAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Perform a reconciliation between two portfolios
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfReconciliationBreak> PerformReconciliationAsync(this ILUSIDAPI operations, ReconciliationRequest request = default(ReconciliationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PerformReconciliationWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the portfolio
            /// </param>
            /// <param name='referencePortfolio'>
            /// The portfolio creation request object
            /// </param>
            public static Portfolio CreateReferencePortfolio(this ILUSIDAPI operations, string scope, CreateReferencePortfolioRequest referencePortfolio = default(CreateReferencePortfolioRequest))
            {
                return operations.CreateReferencePortfolioAsync(scope, referencePortfolio).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the portfolio
            /// </param>
            /// <param name='referencePortfolio'>
            /// The portfolio creation request object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Portfolio> CreateReferencePortfolioAsync(this ILUSIDAPI operations, string scope, CreateReferencePortfolioRequest referencePortfolio = default(CreateReferencePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateReferencePortfolioWithHttpMessagesAsync(scope, referencePortfolio, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the constituents in a reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ResourceListOfReferencePortfolioConstituent GetReferencePortfolioConstituents(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetReferencePortfolioConstituentsAsync(scope, code, effectiveAt, asAt, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the constituents in a reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfReferencePortfolioConstituent> GetReferencePortfolioConstituentsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferencePortfolioConstituentsWithHttpMessagesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add constituents to a specific reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='constituents'>
            /// </param>
            public static UpsertReferencePortfolioConstituentsResponse UpsertReferencePortfolioConstituents(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<ReferencePortfolioConstituentRequest> constituents = default(IList<ReferencePortfolioConstituentRequest>))
            {
                return operations.UpsertReferencePortfolioConstituentsAsync(scope, code, effectiveAt, constituents).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add constituents to a specific reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='constituents'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertReferencePortfolioConstituentsResponse> UpsertReferencePortfolioConstituentsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<ReferencePortfolioConstituentRequest> constituents = default(IList<ReferencePortfolioConstituentRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertReferencePortfolioConstituentsWithHttpMessagesAsync(scope, code, effectiveAt, constituents, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve some previously stored results
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data was loaded
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static Results GetResults(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetResultsAsync(scope, key, date, asAt, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve some previously stored results
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data was loaded
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Results> GetResultsAsync(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResultsWithHttpMessagesAsync(scope, key, date, asAt, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert precalculated results against a specified scope/key/date combination
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data is relevant
            /// </param>
            /// <param name='request'>
            /// The results to upload
            /// </param>
            public static Results UpsertResults(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, CreateResults request = default(CreateResults))
            {
                return operations.UpsertResultsAsync(scope, key, date, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert precalculated results against a specified scope/key/date combination
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data is relevant
            /// </param>
            /// <param name='request'>
            /// The results to upload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Results> UpsertResultsAsync(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, CreateResults request = default(CreateResults), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertResultsWithHttpMessagesAsync(scope, key, date, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate data from a result set
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='resultsKey'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ListAggregationResponse GetAggregationByResultSet(this ILUSIDAPI operations, string scope, string resultsKey, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetAggregationByResultSetAsync(scope, resultsKey, request, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate data from a result set
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='resultsKey'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListAggregationResponse> GetAggregationByResultSetAsync(this ILUSIDAPI operations, string scope, string resultsKey, AggregationRequest request = default(AggregationRequest), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregationByResultSetWithHttpMessagesAsync(scope, resultsKey, request, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all available entities
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResourceListOfString ListEntities(this ILUSIDAPI operations)
            {
                return operations.ListEntitiesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all available entities
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfString> ListEntitiesAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListEntitiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the schema for a given entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            public static Schema GetEntitySchema(this ILUSIDAPI operations, string entity)
            {
                return operations.GetEntitySchemaAsync(entity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the schema for a given entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Schema> GetEntitySchemaAsync(this ILUSIDAPI operations, string entity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntitySchemaWithHttpMessagesAsync(entity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the schemas for the provided list of property keys
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyKeys'>
            /// A comma delimited list of property keys in string format. e.g.
            /// "Portfolio/default/PropertyName,Portfolio/differentScope/MyProperty"
            /// </param>
            /// <param name='asAt'>
            /// </param>
            public static PropertySchema GetPropertySchema(this ILUSIDAPI operations, IList<string> propertyKeys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPropertySchemaAsync(propertyKeys, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the schemas for the provided list of property keys
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyKeys'>
            /// A comma delimited list of property keys in string format. e.g.
            /// "Portfolio/default/PropertyName,Portfolio/differentScope/MyProperty"
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertySchema> GetPropertySchemaAsync(this ILUSIDAPI operations, IList<string> propertyKeys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertySchemaWithHttpMessagesAsync(propertyKeys, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the available value types that could be returned in a schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ResourceListOfValueType GetValueTypes(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetValueTypesAsync(sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the available value types that could be returned in a schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfValueType> GetValueTypesAsync(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetValueTypesWithHttpMessagesAsync(sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search portfolio groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListOfPortfolioGroup PortfolioGroupsSearch(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.PortfolioGroupsSearchAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search portfolio groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPortfolioGroup> PortfolioGroupsSearchAsync(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PortfolioGroupsSearchWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search portfolios
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListOfPortfolioSearchResult PortfoliosSearch(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.PortfoliosSearchAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search portfolios
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPortfolioSearchResult> PortfoliosSearchAsync(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PortfoliosSearchWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListOfPropertyDefinition PropertiesSearch(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.PropertiesSearchAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfPropertyDefinition> PropertiesSearchAsync(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PropertiesSearchWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of persisted transaction types
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResourceListOfTransactionMetaData ListConfigurationTransactionTypes(this ILUSIDAPI operations)
            {
                return operations.ListConfigurationTransactionTypesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of persisted transaction types
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfTransactionMetaData> ListConfigurationTransactionTypesAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConfigurationTransactionTypesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads a list of transaction types to be used by the movements engine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// </param>
            public static ResourceListOfTransactionMetaData SetConfigurationTransactionTypes(this ILUSIDAPI operations, IList<TransactionConfigurationDataRequest> types = default(IList<TransactionConfigurationDataRequest>))
            {
                return operations.SetConfigurationTransactionTypesAsync(types).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads a list of transaction types to be used by the movements engine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfTransactionMetaData> SetConfigurationTransactionTypesAsync(this ILUSIDAPI operations, IList<TransactionConfigurationDataRequest> types = default(IList<TransactionConfigurationDataRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetConfigurationTransactionTypesWithHttpMessagesAsync(types, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new transaction type movement to the list of existing types
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// </param>
            public static TransactionConfigurationData CreateConfigurationTransactionType(this ILUSIDAPI operations, TransactionConfigurationDataRequest type = default(TransactionConfigurationDataRequest))
            {
                return operations.CreateConfigurationTransactionTypeAsync(type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new transaction type movement to the list of existing types
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TransactionConfigurationData> CreateConfigurationTransactionTypeAsync(this ILUSIDAPI operations, TransactionConfigurationDataRequest type = default(TransactionConfigurationDataRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateConfigurationTransactionTypeWithHttpMessagesAsync(type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create portfolio
            /// </summary>
            /// <remarks>
            /// Creates a new portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the portfolio
            /// </param>
            /// <param name='createRequest'>
            /// The portfolio creation request object
            /// </param>
            public static Portfolio CreatePortfolio(this ILUSIDAPI operations, string scope, CreateTransactionPortfolioRequest createRequest = default(CreateTransactionPortfolioRequest))
            {
                return operations.CreatePortfolioAsync(scope, createRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create portfolio
            /// </summary>
            /// <remarks>
            /// Creates a new portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the portfolio
            /// </param>
            /// <param name='createRequest'>
            /// The portfolio creation request object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Portfolio> CreatePortfolioAsync(this ILUSIDAPI operations, string scope, CreateTransactionPortfolioRequest createRequest = default(CreateTransactionPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePortfolioWithHttpMessagesAsync(scope, createRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get portfolio details
            /// </summary>
            /// <remarks>
            /// Gets the details for a portfolio.  For a derived portfolio this can be
            /// the details of another reference portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            public static PortfolioDetails GetDetails(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetDetailsAsync(scope, code, effectiveAt, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get portfolio details
            /// </summary>
            /// <remarks>
            /// Gets the details for a portfolio.  For a derived portfolio this can be
            /// the details of another reference portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDetails> GetDetailsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(scope, code, effectiveAt, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add/update portfolio details
            /// </summary>
            /// <remarks>
            /// Update the portfolio details for the given code or add if it doesn't
            /// already exist. Updates with
            /// null values will remove any existing values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='details'>
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            public static PortfolioDetails UpsertPortfolioDetails(this ILUSIDAPI operations, string scope, string code, CreatePortfolioDetails details = default(CreatePortfolioDetails), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.UpsertPortfolioDetailsAsync(scope, code, details, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add/update portfolio details
            /// </summary>
            /// <remarks>
            /// Update the portfolio details for the given code or add if it doesn't
            /// already exist. Updates with
            /// null values will remove any existing values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='details'>
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDetails> UpsertPortfolioDetailsAsync(this ILUSIDAPI operations, string scope, string code, CreatePortfolioDetails details = default(CreatePortfolioDetails), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertPortfolioDetailsWithHttpMessagesAsync(scope, code, details, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get holdings
            /// </summary>
            /// <remarks>
            /// Get the aggregate holdings of a portfolio.  If no effectiveAt or asAt
            /// are supplied then values will be defaulted to the latest system time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='filter'>
            /// A filter on the results
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Keys for the instrument properties to be decorated onto the holdings
            /// </param>
            public static VersionedResourceListOfHolding GetHoldings(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), IList<string> instrumentPropertyKeys = default(IList<string>))
            {
                return operations.GetHoldingsAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, filter, instrumentPropertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get holdings
            /// </summary>
            /// <remarks>
            /// Get the aggregate holdings of a portfolio.  If no effectiveAt or asAt
            /// are supplied then values will be defaulted to the latest system time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='filter'>
            /// A filter on the results
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Keys for the instrument properties to be decorated onto the holdings
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionedResourceListOfHolding> GetHoldingsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), IList<string> instrumentPropertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHoldingsWithHttpMessagesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, filter, instrumentPropertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adjust holdings
            /// </summary>
            /// <remarks>
            /// Create transactions in a specific portfolio to bring it to the specified
            /// holdings
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='holdingAdjustments'>
            /// </param>
            public static AdjustHolding SetHoldings(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>))
            {
                return operations.SetHoldingsAsync(scope, code, effectiveAt, holdingAdjustments).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adjust holdings
            /// </summary>
            /// <remarks>
            /// Create transactions in a specific portfolio to bring it to the specified
            /// holdings
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='holdingAdjustments'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdjustHolding> SetHoldingsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetHoldingsWithHttpMessagesAsync(scope, code, effectiveAt, holdingAdjustments, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adjust holdings
            /// </summary>
            /// <remarks>
            /// Create transactions in a specific portfolio to bring it to the specified
            /// holdings
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='holdingAdjustments'>
            /// </param>
            public static AdjustHolding AdjustHoldings(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>))
            {
                return operations.AdjustHoldingsAsync(scope, code, effectiveAt, holdingAdjustments).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adjust holdings
            /// </summary>
            /// <remarks>
            /// Create transactions in a specific portfolio to bring it to the specified
            /// holdings
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='holdingAdjustments'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdjustHolding> AdjustHoldingsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdjustHoldingsWithHttpMessagesAsync(scope, code, effectiveAt, holdingAdjustments, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancel adjust-holdings
            /// </summary>
            /// <remarks>
            /// Cancels a previous adjust holdings request
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            public static DeletedEntityResponse CancelAdjustHoldings(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt)
            {
                return operations.CancelAdjustHoldingsAsync(scope, code, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel adjust-holdings
            /// </summary>
            /// <remarks>
            /// Cancels a previous adjust holdings request
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> CancelAdjustHoldingsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelAdjustHoldingsWithHttpMessagesAsync(scope, code, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets holdings adjustments in an interval of effective time.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='fromEffectiveAt'>
            /// Events between this time (inclusive) and the toEffectiveAt are returned.
            /// </param>
            /// <param name='toEffectiveAt'>
            /// Events between this time (inclusive) and the fromEffectiveAt are returned.
            /// </param>
            /// <param name='asAtTime'>
            /// The as-at time for which the result is valid.
            /// </param>
            public static ResourceListOfHoldingsAdjustmentHeader ListHoldingsAdjustments(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? toEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAtTime = default(System.DateTimeOffset?))
            {
                return operations.ListHoldingsAdjustmentsAsync(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets holdings adjustments in an interval of effective time.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='fromEffectiveAt'>
            /// Events between this time (inclusive) and the toEffectiveAt are returned.
            /// </param>
            /// <param name='toEffectiveAt'>
            /// Events between this time (inclusive) and the fromEffectiveAt are returned.
            /// </param>
            /// <param name='asAtTime'>
            /// The as-at time for which the result is valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListOfHoldingsAdjustmentHeader> ListHoldingsAdjustmentsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? toEffectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAtTime = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHoldingsAdjustmentsWithHttpMessagesAsync(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a holdings adjustment for a single portfolio at a specific effective
            /// time.
            /// If no adjustment exists at this effective time, not found is returned.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective time of the holdings adjustment.
            /// </param>
            /// <param name='asAtTime'>
            /// The as-at time for which the result is valid.
            /// </param>
            public static HoldingsAdjustment GetHoldingsAdjustment(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAtTime = default(System.DateTimeOffset?))
            {
                return operations.GetHoldingsAdjustmentAsync(scope, code, effectiveAt, asAtTime).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a holdings adjustment for a single portfolio at a specific effective
            /// time.
            /// If no adjustment exists at this effective time, not found is returned.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective time of the holdings adjustment.
            /// </param>
            /// <param name='asAtTime'>
            /// The as-at time for which the result is valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HoldingsAdjustment> GetHoldingsAdjustmentAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAtTime = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHoldingsAdjustmentWithHttpMessagesAsync(scope, code, effectiveAt, asAtTime, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='fromTransactionDate'>
            /// Include transactions with a transaction date equal or later than this date.
            /// If not supplied, no lower filter is applied
            /// </param>
            /// <param name='toTransactionDate'>
            /// Include transactions with a transaction date equal or before this date. If
            /// not supplied, no upper filter is applied
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Keys for the instrument properties to be decorated onto the transactions
            /// </param>
            /// <param name='filter'>
            /// Transaction filter
            /// </param>
            public static VersionedResourceListOfTransaction GetTransactions(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromTransactionDate = default(System.DateTimeOffset?), System.DateTimeOffset? toTransactionDate = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> instrumentPropertyKeys = default(IList<string>), string filter = default(string))
            {
                return operations.GetTransactionsAsync(scope, code, fromTransactionDate, toTransactionDate, asAt, sortBy, start, limit, instrumentPropertyKeys, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='fromTransactionDate'>
            /// Include transactions with a transaction date equal or later than this date.
            /// If not supplied, no lower filter is applied
            /// </param>
            /// <param name='toTransactionDate'>
            /// Include transactions with a transaction date equal or before this date. If
            /// not supplied, no upper filter is applied
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Keys for the instrument properties to be decorated onto the transactions
            /// </param>
            /// <param name='filter'>
            /// Transaction filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionedResourceListOfTransaction> GetTransactionsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromTransactionDate = default(System.DateTimeOffset?), System.DateTimeOffset? toTransactionDate = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> instrumentPropertyKeys = default(IList<string>), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsWithHttpMessagesAsync(scope, code, fromTransactionDate, toTransactionDate, asAt, sortBy, start, limit, instrumentPropertyKeys, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='transactions'>
            /// The transactions to be updated
            /// </param>
            public static UpsertPortfolioTransactionsResponse UpsertTransactions(this ILUSIDAPI operations, string scope, string code, IList<TransactionRequest> transactions = default(IList<TransactionRequest>))
            {
                return operations.UpsertTransactionsAsync(scope, code, transactions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='transactions'>
            /// The transactions to be updated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertPortfolioTransactionsResponse> UpsertTransactionsAsync(this ILUSIDAPI operations, string scope, string code, IList<TransactionRequest> transactions = default(IList<TransactionRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertTransactionsWithHttpMessagesAsync(scope, code, transactions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete transactions
            /// </summary>
            /// <remarks>
            /// Delete one or more transactions from a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='id'>
            /// Ids of transactions to delete
            /// </param>
            public static DeletedEntityResponse DeleteTransactions(this ILUSIDAPI operations, string scope, string code, IList<string> id = default(IList<string>))
            {
                return operations.DeleteTransactionsAsync(scope, code, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete transactions
            /// </summary>
            /// <remarks>
            /// Delete one or more transactions from a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='id'>
            /// Ids of transactions to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeleteTransactionsAsync(this ILUSIDAPI operations, string scope, string code, IList<string> id = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTransactionsWithHttpMessagesAsync(scope, code, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add/update transaction properties
            /// </summary>
            /// <remarks>
            /// Add one or more properties to a specific transaction in a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='transactionId'>
            /// Id of transaction to add properties to
            /// </param>
            /// <param name='transactionProperties'>
            /// Transaction properties to add
            /// </param>
            public static AddTransactionPropertyResponse AddTransactionProperty(this ILUSIDAPI operations, string scope, string code, string transactionId, IDictionary<string, CreatePerpetualPropertyRequest> transactionProperties = default(IDictionary<string, CreatePerpetualPropertyRequest>))
            {
                return operations.AddTransactionPropertyAsync(scope, code, transactionId, transactionProperties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add/update transaction properties
            /// </summary>
            /// <remarks>
            /// Add one or more properties to a specific transaction in a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='transactionId'>
            /// Id of transaction to add properties to
            /// </param>
            /// <param name='transactionProperties'>
            /// Transaction properties to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddTransactionPropertyResponse> AddTransactionPropertyAsync(this ILUSIDAPI operations, string scope, string code, string transactionId, IDictionary<string, CreatePerpetualPropertyRequest> transactionProperties = default(IDictionary<string, CreatePerpetualPropertyRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTransactionPropertyWithHttpMessagesAsync(scope, code, transactionId, transactionProperties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete transaction property
            /// </summary>
            /// <remarks>
            /// Delete a property from a specific transaction
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='transactionId'>
            /// Id of the transaction to delete the property from
            /// </param>
            /// <param name='transactionPropertyKey'>
            /// The key of the property to be deleted
            /// </param>
            public static DeletedEntityResponse DeletePropertyFromTransaction(this ILUSIDAPI operations, string scope, string code, string transactionId, string transactionPropertyKey = default(string))
            {
                return operations.DeletePropertyFromTransactionAsync(scope, code, transactionId, transactionPropertyKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete transaction property
            /// </summary>
            /// <remarks>
            /// Delete a property from a specific transaction
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='transactionId'>
            /// Id of the transaction to delete the property from
            /// </param>
            /// <param name='transactionPropertyKey'>
            /// The key of the property to be deleted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePropertyFromTransactionAsync(this ILUSIDAPI operations, string scope, string code, string transactionId, string transactionPropertyKey = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePropertyFromTransactionWithHttpMessagesAsync(scope, code, transactionId, transactionPropertyKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Keys for the instrument properties to be decorated onto the trades
            /// </param>
            /// <param name='filter'>
            /// Trade filter
            /// </param>
            /// <param name='parameters'>
            /// Core query parameters
            /// </param>
            public static VersionedResourceListOfOutputTransaction BuildTransactions(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> instrumentPropertyKeys = default(IList<string>), string filter = default(string), TransactionQueryParameters parameters = default(TransactionQueryParameters))
            {
                return operations.BuildTransactionsAsync(scope, code, asAt, sortBy, start, limit, instrumentPropertyKeys, filter, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='instrumentPropertyKeys'>
            /// Keys for the instrument properties to be decorated onto the trades
            /// </param>
            /// <param name='filter'>
            /// Trade filter
            /// </param>
            /// <param name='parameters'>
            /// Core query parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionedResourceListOfOutputTransaction> BuildTransactionsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> instrumentPropertyKeys = default(IList<string>), string filter = default(string), TransactionQueryParameters parameters = default(TransactionQueryParameters), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BuildTransactionsWithHttpMessagesAsync(scope, code, asAt, sortBy, start, limit, instrumentPropertyKeys, filter, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
