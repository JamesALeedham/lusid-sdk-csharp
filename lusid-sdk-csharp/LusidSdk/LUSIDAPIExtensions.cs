// <auto-generated>
// Copyright Â© 2018 FINBOURNE TECHNOLOGY LTD
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// </auto-generated>

namespace Finbourne
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LUSIDAPI.
    /// </summary>
    public static partial class LUSIDAPIExtensions
    {
            /// <summary>
            /// Clears the entity caches on the instance that serves this request only.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ClearEntityCachesDto ClearEntityCaches(this ILUSIDAPI operations)
            {
                return operations.ClearEntityCachesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Clears the entity caches on the instance that serves this request only.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClearEntityCachesDto> ClearEntityCachesAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClearEntityCachesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate data in a group hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='groupCode'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ListAggregationResponse GetAggregationByGroup(this ILUSIDAPI operations, string scope, string groupCode, AggregationRequest request = default(AggregationRequest))
            {
                return operations.GetAggregationByGroupAsync(scope, groupCode, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate data in a group hierarchy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='groupCode'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListAggregationResponse> GetAggregationByGroupAsync(this ILUSIDAPI operations, string scope, string groupCode, AggregationRequest request = default(AggregationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregationByGroupWithHttpMessagesAsync(scope, groupCode, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregation request data in a group hierarchy into a data tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='groupCode'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static NestedAggregationResponse GetNestedAggregationByGroup(this ILUSIDAPI operations, string scope, string groupCode, AggregationRequest request = default(AggregationRequest))
            {
                return operations.GetNestedAggregationByGroupAsync(scope, groupCode, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregation request data in a group hierarchy into a data tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='groupCode'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NestedAggregationResponse> GetNestedAggregationByGroupAsync(this ILUSIDAPI operations, string scope, string groupCode, AggregationRequest request = default(AggregationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNestedAggregationByGroupWithHttpMessagesAsync(scope, groupCode, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate data in a portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='portfolioCode'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ListAggregationResponse GetAggregationByPortfolio(this ILUSIDAPI operations, string scope, string portfolioCode, AggregationRequest request = default(AggregationRequest))
            {
                return operations.GetAggregationByPortfolioAsync(scope, portfolioCode, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate data in a portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='portfolioCode'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListAggregationResponse> GetAggregationByPortfolioAsync(this ILUSIDAPI operations, string scope, string portfolioCode, AggregationRequest request = default(AggregationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregationByPortfolioWithHttpMessagesAsync(scope, portfolioCode, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregation request data in a portfolio into a data tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='portfolioCode'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static NestedAggregationResponse GetNestedAggregationByPortfolio(this ILUSIDAPI operations, string scope, string portfolioCode, AggregationRequest request = default(AggregationRequest))
            {
                return operations.GetNestedAggregationByPortfolioAsync(scope, portfolioCode, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregation request data in a portfolio into a data tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='portfolioCode'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NestedAggregationResponse> GetNestedAggregationByPortfolioAsync(this ILUSIDAPI operations, string scope, string portfolioCode, AggregationRequest request = default(AggregationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNestedAggregationByPortfolioWithHttpMessagesAsync(scope, portfolioCode, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate data from a result set
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='resultsKey'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ListAggregationResponse GetAggregationByResultSet(this ILUSIDAPI operations, string scope, string resultsKey, AggregationRequest request = default(AggregationRequest))
            {
                return operations.GetAggregationByResultSetAsync(scope, resultsKey, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate data from a result set
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='resultsKey'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListAggregationResponse> GetAggregationByResultSetAsync(this ILUSIDAPI operations, string scope, string resultsKey, AggregationRequest request = default(AggregationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregationByResultSetWithHttpMessagesAsync(scope, resultsKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Aggregate data from a result set into a nested structure
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='resultsKey'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static NestedAggregationResponse GetNestedAggregationByResultSet(this ILUSIDAPI operations, string scope, string resultsKey, AggregationRequest request = default(AggregationRequest))
            {
                return operations.GetNestedAggregationByResultSetAsync(scope, resultsKey, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Aggregate data from a result set into a nested structure
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='resultsKey'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NestedAggregationResponse> GetNestedAggregationByResultSetAsync(this ILUSIDAPI operations, string scope, string resultsKey, AggregationRequest request = default(AggregationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNestedAggregationByResultSetWithHttpMessagesAsync(scope, resultsKey, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all analytic stores in client
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListAnalyticStoreKeyDto ListAnalyticStores(this ILUSIDAPI operations, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListAnalyticStoresAsync(asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all analytic stores in client
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListAnalyticStoreKeyDto> ListAnalyticStoresAsync(this ILUSIDAPI operations, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAnalyticStoresWithHttpMessagesAsync(asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new analytic store for the given scope for the given date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A valid and fully populated analytic store creation request
            /// </param>
            public static AnalyticStoreDto CreateAnalyticStore(this ILUSIDAPI operations, CreateAnalyticStoreRequest request = default(CreateAnalyticStoreRequest))
            {
                return operations.CreateAnalyticStoreAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new analytic store for the given scope for the given date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// A valid and fully populated analytic store creation request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticStoreDto> CreateAnalyticStoreAsync(this ILUSIDAPI operations, CreateAnalyticStoreRequest request = default(CreateAnalyticStoreRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAnalyticStoreWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an analytic store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='asAt'>
            /// AsAt date
            /// </param>
            public static AnalyticStoreDto GetAnalyticStore(this ILUSIDAPI operations, string scope, int year, int month, int day, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetAnalyticStoreAsync(scope, year, month, day, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an analytic store
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='asAt'>
            /// AsAt date
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticStoreDto> GetAnalyticStoreAsync(this ILUSIDAPI operations, string scope, int year, int month, int day, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAnalyticStoreWithHttpMessagesAsync(scope, year, month, day, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new analytic store for the given scope for the given date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            public static DeletedEntityResponse DeleteAnalyticStore(this ILUSIDAPI operations, string scope, int year, int month, int day)
            {
                return operations.DeleteAnalyticStoreAsync(scope, year, month, day).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new analytic store for the given scope for the given date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeleteAnalyticStoreAsync(this ILUSIDAPI operations, string scope, int year, int month, int day, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAnalyticStoreWithHttpMessagesAsync(scope, year, month, day, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Insert analytics into an existing analytic store for the given scope and
            /// date.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='data'>
            /// </param>
            public static AnalyticStoreDto InsertAnalytics(this ILUSIDAPI operations, string scope, int year, int month, int day, IList<SecurityAnalyticDataDto> data = default(IList<SecurityAnalyticDataDto>))
            {
                return operations.InsertAnalyticsAsync(scope, year, month, day, data).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Insert analytics into an existing analytic store for the given scope and
            /// date.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The analytics data scope
            /// </param>
            /// <param name='year'>
            /// The year component of the date for the data in the scope
            /// </param>
            /// <param name='month'>
            /// The month component of the date for the data in the scope
            /// </param>
            /// <param name='day'>
            /// The day component of the date for the data in the scope
            /// </param>
            /// <param name='data'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AnalyticStoreDto> InsertAnalyticsAsync(this ILUSIDAPI operations, string scope, int year, int month, int day, IList<SecurityAnalyticDataDto> data = default(IList<SecurityAnalyticDataDto>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InsertAnalyticsWithHttpMessagesAsync(scope, year, month, day, data, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert Analytics
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the analytic
            /// </param>
            /// <param name='request'>
            /// A valid and fully populated analytic store creation request
            /// </param>
            public static object UpsertAnalytics(this ILUSIDAPI operations, string scope, AnalyticsStorageRequest request = default(AnalyticsStorageRequest))
            {
                return operations.UpsertAnalyticsAsync(scope, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert Analytics
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope of the analytic
            /// </param>
            /// <param name='request'>
            /// A valid and fully populated analytic store creation request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpsertAnalyticsAsync(this ILUSIDAPI operations, string scope, AnalyticsStorageRequest request = default(AnalyticsStorageRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertAnalyticsWithHttpMessagesAsync(scope, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update classification data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classifications'>
            /// </param>
            public static ClassificationsDto UpsertClassification(this ILUSIDAPI operations, IList<SecurityClassificationDto> classifications = default(IList<SecurityClassificationDto>))
            {
                return operations.UpsertClassificationAsync(classifications).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update classification data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classifications'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClassificationsDto> UpsertClassificationAsync(this ILUSIDAPI operations, IList<SecurityClassificationDto> classifications = default(IList<SecurityClassificationDto>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertClassificationWithHttpMessagesAsync(classifications, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new transaction type movement to the list of existing types
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// </param>
            public static TxnMetaDataDto AddConfigurationTransactionType(this ILUSIDAPI operations, TxnMetaDataDto type = default(TxnMetaDataDto))
            {
                return operations.AddConfigurationTransactionTypeAsync(type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a new transaction type movement to the list of existing types
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TxnMetaDataDto> AddConfigurationTransactionTypeAsync(this ILUSIDAPI operations, TxnMetaDataDto type = default(TxnMetaDataDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddConfigurationTransactionTypeWithHttpMessagesAsync(type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of persisted transaction types
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ResourceListTxnMetaDataDto GetConfigurationTransactionTypes(this ILUSIDAPI operations)
            {
                return operations.GetConfigurationTransactionTypesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of persisted transaction types
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListTxnMetaDataDto> GetConfigurationTransactionTypesAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationTransactionTypesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads a list of transaction types to be used by the movements engine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// </param>
            public static ResourceListTxnMetaDataDto UploadConfigurationTransactionTypes(this ILUSIDAPI operations, IList<TxnMetaDataDto> types = default(IList<TxnMetaDataDto>))
            {
                return operations.UploadConfigurationTransactionTypesAsync(types).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads a list of transaction types to be used by the movements engine
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListTxnMetaDataDto> UploadConfigurationTransactionTypesAsync(this ILUSIDAPI operations, IList<TxnMetaDataDto> types = default(IList<TxnMetaDataDto>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadConfigurationTransactionTypesWithHttpMessagesAsync(types, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a corporate action based on dates
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope
            /// </param>
            /// <param name='corporateActionSourceCode'>
            /// Corporate action source id
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective Date
            /// </param>
            /// <param name='asAt'>
            /// AsAt Date filter
            /// </param>
            public static IList<CorporateActionEventDto> ListCorporateActions(this ILUSIDAPI operations, string scope, string corporateActionSourceCode, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.ListCorporateActionsAsync(scope, corporateActionSourceCode, effectiveAt, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a corporate action based on dates
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// Scope
            /// </param>
            /// <param name='corporateActionSourceCode'>
            /// Corporate action source id
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective Date
            /// </param>
            /// <param name='asAt'>
            /// AsAt Date filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CorporateActionEventDto>> ListCorporateActionsAsync(this ILUSIDAPI operations, string scope, string corporateActionSourceCode, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCorporateActionsWithHttpMessagesAsync(scope, corporateActionSourceCode, effectiveAt, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempt to create/update one or more corporate action. Failed actions will
            /// be identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the corporate action
            /// </param>
            /// <param name='corporateActionSourceCode'>
            /// Source of the corporate action
            /// </param>
            /// <param name='actions'>
            /// The corporate actions to create
            /// </param>
            public static TryUpsertCorporateActionsDto BatchUpsertCorporateActions(this ILUSIDAPI operations, string scope, string corporateActionSourceCode, IList<UpsertCorporateActionRequest> actions = default(IList<UpsertCorporateActionRequest>))
            {
                return operations.BatchUpsertCorporateActionsAsync(scope, corporateActionSourceCode, actions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempt to create/update one or more corporate action. Failed actions will
            /// be identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the corporate action
            /// </param>
            /// <param name='corporateActionSourceCode'>
            /// Source of the corporate action
            /// </param>
            /// <param name='actions'>
            /// The corporate actions to create
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TryUpsertCorporateActionsDto> BatchUpsertCorporateActionsAsync(this ILUSIDAPI operations, string scope, string corporateActionSourceCode, IList<UpsertCorporateActionRequest> actions = default(IList<UpsertCorporateActionRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchUpsertCorporateActionsWithHttpMessagesAsync(scope, corporateActionSourceCode, actions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            public static string GetDownloadUrl(this ILUSIDAPI operations, string version = default(string))
            {
                return operations.GetDownloadUrlAsync(version).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetDownloadUrlAsync(this ILUSIDAPI operations, string version = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDownloadUrlWithHttpMessagesAsync(version, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetLatestVersion(this ILUSIDAPI operations)
            {
                return operations.GetLatestVersionAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetLatestVersionAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestVersionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all groups in a specified scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// A filter expression to apply to the result set
            /// </param>
            public static ResourceListGroupDto ListPortfolioGroups(this ILUSIDAPI operations, string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListPortfolioGroupsAsync(scope, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all groups in a specified scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// A filter expression to apply to the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListGroupDto> ListPortfolioGroupsAsync(this ILUSIDAPI operations, string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortfolioGroupsWithHttpMessagesAsync(scope, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static GroupDto CreatePortfolioGroup(this ILUSIDAPI operations, string scope, CreateGroupRequest request = default(CreateGroupRequest))
            {
                return operations.CreatePortfolioGroupAsync(scope, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupDto> CreatePortfolioGroupAsync(this ILUSIDAPI operations, string scope, CreateGroupRequest request = default(CreateGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePortfolioGroupWithHttpMessagesAsync(scope, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            public static GroupDto GetPortfolioGroup(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPortfolioGroupAsync(scope, code, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupDto> GetPortfolioGroupAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioGroupWithHttpMessagesAsync(scope, code, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            public static DeletedEntityResponse DeletePortfolioGroup(this ILUSIDAPI operations, string scope, string code)
            {
                return operations.DeletePortfolioGroupAsync(scope, code).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioGroupAsync(this ILUSIDAPI operations, string scope, string code, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioGroupWithHttpMessagesAsync(scope, code, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all commands that modified the portfolio groups(s) with the specified
            /// id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The portfolio group id
            /// </param>
            /// <param name='fromAsAt'>
            /// Filters commands by those that were processed at or after this time. Null
            /// means there is no lower limit.
            /// </param>
            /// <param name='toAsAt'>
            /// Filters commands by those that were processed at or before this time. Null
            /// means there is no upper limit (latest).
            /// </param>
            /// <param name='filter'>
            /// A filter expression to apply to the result set
            /// </param>
            public static ResourceListProcessedCommandDto GetPortfolioGroupCommands(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), string filter = default(string))
            {
                return operations.GetPortfolioGroupCommandsAsync(scope, code, fromAsAt, toAsAt, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all commands that modified the portfolio groups(s) with the specified
            /// id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio group
            /// </param>
            /// <param name='code'>
            /// The portfolio group id
            /// </param>
            /// <param name='fromAsAt'>
            /// Filters commands by those that were processed at or after this time. Null
            /// means there is no lower limit.
            /// </param>
            /// <param name='toAsAt'>
            /// Filters commands by those that were processed at or before this time. Null
            /// means there is no upper limit (latest).
            /// </param>
            /// <param name='filter'>
            /// A filter expression to apply to the result set
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListProcessedCommandDto> GetPortfolioGroupCommandsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioGroupCommandsWithHttpMessagesAsync(scope, code, fromAsAt, toAsAt, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a full expansion of an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='propertyFilter'>
            /// </param>
            public static ExpandedGroupDto GetPortfolioGroupExpansion(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>))
            {
                return operations.GetPortfolioGroupExpansionAsync(scope, code, effectiveAt, asAt, propertyFilter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a full expansion of an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='propertyFilter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExpandedGroupDto> GetPortfolioGroupExpansionAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioGroupExpansionWithHttpMessagesAsync(scope, code, effectiveAt, asAt, propertyFilter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a portfolio to an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='identifier'>
            /// </param>
            public static GroupDto AddPortfolioToGroup(this ILUSIDAPI operations, string scope, string code, ResourceId identifier = default(ResourceId))
            {
                return operations.AddPortfolioToGroupAsync(scope, code, identifier).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a portfolio to an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='identifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupDto> AddPortfolioToGroupAsync(this ILUSIDAPI operations, string scope, string code, ResourceId identifier = default(ResourceId), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPortfolioToGroupWithHttpMessagesAsync(scope, code, identifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a portfolio that is currently present within an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='portfolioScope'>
            /// </param>
            /// <param name='portfolioCode'>
            /// </param>
            public static GroupDto DeletePortfolioFromGroup(this ILUSIDAPI operations, string scope, string code, string portfolioScope, string portfolioCode)
            {
                return operations.DeletePortfolioFromGroupAsync(scope, code, portfolioScope, portfolioCode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a portfolio that is currently present within an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='portfolioScope'>
            /// </param>
            /// <param name='portfolioCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupDto> DeletePortfolioFromGroupAsync(this ILUSIDAPI operations, string scope, string code, string portfolioScope, string portfolioCode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioFromGroupWithHttpMessagesAsync(scope, code, portfolioScope, portfolioCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a sub group to an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='identifier'>
            /// </param>
            public static GroupDto AddSubGroupToGroup(this ILUSIDAPI operations, string scope, string code, ResourceId identifier = default(ResourceId))
            {
                return operations.AddSubGroupToGroupAsync(scope, code, identifier).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a sub group to an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='identifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupDto> AddSubGroupToGroupAsync(this ILUSIDAPI operations, string scope, string code, ResourceId identifier = default(ResourceId), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddSubGroupToGroupWithHttpMessagesAsync(scope, code, identifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove a subgroup that is currently present within an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='subgroupScope'>
            /// </param>
            /// <param name='subgroupCode'>
            /// </param>
            public static GroupDto DeleteSubGroupFromGroup(this ILUSIDAPI operations, string scope, string code, string subgroupScope, string subgroupCode)
            {
                return operations.DeleteSubGroupFromGroupAsync(scope, code, subgroupScope, subgroupCode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove a subgroup that is currently present within an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='subgroupScope'>
            /// </param>
            /// <param name='subgroupCode'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupDto> DeleteSubGroupFromGroupAsync(this ILUSIDAPI operations, string scope, string code, string subgroupScope, string subgroupCode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSubGroupFromGroupWithHttpMessagesAsync(scope, code, subgroupScope, subgroupCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static GroupDto UpdatePortfolioGroup(this ILUSIDAPI operations, string scope, string code, UpdateGroupRequest request = default(UpdateGroupRequest))
            {
                return operations.UpdatePortfolioGroupAsync(scope, code, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupDto> UpdatePortfolioGroupAsync(this ILUSIDAPI operations, string scope, string code, UpdateGroupRequest request = default(UpdateGroupRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePortfolioGroupWithHttpMessagesAsync(scope, code, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search portfolio groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListGroupDto PortfolioGroupsSearch(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.PortfolioGroupsSearchAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search portfolio groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListGroupDto> PortfolioGroupsSearchAsync(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PortfolioGroupsSearchWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Simple heartbeat method for the api
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetHealth(this ILUSIDAPI operations)
            {
                return operations.GetHealthAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Simple heartbeat method for the api
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetHealthAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHealthWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the login information.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LoginResponse GetLoginInfo(this ILUSIDAPI operations)
            {
                return operations.GetLoginInfoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the login information.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LoginResponse> GetLoginInfoAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLoginInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the unique identifier for the SAML Identity Provider to be used by
            /// domain.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The domain that the user will be logging in to.
            /// </param>
            public static string GetSamlIdentityProviderId(this ILUSIDAPI operations, string domain)
            {
                return operations.GetSamlIdentityProviderIdAsync(domain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the unique identifier for the SAML Identity Provider to be used by
            /// domain.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// The domain that the user will be logging in to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSamlIdentityProviderIdAsync(this ILUSIDAPI operations, string domain, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSamlIdentityProviderIdWithHttpMessagesAsync(domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Store a log message
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            public static string StoreWebLogs(this ILUSIDAPI operations, WebLogMessage message = default(WebLogMessage))
            {
                return operations.StoreWebLogsAsync(message).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Store a log message
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StoreWebLogsAsync(this ILUSIDAPI operations, WebLogMessage message = default(WebLogMessage), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StoreWebLogsWithHttpMessagesAsync(message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the current assembly version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetBuildVersion(this ILUSIDAPI operations)
            {
                return operations.GetBuildVersionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the current assembly version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetBuildVersionAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBuildVersionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the current assembly version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string VerifyConnectivity(this ILUSIDAPI operations)
            {
                return operations.VerifyConnectivityAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the current assembly version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> VerifyConnectivityAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyConnectivityWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the current assembly version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetVersion(this ILUSIDAPI operations)
            {
                return operations.GetVersionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the current assembly version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetVersionAsync(this ILUSIDAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVersionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a personalisation, recursing to get any referenced if required.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recursive'>
            /// Whether to recurse into dereference recursive settings
            /// </param>
            /// <param name='wildcards'>
            /// Whether to apply wildcards to the provided pattern and pull back any
            /// matching
            /// </param>
            /// <param name='pattern'>
            /// The search pattern or specific key
            /// </param>
            /// <param name='scope'>
            /// The scope level to request for. Possible values include: 'User', 'Group',
            /// 'Default', 'All'
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ResourceListPersonalisationDto GetPersonalisations(this ILUSIDAPI operations, bool recursive, bool wildcards, string pattern = default(string), string scope = default(string), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetPersonalisationsAsync(recursive, wildcards, pattern, scope, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a personalisation, recursing to get any referenced if required.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recursive'>
            /// Whether to recurse into dereference recursive settings
            /// </param>
            /// <param name='wildcards'>
            /// Whether to apply wildcards to the provided pattern and pull back any
            /// matching
            /// </param>
            /// <param name='pattern'>
            /// The search pattern or specific key
            /// </param>
            /// <param name='scope'>
            /// The scope level to request for. Possible values include: 'User', 'Group',
            /// 'Default', 'All'
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListPersonalisationDto> GetPersonalisationsAsync(this ILUSIDAPI operations, bool recursive, bool wildcards, string pattern = default(string), string scope = default(string), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPersonalisationsWithHttpMessagesAsync(recursive, wildcards, pattern, scope, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert one or more personalisations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personalisations'>
            /// </param>
            public static UpsertPersonalisationsResponse UpsertPersonalisations(this ILUSIDAPI operations, IList<PersonalisationDto> personalisations = default(IList<PersonalisationDto>))
            {
                return operations.UpsertPersonalisationsAsync(personalisations).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert one or more personalisations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='personalisations'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertPersonalisationsResponse> UpsertPersonalisationsAsync(this ILUSIDAPI operations, IList<PersonalisationDto> personalisations = default(IList<PersonalisationDto>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertPersonalisationsWithHttpMessagesAsync(personalisations, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a personalisation at a specific scope (or use scope ALL to purge the
            /// setting entirely)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope to delete at (use ALL to purge the setting entirely). Possible
            /// values include: 'User', 'Group', 'Default', 'All'
            /// </param>
            /// <param name='key'>
            /// The key of the setting to be deleted
            /// </param>
            /// <param name='group'>
            /// If deleting a setting at group level, specify the group here
            /// </param>
            public static DeletedEntityResponse DeletePersonalisation(this ILUSIDAPI operations, string scope, string key = default(string), string group = default(string))
            {
                return operations.DeletePersonalisationAsync(scope, key, group).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a personalisation at a specific scope (or use scope ALL to purge the
            /// setting entirely)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope to delete at (use ALL to purge the setting entirely). Possible
            /// values include: 'User', 'Group', 'Default', 'All'
            /// </param>
            /// <param name='key'>
            /// The key of the setting to be deleted
            /// </param>
            /// <param name='group'>
            /// If deleting a setting at group level, specify the group here
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePersonalisationAsync(this ILUSIDAPI operations, string scope, string key = default(string), string group = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePersonalisationWithHttpMessagesAsync(scope, key, group, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List scopes that contain portfolios
            /// </summary>
            /// <remarks>
            /// Lists all scopes that have previously been used
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// How to order the returned scopes
            /// </param>
            /// <param name='start'>
            /// The starting index for the returned scopes
            /// </param>
            /// <param name='limit'>
            /// The final index for the returned scopes
            /// </param>
            public static ResourceListScope ListPortfolioScopes(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.ListPortfolioScopesAsync(sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List scopes that contain portfolios
            /// </summary>
            /// <remarks>
            /// Lists all scopes that have previously been used
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// How to order the returned scopes
            /// </param>
            /// <param name='start'>
            /// The starting index for the returned scopes
            /// </param>
            /// <param name='limit'>
            /// The final index for the returned scopes
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListScope> ListPortfolioScopesAsync(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortfolioScopesWithHttpMessagesAsync(sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all portfolios
            /// </summary>
            /// <remarks>
            /// Get all portfolios in a scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope to get portfolios from
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListPortfolioDto ListPortfolios(this ILUSIDAPI operations, string scope, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListPortfoliosAsync(scope, effectiveAt, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all portfolios
            /// </summary>
            /// <remarks>
            /// Get all portfolios in a scope
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope to get portfolios from
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListPortfolioDto> ListPortfoliosAsync(this ILUSIDAPI operations, string scope, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPortfoliosWithHttpMessagesAsync(scope, effectiveAt, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create portfolio
            /// </summary>
            /// <remarks>
            /// Creates a new portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the portfolio
            /// </param>
            /// <param name='createRequest'>
            /// The portfolio creation request object
            /// </param>
            public static PortfolioDto CreatePortfolio(this ILUSIDAPI operations, string scope, CreatePortfolioRequest createRequest = default(CreatePortfolioRequest))
            {
                return operations.CreatePortfolioAsync(scope, createRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create portfolio
            /// </summary>
            /// <remarks>
            /// Creates a new portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the portfolio
            /// </param>
            /// <param name='createRequest'>
            /// The portfolio creation request object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDto> CreatePortfolioAsync(this ILUSIDAPI operations, string scope, CreatePortfolioRequest createRequest = default(CreatePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePortfolioWithHttpMessagesAsync(scope, createRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get portfolio
            /// </summary>
            /// <remarks>
            /// Gets a single portfolio by code
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='propertyFilter'>
            /// Optional property filter
            /// </param>
            public static PortfolioDto GetPortfolio(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>))
            {
                return operations.GetPortfolioAsync(scope, code, effectiveAt, asAt, propertyFilter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get portfolio
            /// </summary>
            /// <remarks>
            /// Gets a single portfolio by code
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='propertyFilter'>
            /// Optional property filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDto> GetPortfolioAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPortfolioWithHttpMessagesAsync(scope, code, effectiveAt, asAt, propertyFilter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio to be updated
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='request'>
            /// The update request
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date for the change
            /// </param>
            public static PortfolioDto UpdatePortfolio(this ILUSIDAPI operations, string scope, string code, UpdatePortfolioRequest request = default(UpdatePortfolioRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.UpdatePortfolioAsync(scope, code, request, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio to be updated
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='request'>
            /// The update request
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date for the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDto> UpdatePortfolioAsync(this ILUSIDAPI operations, string scope, string code, UpdatePortfolioRequest request = default(UpdatePortfolioRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePortfolioWithHttpMessagesAsync(scope, code, request, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete portfolio
            /// </summary>
            /// <remarks>
            /// Deletes a portfolio from the given effectiveAt
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            public static DeletedEntityResponse DeletePortfolio(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.DeletePortfolioAsync(scope, code, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete portfolio
            /// </summary>
            /// <remarks>
            /// Deletes a portfolio from the given effectiveAt
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioWithHttpMessagesAsync(scope, code, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get modifications
            /// </summary>
            /// <remarks>
            /// Gets all commands that modified the portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The portfolio id
            /// </param>
            /// <param name='fromAsAt'>
            /// Filters commands by those that were processed at or after this time. Null
            /// means there is no lower limit.
            /// </param>
            /// <param name='toAsAt'>
            /// Filters commands by those that were processed at or before this time. Null
            /// means there is no upper limit (latest).
            /// </param>
            /// <param name='filter'>
            /// Command filter
            /// </param>
            public static ResourceListProcessedCommandDto GetCommands(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), string filter = default(string))
            {
                return operations.GetCommandsAsync(scope, code, fromAsAt, toAsAt, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get modifications
            /// </summary>
            /// <remarks>
            /// Gets all commands that modified the portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// The portfolio id
            /// </param>
            /// <param name='fromAsAt'>
            /// Filters commands by those that were processed at or after this time. Null
            /// means there is no lower limit.
            /// </param>
            /// <param name='toAsAt'>
            /// Filters commands by those that were processed at or before this time. Null
            /// means there is no upper limit (latest).
            /// </param>
            /// <param name='filter'>
            /// Command filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListProcessedCommandDto> GetCommandsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromAsAt = default(System.DateTimeOffset?), System.DateTimeOffset? toAsAt = default(System.DateTimeOffset?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCommandsWithHttpMessagesAsync(scope, code, fromAsAt, toAsAt, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get portfolio details
            /// </summary>
            /// <remarks>
            /// Gets the details for a portfolio.  For a derived portfolio this can be
            /// the details of another reference portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='propertyFilter'>
            /// Optional property filter
            /// </param>
            public static PortfolioDetailsDto GetDetails(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>))
            {
                return operations.GetDetailsAsync(scope, code, effectiveAt, asAt, propertyFilter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get portfolio details
            /// </summary>
            /// <remarks>
            /// Gets the details for a portfolio.  For a derived portfolio this can be
            /// the details of another reference portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='propertyFilter'>
            /// Optional property filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDetailsDto> GetDetailsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyFilter = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(scope, code, effectiveAt, asAt, propertyFilter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add/update portfolio details
            /// </summary>
            /// <remarks>
            /// Update the portfolio details for the given code or add if it doesn't
            /// already exist. Updates with
            /// null values will remove any existing values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='details'>
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            public static PortfolioDetailsDto UpsertPortfolioDetails(this ILUSIDAPI operations, string scope, string code, PortfolioDetailsRequest details = default(PortfolioDetailsRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.UpsertPortfolioDetailsAsync(scope, code, details, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add/update portfolio details
            /// </summary>
            /// <remarks>
            /// Update the portfolio details for the given code or add if it doesn't
            /// already exist. Updates with
            /// null values will remove any existing values
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='details'>
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDetailsDto> UpsertPortfolioDetailsAsync(this ILUSIDAPI operations, string scope, string code, PortfolioDetailsRequest details = default(PortfolioDetailsRequest), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertPortfolioDetailsWithHttpMessagesAsync(scope, code, details, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete portfolio details
            /// </summary>
            /// <remarks>
            /// Deletes the portfolio details for the given code
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            public static DeletedEntityResponse DeletePortfolioDetails(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.DeletePortfolioDetailsAsync(scope, code, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete portfolio details
            /// </summary>
            /// <remarks>
            /// Deletes the portfolio details for the given code
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date of the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioDetailsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioDetailsWithHttpMessagesAsync(scope, code, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get holdings
            /// </summary>
            /// <remarks>
            /// Get the aggregate holdings of a portfolio.  If no effectiveAt or asAt
            /// are supplied then values will be defaulted to the latest system time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='filter'>
            /// A filter on the results
            /// </param>
            /// <param name='securityPropertyKeys'>
            /// Keys for the security properties to be decorated onto the holdings
            /// </param>
            public static VersionedResourceListHoldingDto GetAggregateHoldings(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), IList<string> securityPropertyKeys = default(IList<string>))
            {
                return operations.GetAggregateHoldingsAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, filter, securityPropertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get holdings
            /// </summary>
            /// <remarks>
            /// Get the aggregate holdings of a portfolio.  If no effectiveAt or asAt
            /// are supplied then values will be defaulted to the latest system time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='filter'>
            /// A filter on the results
            /// </param>
            /// <param name='securityPropertyKeys'>
            /// Keys for the security properties to be decorated onto the holdings
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionedResourceListHoldingDto> GetAggregateHoldingsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), IList<string> securityPropertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAggregateHoldingsWithHttpMessagesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, filter, securityPropertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adjust holdings
            /// </summary>
            /// <remarks>
            /// Create trades in a specific portfolio to bring it to the specified holdings
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='holdingAdjustments'>
            /// </param>
            public static AdjustHoldingsDto AdjustAllHoldings(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>))
            {
                return operations.AdjustAllHoldingsAsync(scope, code, effectiveAt, holdingAdjustments).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adjust holdings
            /// </summary>
            /// <remarks>
            /// Create trades in a specific portfolio to bring it to the specified holdings
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='holdingAdjustments'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdjustHoldingsDto> AdjustAllHoldingsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdjustAllHoldingsWithHttpMessagesAsync(scope, code, effectiveAt, holdingAdjustments, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adjust holdings
            /// </summary>
            /// <remarks>
            /// Create trades in a specific portfolio to bring it to the specified holdings
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='holdingAdjustments'>
            /// </param>
            public static AdjustHoldingsDto AdjustHoldings(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>))
            {
                return operations.AdjustHoldingsAsync(scope, code, effectiveAt, holdingAdjustments).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adjust holdings
            /// </summary>
            /// <remarks>
            /// Create trades in a specific portfolio to bring it to the specified holdings
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='holdingAdjustments'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AdjustHoldingsDto> AdjustHoldingsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<AdjustHoldingRequest> holdingAdjustments = default(IList<AdjustHoldingRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdjustHoldingsWithHttpMessagesAsync(scope, code, effectiveAt, holdingAdjustments, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get properties
            /// </summary>
            /// <remarks>
            /// Get properties attached to the portfolio.  If the asAt is not specified
            /// then
            /// the latest system time is used
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='sortBy'>
            /// Property to sort the results by
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static PortfolioPropertiesDto GetProperties(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetPropertiesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties
            /// </summary>
            /// <remarks>
            /// Get properties attached to the portfolio.  If the asAt is not specified
            /// then
            /// the latest system time is used
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='asAt'>
            /// The asAt date to use
            /// </param>
            /// <param name='sortBy'>
            /// Property to sort the results by
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioPropertiesDto> GetPropertiesAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertiesWithHttpMessagesAsync(scope, code, effectiveAt, asAt, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update properties
            /// </summary>
            /// <remarks>
            /// Create one or more properties on a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='properties'>
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date for the change
            /// </param>
            public static PortfolioPropertiesDto UpsertPortfolioProperties(this ILUSIDAPI operations, string scope, string code, IList<CreatePropertyRequest> properties = default(IList<CreatePropertyRequest>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.UpsertPortfolioPropertiesAsync(scope, code, properties, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update properties
            /// </summary>
            /// <remarks>
            /// Create one or more properties on a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='properties'>
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date for the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioPropertiesDto> UpsertPortfolioPropertiesAsync(this ILUSIDAPI operations, string scope, string code, IList<CreatePropertyRequest> properties = default(IList<CreatePropertyRequest>), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertPortfolioPropertiesWithHttpMessagesAsync(scope, code, properties, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete property
            /// </summary>
            /// <remarks>
            /// Delete a property from a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='property'>
            /// The key of the property to be deleted
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            public static DeletedEntityResponse DeletePortfolioProperty(this ILUSIDAPI operations, string scope, string code, string property = default(string), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.DeletePortfolioPropertyAsync(scope, code, property, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete property
            /// </summary>
            /// <remarks>
            /// Delete a property from a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='property'>
            /// The key of the property to be deleted
            /// </param>
            /// <param name='effectiveAt'>
            /// Effective date
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioPropertyAsync(this ILUSIDAPI operations, string scope, string code, string property = default(string), System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioPropertyWithHttpMessagesAsync(scope, code, property, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete properties
            /// </summary>
            /// <remarks>
            /// Delete all properties from a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date for the change
            /// </param>
            public static DeletedEntityResponse DeletePortfolioProperties(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.DeletePortfolioPropertiesAsync(scope, code, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete properties
            /// </summary>
            /// <remarks>
            /// Delete all properties from a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='effectiveAt'>
            /// The effective date for the change
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePortfolioPropertiesAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePortfolioPropertiesWithHttpMessagesAsync(scope, code, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get trades
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='fromTradeDate'>
            /// Include trades with a trade date equal or later than this date
            /// </param>
            /// <param name='toTradeDate'>
            /// Include trades with a trade date equal or before this date
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='securityPropertyKeys'>
            /// Keys for the security properties to be decorated onto the trades
            /// </param>
            /// <param name='filter'>
            /// Trade filter
            /// </param>
            public static VersionedResourceListTradeDto GetTrades(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromTradeDate = default(System.DateTimeOffset?), System.DateTimeOffset? toTradeDate = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> securityPropertyKeys = default(IList<string>), string filter = default(string))
            {
                return operations.GetTradesAsync(scope, code, fromTradeDate, toTradeDate, asAt, sortBy, start, limit, securityPropertyKeys, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get trades
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='fromTradeDate'>
            /// Include trades with a trade date equal or later than this date
            /// </param>
            /// <param name='toTradeDate'>
            /// Include trades with a trade date equal or before this date
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// The columns to sort the returned data by
            /// </param>
            /// <param name='start'>
            /// How many items to skip from the returned set
            /// </param>
            /// <param name='limit'>
            /// How many items to return from the set
            /// </param>
            /// <param name='securityPropertyKeys'>
            /// Keys for the security properties to be decorated onto the trades
            /// </param>
            /// <param name='filter'>
            /// Trade filter
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VersionedResourceListTradeDto> GetTradesAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? fromTradeDate = default(System.DateTimeOffset?), System.DateTimeOffset? toTradeDate = default(System.DateTimeOffset?), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), IList<string> securityPropertyKeys = default(IList<string>), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTradesWithHttpMessagesAsync(scope, code, fromTradeDate, toTradeDate, asAt, sortBy, start, limit, securityPropertyKeys, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add/update trades
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='trades'>
            /// The trades to be updated
            /// </param>
            public static UpsertPortfolioTradesDto UpsertTrades(this ILUSIDAPI operations, string scope, string code, IList<UpsertPortfolioTradeRequest> trades = default(IList<UpsertPortfolioTradeRequest>))
            {
                return operations.UpsertTradesAsync(scope, code, trades).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add/update trades
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='trades'>
            /// The trades to be updated
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertPortfolioTradesDto> UpsertTradesAsync(this ILUSIDAPI operations, string scope, string code, IList<UpsertPortfolioTradeRequest> trades = default(IList<UpsertPortfolioTradeRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertTradesWithHttpMessagesAsync(scope, code, trades, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete trades
            /// </summary>
            /// <remarks>
            /// Delete one or more trades from a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='id'>
            /// Ids of trades to delete
            /// </param>
            public static DeletedEntityResponse DeleteTrades(this ILUSIDAPI operations, string scope, string code, IList<string> id = default(IList<string>))
            {
                return operations.DeleteTradesAsync(scope, code, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete trades
            /// </summary>
            /// <remarks>
            /// Delete one or more trades from a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='id'>
            /// Ids of trades to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeleteTradesAsync(this ILUSIDAPI operations, string scope, string code, IList<string> id = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTradesWithHttpMessagesAsync(scope, code, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add/update trade properties
            /// </summary>
            /// <remarks>
            /// Add one or more properties to a specific trade in a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='tradeId'>
            /// Id of trade to add properties to
            /// </param>
            /// <param name='properties'>
            /// Trade properties to add
            /// </param>
            public static AddTradePropertyDto AddTradeProperty(this ILUSIDAPI operations, string scope, string code, string tradeId, IList<CreatePerpetualPropertyRequest> properties = default(IList<CreatePerpetualPropertyRequest>))
            {
                return operations.AddTradePropertyAsync(scope, code, tradeId, properties).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add/update trade properties
            /// </summary>
            /// <remarks>
            /// Add one or more properties to a specific trade in a portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='tradeId'>
            /// Id of trade to add properties to
            /// </param>
            /// <param name='properties'>
            /// Trade properties to add
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddTradePropertyDto> AddTradePropertyAsync(this ILUSIDAPI operations, string scope, string code, string tradeId, IList<CreatePerpetualPropertyRequest> properties = default(IList<CreatePerpetualPropertyRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTradePropertyWithHttpMessagesAsync(scope, code, tradeId, properties, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete trade property
            /// </summary>
            /// <remarks>
            /// Delete a property from a specific trade
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='tradeId'>
            /// Id of the trade to delete the property from
            /// </param>
            /// <param name='property'>
            /// The key of the property to be deleted
            /// </param>
            public static DeletedEntityResponse DeletePropertyFromTrade(this ILUSIDAPI operations, string scope, string code, string tradeId, string property = default(string))
            {
                return operations.DeletePropertyFromTradeAsync(scope, code, tradeId, property).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete trade property
            /// </summary>
            /// <remarks>
            /// Delete a property from a specific trade
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the portfolio
            /// </param>
            /// <param name='code'>
            /// Code for the portfolio
            /// </param>
            /// <param name='tradeId'>
            /// Id of the trade to delete the property from
            /// </param>
            /// <param name='property'>
            /// The key of the property to be deleted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePropertyFromTradeAsync(this ILUSIDAPI operations, string scope, string code, string tradeId, string property = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePropertyFromTradeWithHttpMessagesAsync(scope, code, tradeId, property, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create derived portfolio
            /// </summary>
            /// <remarks>
            /// Creates a portfolio that derives from an existing portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope into which to create the new derived portfolio
            /// </param>
            /// <param name='portfolio'>
            /// The root object of the new derived portfolio, containing a populated
            /// reference portfolio id and reference scope
            /// </param>
            public static PortfolioDto CreateDerivedPortfolio(this ILUSIDAPI operations, string scope, CreateDerivedPortfolioRequest portfolio = default(CreateDerivedPortfolioRequest))
            {
                return operations.CreateDerivedPortfolioAsync(scope, portfolio).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create derived portfolio
            /// </summary>
            /// <remarks>
            /// Creates a portfolio that derives from an existing portfolio
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope into which to create the new derived portfolio
            /// </param>
            /// <param name='portfolio'>
            /// The root object of the new derived portfolio, containing a populated
            /// reference portfolio id and reference scope
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDto> CreateDerivedPortfolioAsync(this ILUSIDAPI operations, string scope, CreateDerivedPortfolioRequest portfolio = default(CreateDerivedPortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDerivedPortfolioWithHttpMessagesAsync(scope, portfolio, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search portfolios
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListPortfolioSearchResult PortfoliosSearch(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.PortfoliosSearchAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search portfolios
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListPortfolioSearchResult> PortfoliosSearchAsync(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PortfoliosSearchWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListPropertyDefinitionDto PropertiesSearch(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.PropertiesSearchAsync(request, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListPropertyDefinitionDto> PropertiesSearchAsync(this ILUSIDAPI operations, object request = default(object), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PropertiesSearchWithHttpMessagesAsync(request, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the available property-definition domains.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ResourceListPropertyDomain GetPropertyDefinitionDomains(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetPropertyDefinitionDomainsAsync(sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the available property-definition domains.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListPropertyDomain> GetPropertyDefinitionDomainsAsync(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertyDefinitionDomainsWithHttpMessagesAsync(sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// </param>
            public static PropertyDefinitionDto CreatePropertyDefinition(this ILUSIDAPI operations, CreatePropertyDefinitionRequest definition = default(CreatePropertyDefinitionRequest))
            {
                return operations.CreatePropertyDefinitionAsync(definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDefinitionDto> CreatePropertyDefinitionAsync(this ILUSIDAPI operations, CreatePropertyDefinitionRequest definition = default(CreatePropertyDefinitionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePropertyDefinitionWithHttpMessagesAsync(definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets multiple property definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keys'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListPropertyDefinitionDto GetMultiplePropertyDefinitions(this ILUSIDAPI operations, IList<string> keys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetMultiplePropertyDefinitionsAsync(keys, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets multiple property definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keys'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListPropertyDefinitionDto> GetMultiplePropertyDefinitionsAsync(this ILUSIDAPI operations, IList<string> keys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiplePropertyDefinitionsWithHttpMessagesAsync(keys, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all available property definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListPropertyKey GetAllPropertyKeysInDomain(this ILUSIDAPI operations, string domain, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetAllPropertyKeysInDomainAsync(domain, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all available property definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListPropertyKey> GetAllPropertyKeysInDomainAsync(this ILUSIDAPI operations, string domain, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPropertyKeysInDomainWithHttpMessagesAsync(domain, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the available property-definition scopes for the specified domain.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListScope GetPropertyDefinitionScopesInDomain(this ILUSIDAPI operations, string domain, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetPropertyDefinitionScopesInDomainAsync(domain, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the available property-definition scopes for the specified domain.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListScope> GetPropertyDefinitionScopesInDomainAsync(this ILUSIDAPI operations, string domain, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertyDefinitionScopesInDomainWithHttpMessagesAsync(domain, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all properties in a scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListPropertyKey GetAllPropertyKeysInScope(this ILUSIDAPI operations, string domain, string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.GetAllPropertyKeysInScopeAsync(domain, scope, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all properties in a scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListPropertyKey> GetAllPropertyKeysInScopeAsync(this ILUSIDAPI operations, string domain, string scope, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPropertyKeysInScopeWithHttpMessagesAsync(domain, scope, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            public static PropertyDefinitionDto GetPropertyDefinition(this ILUSIDAPI operations, string domain, string scope, string name, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPropertyDefinitionAsync(domain, scope, name, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDefinitionDto> GetPropertyDefinitionAsync(this ILUSIDAPI operations, string domain, string scope, string name, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertyDefinitionWithHttpMessagesAsync(domain, scope, name, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='definition'>
            /// </param>
            public static PropertyDefinitionDto UpdatePropertyDefinition(this ILUSIDAPI operations, string domain, string scope, string name, UpdatePropertyDefinitionRequest definition = default(UpdatePropertyDefinitionRequest))
            {
                return operations.UpdatePropertyDefinitionAsync(domain, scope, name, definition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='definition'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDefinitionDto> UpdatePropertyDefinitionAsync(this ILUSIDAPI operations, string domain, string scope, string name, UpdatePropertyDefinitionRequest definition = default(UpdatePropertyDefinitionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePropertyDefinitionWithHttpMessagesAsync(domain, scope, name, definition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static DeletedEntityResponse DeletePropertyDefinition(this ILUSIDAPI operations, string domain, string scope, string name)
            {
                return operations.DeletePropertyDefinitionAsync(domain, scope, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the property definition.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domain'>
            /// Possible values include: 'Trade', 'Portfolio', 'Security', 'Holding',
            /// 'ReferenceHolding', 'TxnType'
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeletePropertyDefinitionAsync(this ILUSIDAPI operations, string domain, string scope, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePropertyDefinitionWithHttpMessagesAsync(domain, scope, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new PropertyDataFormat. Note: Only non-default formats can be
            /// created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The definition of the new format
            /// </param>
            public static PropertyDataFormatDto CreatePropertyDataFormat(this ILUSIDAPI operations, CreatePropertyDataFormatRequest request = default(CreatePropertyDataFormatRequest))
            {
                return operations.CreatePropertyDataFormatAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new PropertyDataFormat. Note: Only non-default formats can be
            /// created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// The definition of the new format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDataFormatDto> CreatePropertyDataFormatAsync(this ILUSIDAPI operations, CreatePropertyDataFormatRequest request = default(CreatePropertyDataFormatRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePropertyDataFormatWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all property data formats in the specified scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='includeDefault'>
            /// </param>
            /// <param name='includeSystem'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListPropertyDataFormatDto ListPropertyDataFormats(this ILUSIDAPI operations, string scope, bool? includeDefault = default(bool?), bool? includeSystem = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListPropertyDataFormatsAsync(scope, includeDefault, includeSystem, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all property data formats in the specified scope.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='includeDefault'>
            /// </param>
            /// <param name='includeSystem'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListPropertyDataFormatDto> ListPropertyDataFormatsAsync(this ILUSIDAPI operations, string scope, bool? includeDefault = default(bool?), bool? includeSystem = default(bool?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPropertyDataFormatsWithHttpMessagesAsync(scope, includeDefault, includeSystem, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a property data format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static PropertyDataFormatDto GetPropertyDataFormat(this ILUSIDAPI operations, string scope, string name)
            {
                return operations.GetPropertyDataFormatAsync(scope, name).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a property data format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDataFormatDto> GetPropertyDataFormatAsync(this ILUSIDAPI operations, string scope, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertyDataFormatWithHttpMessagesAsync(scope, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a PropertyDataFormat. Note: Only non-default formats can be updated.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the format being updated
            /// </param>
            /// <param name='name'>
            /// The name of the format to update
            /// </param>
            /// <param name='request'>
            /// The new definition of the format
            /// </param>
            public static PropertyDataFormatDto UpdatePropertyDataFormat(this ILUSIDAPI operations, string scope, string name, UpdatePropertyDataFormatRequest request = default(UpdatePropertyDataFormatRequest))
            {
                return operations.UpdatePropertyDataFormatAsync(scope, name, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a PropertyDataFormat. Note: Only non-default formats can be updated.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the format being updated
            /// </param>
            /// <param name='name'>
            /// The name of the format to update
            /// </param>
            /// <param name='request'>
            /// The new definition of the format
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertyDataFormatDto> UpdatePropertyDataFormatAsync(this ILUSIDAPI operations, string scope, string name, UpdatePropertyDataFormatRequest request = default(UpdatePropertyDataFormatRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePropertyDataFormatWithHttpMessagesAsync(scope, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return the definitions for the specified list of units
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='units'>
            /// </param>
            public static IUnitDefinitionDto GetUnitsFromPropertyDataFormat(this ILUSIDAPI operations, string scope, string name, IList<string> units)
            {
                return operations.GetUnitsFromPropertyDataFormatAsync(scope, name, units).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the definitions for the specified list of units
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='units'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IUnitDefinitionDto> GetUnitsFromPropertyDataFormatAsync(this ILUSIDAPI operations, string scope, string name, IList<string> units, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUnitsFromPropertyDataFormatWithHttpMessagesAsync(scope, name, units, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Perform a reconciliation between two portfolios
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ResourceListReconciliationBreakDto PerformReconciliation(this ILUSIDAPI operations, ReconciliationRequest request = default(ReconciliationRequest))
            {
                return operations.PerformReconciliationAsync(request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Perform a reconciliation between two portfolios
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListReconciliationBreakDto> PerformReconciliationAsync(this ILUSIDAPI operations, ReconciliationRequest request = default(ReconciliationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PerformReconciliationWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all reference portfolios in a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            public static ResourceListPortfolioDto ListReferencePortfolios(this ILUSIDAPI operations, string scope, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
            {
                return operations.ListReferencePortfoliosAsync(scope, effectiveAt, asAt, sortBy, start, limit, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all reference portfolios in a scope
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='filter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListPortfolioDto> ListReferencePortfoliosAsync(this ILUSIDAPI operations, string scope, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListReferencePortfoliosWithHttpMessagesAsync(scope, effectiveAt, asAt, sortBy, start, limit, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the portfolio
            /// </param>
            /// <param name='referencePortfolio'>
            /// The portfolio creation request object
            /// </param>
            public static PortfolioDto CreateReferencePortfolio(this ILUSIDAPI operations, string scope, CreatePortfolioRequest referencePortfolio = default(CreatePortfolioRequest))
            {
                return operations.CreateReferencePortfolioAsync(scope, referencePortfolio).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The intended scope of the portfolio
            /// </param>
            /// <param name='referencePortfolio'>
            /// The portfolio creation request object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PortfolioDto> CreateReferencePortfolioAsync(this ILUSIDAPI operations, string scope, CreatePortfolioRequest referencePortfolio = default(CreatePortfolioRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateReferencePortfolioWithHttpMessagesAsync(scope, referencePortfolio, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a reference portfolio by name (as opposed to id)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            public static ResourceListReferencePortfolioConstituentDto GetReferencePortfolio(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetReferencePortfolioAsync(scope, code, effectiveAt, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a reference portfolio by name (as opposed to id)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListReferencePortfolioConstituentDto> GetReferencePortfolioAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferencePortfolioWithHttpMessagesAsync(scope, code, effectiveAt, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a specific portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            public static DeletedEntityResponse DeleteReferencePortfolio(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?))
            {
                return operations.DeleteReferencePortfolioAsync(scope, code, effectiveAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a specific portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeletedEntityResponse> DeleteReferencePortfolioAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset? effectiveAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteReferencePortfolioWithHttpMessagesAsync(scope, code, effectiveAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the constituents in a reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='referencePortfolioId'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ResourceListReferencePortfolioConstituentDto GetReferencePortfolioConstituents(this ILUSIDAPI operations, string scope, System.DateTimeOffset effectiveAt, string code, string referencePortfolioId = default(string), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetReferencePortfolioConstituentsAsync(scope, effectiveAt, code, referencePortfolioId, asAt, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the constituents in a reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='referencePortfolioId'>
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListReferencePortfolioConstituentDto> GetReferencePortfolioConstituentsAsync(this ILUSIDAPI operations, string scope, System.DateTimeOffset effectiveAt, string code, string referencePortfolioId = default(string), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferencePortfolioConstituentsWithHttpMessagesAsync(scope, effectiveAt, code, referencePortfolioId, asAt, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add constituents to a specific reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='constituents'>
            /// </param>
            public static UpsertReferencePortfolioConstituentsDto UpsertReferencePortfolioConstituents(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<ReferencePortfolioConstituentDto> constituents = default(IList<ReferencePortfolioConstituentDto>))
            {
                return operations.UpsertReferencePortfolioConstituentsAsync(scope, code, effectiveAt, constituents).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add constituents to a specific reference portfolio
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='effectiveAt'>
            /// </param>
            /// <param name='constituents'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpsertReferencePortfolioConstituentsDto> UpsertReferencePortfolioConstituentsAsync(this ILUSIDAPI operations, string scope, string code, System.DateTimeOffset effectiveAt, IList<ReferencePortfolioConstituentDto> constituents = default(IList<ReferencePortfolioConstituentDto>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertReferencePortfolioConstituentsWithHttpMessagesAsync(scope, code, effectiveAt, constituents, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve some previously stored results
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data was loaded
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ResultsDto GetResults(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetResultsAsync(scope, key, date, asAt, sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve some previously stored results
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data was loaded
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultsDto> GetResultsAsync(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetResultsWithHttpMessagesAsync(scope, key, date, asAt, sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Upsert precalculated results against a specified scope/key/date combination
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data is relevant
            /// </param>
            /// <param name='request'>
            /// The results to upload
            /// </param>
            public static ResultsDto UpsertResults(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, CreateResultsRequest request = default(CreateResultsRequest))
            {
                return operations.UpsertResultsAsync(scope, key, date, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Upsert precalculated results against a specified scope/key/date combination
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='scope'>
            /// The scope of the data
            /// </param>
            /// <param name='key'>
            /// The key that identifies the data
            /// </param>
            /// <param name='date'>
            /// The date for which the data is relevant
            /// </param>
            /// <param name='request'>
            /// The results to upload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultsDto> UpsertResultsAsync(this ILUSIDAPI operations, string scope, string key, System.DateTimeOffset date, CreateResultsRequest request = default(CreateResultsRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpsertResultsWithHttpMessagesAsync(scope, key, date, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the schema for a given entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// Possible values include: 'PropertyKey', 'FieldSchema', 'Personalisation',
            /// 'Security', 'Property', 'CreatePropertyRequest',
            /// 'CreatePerpetualPropertyRequest', 'PerpetualProperty', 'Login',
            /// 'PropertyDefinition', 'PropertyDataFormat', 'AggregationResponseNode',
            /// 'Portfolio', 'CompletePortfolio', 'PortfolioSearchResult',
            /// 'PortfolioDetails', 'PortfolioProperties', 'Version', 'AddTradeProperty',
            /// 'AnalyticStore', 'AnalyticStoreKey', 'UpsertPortfolioTrades', 'Group',
            /// 'Constituent', 'Trade', 'UpsertPortfolioTradesRequest', 'PortfolioHolding',
            /// 'AdjustHolding', 'ErrorDetail', 'ErrorResponse', 'InstrumentDefinition',
            /// 'ProcessedCommand', 'CreatePortfolio', 'CreateAnalyticStore',
            /// 'CreateClientSecurity', 'CreateDerivedPortfolio', 'CreateGroup',
            /// 'CreatePropertyDataFormat', 'CreatePropertyDefinition', 'UpdatePortfolio',
            /// 'UpdateGroup', 'UpdatePropertyDataFormat', 'UpdatePropertyDefinition',
            /// 'SecurityAnalytic', 'AggregationRequest', 'Aggregation',
            /// 'NestedAggregation', 'ResultDataSchema', 'Classification',
            /// 'SecurityClassification', 'WebLogMessage', 'UpsertPersonalisation',
            /// 'CreatePortfolioDetails', 'UpsertConstituent', 'CreateResults', 'Results',
            /// 'TryAddClientSecurities', 'TryDeleteClientSecurities',
            /// 'TryLookupSecuritiesFromCodes', 'ExpandedGroup', 'CreateCorporateAction',
            /// 'CorporateAction', 'CorporateActionTransition', 'ReconciliationRequest',
            /// 'ReconciliationBreak', 'TransactionConfigurationData',
            /// 'TransactionConfigurationMovementData',
            /// 'TransactionConfigurationTypeAlias', 'TryUpsertCorporateActions',
            /// 'Iso4217CurrencyUnit', 'BasicUnit', 'CorporateActionTransitionComponent',
            /// 'TargetTaxlot', 'AdjustHoldingRequest'
            /// </param>
            public static SchemaDto GetEntitySchema(this ILUSIDAPI operations, string entity)
            {
                return operations.GetEntitySchemaAsync(entity).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the schema for a given entity.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// Possible values include: 'PropertyKey', 'FieldSchema', 'Personalisation',
            /// 'Security', 'Property', 'CreatePropertyRequest',
            /// 'CreatePerpetualPropertyRequest', 'PerpetualProperty', 'Login',
            /// 'PropertyDefinition', 'PropertyDataFormat', 'AggregationResponseNode',
            /// 'Portfolio', 'CompletePortfolio', 'PortfolioSearchResult',
            /// 'PortfolioDetails', 'PortfolioProperties', 'Version', 'AddTradeProperty',
            /// 'AnalyticStore', 'AnalyticStoreKey', 'UpsertPortfolioTrades', 'Group',
            /// 'Constituent', 'Trade', 'UpsertPortfolioTradesRequest', 'PortfolioHolding',
            /// 'AdjustHolding', 'ErrorDetail', 'ErrorResponse', 'InstrumentDefinition',
            /// 'ProcessedCommand', 'CreatePortfolio', 'CreateAnalyticStore',
            /// 'CreateClientSecurity', 'CreateDerivedPortfolio', 'CreateGroup',
            /// 'CreatePropertyDataFormat', 'CreatePropertyDefinition', 'UpdatePortfolio',
            /// 'UpdateGroup', 'UpdatePropertyDataFormat', 'UpdatePropertyDefinition',
            /// 'SecurityAnalytic', 'AggregationRequest', 'Aggregation',
            /// 'NestedAggregation', 'ResultDataSchema', 'Classification',
            /// 'SecurityClassification', 'WebLogMessage', 'UpsertPersonalisation',
            /// 'CreatePortfolioDetails', 'UpsertConstituent', 'CreateResults', 'Results',
            /// 'TryAddClientSecurities', 'TryDeleteClientSecurities',
            /// 'TryLookupSecuritiesFromCodes', 'ExpandedGroup', 'CreateCorporateAction',
            /// 'CorporateAction', 'CorporateActionTransition', 'ReconciliationRequest',
            /// 'ReconciliationBreak', 'TransactionConfigurationData',
            /// 'TransactionConfigurationMovementData',
            /// 'TransactionConfigurationTypeAlias', 'TryUpsertCorporateActions',
            /// 'Iso4217CurrencyUnit', 'BasicUnit', 'CorporateActionTransitionComponent',
            /// 'TargetTaxlot', 'AdjustHoldingRequest'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SchemaDto> GetEntitySchemaAsync(this ILUSIDAPI operations, string entity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntitySchemaWithHttpMessagesAsync(entity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the schemas for the provided list of property keys
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyKeys'>
            /// A comma delimited list of property keys in string format. e.g.
            /// "Portfolio/default/PropertyName,Portfolio/differentScope/MyProperty"
            /// </param>
            /// <param name='asAt'>
            /// </param>
            public static PropertySchemaDto GetPropertySchema(this ILUSIDAPI operations, IList<string> propertyKeys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?))
            {
                return operations.GetPropertySchemaAsync(propertyKeys, asAt).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the schemas for the provided list of property keys
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='propertyKeys'>
            /// A comma delimited list of property keys in string format. e.g.
            /// "Portfolio/default/PropertyName,Portfolio/differentScope/MyProperty"
            /// </param>
            /// <param name='asAt'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PropertySchemaDto> GetPropertySchemaAsync(this ILUSIDAPI operations, IList<string> propertyKeys = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertySchemaWithHttpMessagesAsync(propertyKeys, asAt, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the available value types that could be returned in a schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            public static ResourceListUiDataType GetValueTypes(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?))
            {
                return operations.GetValueTypesAsync(sortBy, start, limit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the available value types that could be returned in a schema
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sortBy'>
            /// </param>
            /// <param name='start'>
            /// </param>
            /// <param name='limit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceListUiDataType> GetValueTypesAsync(this ILUSIDAPI operations, IList<string> sortBy = default(IList<string>), int? start = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetValueTypesWithHttpMessagesAsync(sortBy, start, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempt to create one or more client securities. Failed securities will be
            /// identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definitions'>
            /// </param>
            public static TryAddClientSecuritiesDto BatchAddClientSecurities(this ILUSIDAPI operations, IList<CreateClientSecurityRequest> definitions = default(IList<CreateClientSecurityRequest>))
            {
                return operations.BatchAddClientSecuritiesAsync(definitions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempt to create one or more client securities. Failed securities will be
            /// identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='definitions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TryAddClientSecuritiesDto> BatchAddClientSecuritiesAsync(this ILUSIDAPI operations, IList<CreateClientSecurityRequest> definitions = default(IList<CreateClientSecurityRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchAddClientSecuritiesWithHttpMessagesAsync(definitions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attempt to delete one or more client securities. Failed securities will be
            /// identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uids'>
            /// </param>
            public static TryDeleteClientSecuritiesDto BatchDeleteClientSecurities(this ILUSIDAPI operations, IList<string> uids = default(IList<string>))
            {
                return operations.BatchDeleteClientSecuritiesAsync(uids).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attempt to delete one or more client securities. Failed securities will be
            /// identified in the body of the response.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uids'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TryDeleteClientSecuritiesDto> BatchDeleteClientSecuritiesAsync(this ILUSIDAPI operations, IList<string> uids = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BatchDeleteClientSecuritiesWithHttpMessagesAsync(uids, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an individual security by the unique security uid.  Optionally,
            /// decorate each security with specific properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uid'>
            /// The uid of the requested security
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='propertyKeys'>
            /// Keys of the properties to be retrieved
            /// </param>
            public static SecurityDto GetSecurity(this ILUSIDAPI operations, string uid, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyKeys = default(IList<string>))
            {
                return operations.GetSecurityAsync(uid, asAt, propertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an individual security by the unique security uid.  Optionally,
            /// decorate each security with specific properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='uid'>
            /// The uid of the requested security
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='propertyKeys'>
            /// Keys of the properties to be retrieved
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SecurityDto> GetSecurityAsync(this ILUSIDAPI operations, string uid, System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSecurityWithHttpMessagesAsync(uid, asAt, propertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lookup more than one security by supplying a collection of non-Finbourne
            /// codes.  Optionally, decorate each security with specific properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeType'>
            /// The type of identifier. Possible values include: 'Undefined',
            /// 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip', 'ClientInternal',
            /// 'Figi', 'CompositeFigi', 'ShareClassFigi', 'Wertpapier'
            /// </param>
            /// <param name='codes'>
            /// An array of codes
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='propertyKeys'>
            /// Keys of the properties to be retrieved
            /// </param>
            public static TryLookupSecuritiesFromCodesDto LookupSecuritiesFromCodes(this ILUSIDAPI operations, string codeType, IList<string> codes = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyKeys = default(IList<string>))
            {
                return operations.LookupSecuritiesFromCodesAsync(codeType, codes, asAt, propertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lookup more than one security by supplying a collection of non-Finbourne
            /// codes.  Optionally, decorate each security with specific properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeType'>
            /// The type of identifier. Possible values include: 'Undefined',
            /// 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip', 'ClientInternal',
            /// 'Figi', 'CompositeFigi', 'ShareClassFigi', 'Wertpapier'
            /// </param>
            /// <param name='codes'>
            /// An array of codes
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='propertyKeys'>
            /// Keys of the properties to be retrieved
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TryLookupSecuritiesFromCodesDto> LookupSecuritiesFromCodesAsync(this ILUSIDAPI operations, string codeType, IList<string> codes = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LookupSecuritiesFromCodesWithHttpMessagesAsync(codeType, codes, asAt, propertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lookup a large number of securities by supplying a collection of
            /// non-Finbourne codes.  Optionally, decorate each security with specific
            /// properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeType'>
            /// The type of identifier. Possible values include: 'Undefined',
            /// 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip', 'ClientInternal',
            /// 'Figi', 'CompositeFigi', 'ShareClassFigi', 'Wertpapier'
            /// </param>
            /// <param name='codes'>
            /// An array of codes
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='propertyKeys'>
            /// Keys of the properties to be retrieved
            /// </param>
            public static TryLookupSecuritiesFromCodesDto LookupSecuritiesFromCodesBulk(this ILUSIDAPI operations, string codeType, IList<string> codes = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyKeys = default(IList<string>))
            {
                return operations.LookupSecuritiesFromCodesBulkAsync(codeType, codes, asAt, propertyKeys).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lookup a large number of securities by supplying a collection of
            /// non-Finbourne codes.  Optionally, decorate each security with specific
            /// properties.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='codeType'>
            /// The type of identifier. Possible values include: 'Undefined',
            /// 'ReutersAssetId', 'CINS', 'Isin', 'Sedol', 'Cusip', 'ClientInternal',
            /// 'Figi', 'CompositeFigi', 'ShareClassFigi', 'Wertpapier'
            /// </param>
            /// <param name='codes'>
            /// An array of codes
            /// </param>
            /// <param name='asAt'>
            /// As at date
            /// </param>
            /// <param name='propertyKeys'>
            /// Keys of the properties to be retrieved
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TryLookupSecuritiesFromCodesDto> LookupSecuritiesFromCodesBulkAsync(this ILUSIDAPI operations, string codeType, IList<string> codes = default(IList<string>), System.DateTimeOffset? asAt = default(System.DateTimeOffset?), IList<string> propertyKeys = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LookupSecuritiesFromCodesBulkWithHttpMessagesAsync(codeType, codes, asAt, propertyKeys, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
