/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ReferenceData
    /// </summary>
    [DataContract(Name = "ReferenceData")]
    public partial class ReferenceData : IEquatable<ReferenceData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferenceData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferenceData" /> class.
        /// </summary>
        /// <param name="fieldDefinitions">fieldDefinitions (required).</param>
        /// <param name="values">values (required).</param>
        public ReferenceData(List<FieldDefinition> fieldDefinitions = default(List<FieldDefinition>), List<FieldValue> values = default(List<FieldValue>))
        {
            // to ensure "fieldDefinitions" is required (not null)
            if (fieldDefinitions == null)
            {
                throw new ArgumentNullException("fieldDefinitions is a required property for ReferenceData and cannot be null");
            }
            this.FieldDefinitions = fieldDefinitions;
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new ArgumentNullException("values is a required property for ReferenceData and cannot be null");
            }
            this.Values = values;
        }

        /// <summary>
        /// Gets or Sets FieldDefinitions
        /// </summary>
        [DataMember(Name = "fieldDefinitions", IsRequired = true, EmitDefaultValue = true)]
        public List<FieldDefinition> FieldDefinitions { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", IsRequired = true, EmitDefaultValue = true)]
        public List<FieldValue> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReferenceData {\n");
            sb.Append("  FieldDefinitions: ").Append(FieldDefinitions).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferenceData);
        }

        /// <summary>
        /// Returns true if ReferenceData instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferenceData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferenceData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldDefinitions == input.FieldDefinitions ||
                    this.FieldDefinitions != null &&
                    input.FieldDefinitions != null &&
                    this.FieldDefinitions.SequenceEqual(input.FieldDefinitions)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldDefinitions != null)
                {
                    hashCode = (hashCode * 59) + this.FieldDefinitions.GetHashCode();
                }
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
