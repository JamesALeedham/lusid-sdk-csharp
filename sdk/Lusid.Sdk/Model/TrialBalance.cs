/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A TrialBalance entity.
    /// </summary>
    [DataContract(Name = "TrialBalance")]
    public partial class TrialBalance : IEquatable<TrialBalance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrialBalance" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TrialBalance() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrialBalance" /> class.
        /// </summary>
        /// <param name="generalLedgerAccountCode">The Account code that the trial balance results have been grouped against (required).</param>
        /// <param name="description">The description of the record.</param>
        /// <param name="levels">The levels that have been derived from the specified General Ledger Profile (required).</param>
        /// <param name="accountType">The account type attributed to the record (required).</param>
        /// <param name="opening">The opening balance at the start of the period (required).</param>
        /// <param name="closing">The closing balance at the end of the period (required).</param>
        /// <param name="debit">All debits that occured in the period (required).</param>
        /// <param name="credit">All credits that occured in the period (required).</param>
        /// <param name="properties">Properties found on the mapped &#39;Account&#39;, as specified in request.</param>
        /// <param name="links">links.</param>
        public TrialBalance(string generalLedgerAccountCode = default(string), string description = default(string), List<string> levels = default(List<string>), string accountType = default(string), decimal opening = default(decimal), decimal closing = default(decimal), decimal debit = default(decimal), decimal credit = default(decimal), Dictionary<string, Property> properties = default(Dictionary<string, Property>), List<Link> links = default(List<Link>))
        {
            // to ensure "generalLedgerAccountCode" is required (not null)
            if (generalLedgerAccountCode == null)
            {
                throw new ArgumentNullException("generalLedgerAccountCode is a required property for TrialBalance and cannot be null");
            }
            this.GeneralLedgerAccountCode = generalLedgerAccountCode;
            // to ensure "levels" is required (not null)
            if (levels == null)
            {
                throw new ArgumentNullException("levels is a required property for TrialBalance and cannot be null");
            }
            this.Levels = levels;
            // to ensure "accountType" is required (not null)
            if (accountType == null)
            {
                throw new ArgumentNullException("accountType is a required property for TrialBalance and cannot be null");
            }
            this.AccountType = accountType;
            this.Opening = opening;
            this.Closing = closing;
            this.Debit = debit;
            this.Credit = credit;
            this.Description = description;
            this.Properties = properties;
            this.Links = links;
        }

        /// <summary>
        /// The Account code that the trial balance results have been grouped against
        /// </summary>
        /// <value>The Account code that the trial balance results have been grouped against</value>
        [DataMember(Name = "generalLedgerAccountCode", IsRequired = true, EmitDefaultValue = true)]
        public string GeneralLedgerAccountCode { get; set; }

        /// <summary>
        /// The description of the record
        /// </summary>
        /// <value>The description of the record</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The levels that have been derived from the specified General Ledger Profile
        /// </summary>
        /// <value>The levels that have been derived from the specified General Ledger Profile</value>
        [DataMember(Name = "levels", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Levels { get; set; }

        /// <summary>
        /// The account type attributed to the record
        /// </summary>
        /// <value>The account type attributed to the record</value>
        [DataMember(Name = "accountType", IsRequired = true, EmitDefaultValue = true)]
        public string AccountType { get; set; }

        /// <summary>
        /// The opening balance at the start of the period
        /// </summary>
        /// <value>The opening balance at the start of the period</value>
        [DataMember(Name = "opening", IsRequired = true, EmitDefaultValue = true)]
        public decimal Opening { get; set; }

        /// <summary>
        /// The closing balance at the end of the period
        /// </summary>
        /// <value>The closing balance at the end of the period</value>
        [DataMember(Name = "closing", IsRequired = true, EmitDefaultValue = true)]
        public decimal Closing { get; set; }

        /// <summary>
        /// All debits that occured in the period
        /// </summary>
        /// <value>All debits that occured in the period</value>
        [DataMember(Name = "debit", IsRequired = true, EmitDefaultValue = true)]
        public decimal Debit { get; set; }

        /// <summary>
        /// All credits that occured in the period
        /// </summary>
        /// <value>All credits that occured in the period</value>
        [DataMember(Name = "credit", IsRequired = true, EmitDefaultValue = true)]
        public decimal Credit { get; set; }

        /// <summary>
        /// Properties found on the mapped &#39;Account&#39;, as specified in request
        /// </summary>
        /// <value>Properties found on the mapped &#39;Account&#39;, as specified in request</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, Property> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrialBalance {\n");
            sb.Append("  GeneralLedgerAccountCode: ").Append(GeneralLedgerAccountCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Levels: ").Append(Levels).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  Opening: ").Append(Opening).Append("\n");
            sb.Append("  Closing: ").Append(Closing).Append("\n");
            sb.Append("  Debit: ").Append(Debit).Append("\n");
            sb.Append("  Credit: ").Append(Credit).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrialBalance);
        }

        /// <summary>
        /// Returns true if TrialBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of TrialBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrialBalance input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GeneralLedgerAccountCode == input.GeneralLedgerAccountCode ||
                    (this.GeneralLedgerAccountCode != null &&
                    this.GeneralLedgerAccountCode.Equals(input.GeneralLedgerAccountCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Levels == input.Levels ||
                    this.Levels != null &&
                    input.Levels != null &&
                    this.Levels.SequenceEqual(input.Levels)
                ) && 
                (
                    this.AccountType == input.AccountType ||
                    (this.AccountType != null &&
                    this.AccountType.Equals(input.AccountType))
                ) && 
                (
                    this.Opening == input.Opening ||
                    this.Opening.Equals(input.Opening)
                ) && 
                (
                    this.Closing == input.Closing ||
                    this.Closing.Equals(input.Closing)
                ) && 
                (
                    this.Debit == input.Debit ||
                    this.Debit.Equals(input.Debit)
                ) && 
                (
                    this.Credit == input.Credit ||
                    this.Credit.Equals(input.Credit)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GeneralLedgerAccountCode != null)
                {
                    hashCode = (hashCode * 59) + this.GeneralLedgerAccountCode.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Levels != null)
                {
                    hashCode = (hashCode * 59) + this.Levels.GetHashCode();
                }
                if (this.AccountType != null)
                {
                    hashCode = (hashCode * 59) + this.AccountType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Opening.GetHashCode();
                hashCode = (hashCode * 59) + this.Closing.GetHashCode();
                hashCode = (hashCode * 59) + this.Debit.GetHashCode();
                hashCode = (hashCode * 59) + this.Credit.GetHashCode();
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // GeneralLedgerAccountCode (string) minLength
            if (this.GeneralLedgerAccountCode != null && this.GeneralLedgerAccountCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GeneralLedgerAccountCode, length must be greater than 1.", new [] { "GeneralLedgerAccountCode" });
            }

            // AccountType (string) minLength
            if (this.AccountType != null && this.AccountType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountType, length must be greater than 1.", new [] { "AccountType" });
            }

            yield break;
        }
    }
}
