/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Specification class consisting of parameters for BucketedCashFlow endpoint.
    /// </summary>
    [DataContract(Name = "BucketedCashFlowRequest")]
    public partial class BucketedCashFlowRequest : IEquatable<BucketedCashFlowRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BucketedCashFlowRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BucketedCashFlowRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BucketedCashFlowRequest" /> class.
        /// </summary>
        /// <param name="roundingMethod">When bucketing, there is not a unique way to allocate the bucket points.  RoundingMethod Supported string (enumeration) values are: [RoundDown, RoundUp]. (required).</param>
        /// <param name="bucketingDates">A list of dates to perform cashflow bucketing upon.  If this is provided, the list of tenors for bucketing should be empty..</param>
        /// <param name="bucketTenors">A list of tenors to perform cashflow bucketing upon.  If this is provided, the list of dates for bucketing should be empty..</param>
        /// <param name="effectiveAt">The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.  This determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.  For example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt  is before the start of the range they are forward looking and will be expectations assuming the model supports that.  There is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today..</param>
        /// <param name="windowStart">The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  There is no lower bound if this is not specified..</param>
        /// <param name="windowEnd">The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  The upper bound defaults to &#39;today&#39; if it is not specified.</param>
        /// <param name="recipeId">recipeId.</param>
        /// <param name="reportCurrency">Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries..</param>
        /// <param name="groupBy">The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping  that reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out..</param>
        /// <param name="addresses">The set of items that the user wishes to see in the results. If empty, will be defaulted to standard ones..</param>
        /// <param name="equipWithSubtotals">Flag directing the Valuation call to populate the results with subtotals of aggregates..</param>
        /// <param name="asAt">The time of the system at which to query for bucketed cashflows..</param>
        /// <param name="excludeUnsettledTrades">Flag directing the Valuation call to exclude cashflows from unsettled trades.  If absent or set to false, cashflows will returned based on trade date - more specifically, cashflows from any unsettled trades will be included in the results. If set to true, unsettled trades will be excluded from the result set..</param>
        /// <param name="cashFlowType">Indicate the requested cash flow representation InstrumentCashFlows or PortfolioCashFlows (GetCashLadder uses this)  Options: [InstrumentCashFlow, PortfolioCashFlow].</param>
        /// <param name="bucketingSchedule">bucketingSchedule.</param>
        public BucketedCashFlowRequest(string roundingMethod = default(string), List<DateTimeOffset> bucketingDates = default(List<DateTimeOffset>), List<string> bucketTenors = default(List<string>), string effectiveAt = default(string), string windowStart = default(string), string windowEnd = default(string), ResourceId recipeId = default(ResourceId), string reportCurrency = default(string), List<string> groupBy = default(List<string>), List<string> addresses = default(List<string>), bool equipWithSubtotals = default(bool), DateTimeOffset? asAt = default(DateTimeOffset?), bool excludeUnsettledTrades = default(bool), string cashFlowType = default(string), BucketingSchedule bucketingSchedule = default(BucketingSchedule))
        {
            // to ensure "roundingMethod" is required (not null)
            if (roundingMethod == null)
            {
                throw new ArgumentNullException("roundingMethod is a required property for BucketedCashFlowRequest and cannot be null");
            }
            this.RoundingMethod = roundingMethod;
            this.BucketingDates = bucketingDates;
            this.BucketTenors = bucketTenors;
            this.EffectiveAt = effectiveAt;
            this.WindowStart = windowStart;
            this.WindowEnd = windowEnd;
            this.RecipeId = recipeId;
            this.ReportCurrency = reportCurrency;
            this.GroupBy = groupBy;
            this.Addresses = addresses;
            this.EquipWithSubtotals = equipWithSubtotals;
            this.AsAt = asAt;
            this.ExcludeUnsettledTrades = excludeUnsettledTrades;
            this.CashFlowType = cashFlowType;
            this.BucketingSchedule = bucketingSchedule;
        }

        /// <summary>
        /// When bucketing, there is not a unique way to allocate the bucket points.  RoundingMethod Supported string (enumeration) values are: [RoundDown, RoundUp].
        /// </summary>
        /// <value>When bucketing, there is not a unique way to allocate the bucket points.  RoundingMethod Supported string (enumeration) values are: [RoundDown, RoundUp].</value>
        [DataMember(Name = "roundingMethod", IsRequired = true, EmitDefaultValue = true)]
        public string RoundingMethod { get; set; }

        /// <summary>
        /// A list of dates to perform cashflow bucketing upon.  If this is provided, the list of tenors for bucketing should be empty.
        /// </summary>
        /// <value>A list of dates to perform cashflow bucketing upon.  If this is provided, the list of tenors for bucketing should be empty.</value>
        [DataMember(Name = "bucketingDates", EmitDefaultValue = true)]
        public List<DateTimeOffset> BucketingDates { get; set; }

        /// <summary>
        /// A list of tenors to perform cashflow bucketing upon.  If this is provided, the list of dates for bucketing should be empty.
        /// </summary>
        /// <value>A list of tenors to perform cashflow bucketing upon.  If this is provided, the list of dates for bucketing should be empty.</value>
        [DataMember(Name = "bucketTenors", EmitDefaultValue = true)]
        public List<string> BucketTenors { get; set; }

        /// <summary>
        /// The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.  This determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.  For example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt  is before the start of the range they are forward looking and will be expectations assuming the model supports that.  There is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.
        /// </summary>
        /// <value>The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.  This determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.  For example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt  is before the start of the range they are forward looking and will be expectations assuming the model supports that.  There is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.</value>
        [DataMember(Name = "effectiveAt", EmitDefaultValue = true)]
        public string EffectiveAt { get; set; }

        /// <summary>
        /// The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  There is no lower bound if this is not specified.
        /// </summary>
        /// <value>The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  There is no lower bound if this is not specified.</value>
        [DataMember(Name = "windowStart", EmitDefaultValue = true)]
        public string WindowStart { get; set; }

        /// <summary>
        /// The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  The upper bound defaults to &#39;today&#39; if it is not specified
        /// </summary>
        /// <value>The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  The upper bound defaults to &#39;today&#39; if it is not specified</value>
        [DataMember(Name = "windowEnd", EmitDefaultValue = true)]
        public string WindowEnd { get; set; }

        /// <summary>
        /// Gets or Sets RecipeId
        /// </summary>
        [DataMember(Name = "recipeId", EmitDefaultValue = false)]
        public ResourceId RecipeId { get; set; }

        /// <summary>
        /// Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.
        /// </summary>
        /// <value>Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.</value>
        [DataMember(Name = "reportCurrency", EmitDefaultValue = true)]
        public string ReportCurrency { get; set; }

        /// <summary>
        /// The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping  that reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.
        /// </summary>
        /// <value>The set of items by which to perform grouping. This primarily matters when one or more of the metric operators is a mapping  that reduces set size, e.g. sum or proportion. The group-by statement determines the set of keys by which to break the results out.</value>
        [DataMember(Name = "groupBy", EmitDefaultValue = true)]
        public List<string> GroupBy { get; set; }

        /// <summary>
        /// The set of items that the user wishes to see in the results. If empty, will be defaulted to standard ones.
        /// </summary>
        /// <value>The set of items that the user wishes to see in the results. If empty, will be defaulted to standard ones.</value>
        [DataMember(Name = "addresses", EmitDefaultValue = true)]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// Flag directing the Valuation call to populate the results with subtotals of aggregates.
        /// </summary>
        /// <value>Flag directing the Valuation call to populate the results with subtotals of aggregates.</value>
        [DataMember(Name = "equipWithSubtotals", EmitDefaultValue = true)]
        public bool EquipWithSubtotals { get; set; }

        /// <summary>
        /// The time of the system at which to query for bucketed cashflows.
        /// </summary>
        /// <value>The time of the system at which to query for bucketed cashflows.</value>
        [DataMember(Name = "asAt", EmitDefaultValue = true)]
        public DateTimeOffset? AsAt { get; set; }

        /// <summary>
        /// Flag directing the Valuation call to exclude cashflows from unsettled trades.  If absent or set to false, cashflows will returned based on trade date - more specifically, cashflows from any unsettled trades will be included in the results. If set to true, unsettled trades will be excluded from the result set.
        /// </summary>
        /// <value>Flag directing the Valuation call to exclude cashflows from unsettled trades.  If absent or set to false, cashflows will returned based on trade date - more specifically, cashflows from any unsettled trades will be included in the results. If set to true, unsettled trades will be excluded from the result set.</value>
        [DataMember(Name = "excludeUnsettledTrades", EmitDefaultValue = true)]
        public bool ExcludeUnsettledTrades { get; set; }

        /// <summary>
        /// Indicate the requested cash flow representation InstrumentCashFlows or PortfolioCashFlows (GetCashLadder uses this)  Options: [InstrumentCashFlow, PortfolioCashFlow]
        /// </summary>
        /// <value>Indicate the requested cash flow representation InstrumentCashFlows or PortfolioCashFlows (GetCashLadder uses this)  Options: [InstrumentCashFlow, PortfolioCashFlow]</value>
        [DataMember(Name = "cashFlowType", EmitDefaultValue = true)]
        public string CashFlowType { get; set; }

        /// <summary>
        /// Gets or Sets BucketingSchedule
        /// </summary>
        [DataMember(Name = "bucketingSchedule", EmitDefaultValue = false)]
        public BucketingSchedule BucketingSchedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BucketedCashFlowRequest {\n");
            sb.Append("  RoundingMethod: ").Append(RoundingMethod).Append("\n");
            sb.Append("  BucketingDates: ").Append(BucketingDates).Append("\n");
            sb.Append("  BucketTenors: ").Append(BucketTenors).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  WindowStart: ").Append(WindowStart).Append("\n");
            sb.Append("  WindowEnd: ").Append(WindowEnd).Append("\n");
            sb.Append("  RecipeId: ").Append(RecipeId).Append("\n");
            sb.Append("  ReportCurrency: ").Append(ReportCurrency).Append("\n");
            sb.Append("  GroupBy: ").Append(GroupBy).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  EquipWithSubtotals: ").Append(EquipWithSubtotals).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("  ExcludeUnsettledTrades: ").Append(ExcludeUnsettledTrades).Append("\n");
            sb.Append("  CashFlowType: ").Append(CashFlowType).Append("\n");
            sb.Append("  BucketingSchedule: ").Append(BucketingSchedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BucketedCashFlowRequest);
        }

        /// <summary>
        /// Returns true if BucketedCashFlowRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BucketedCashFlowRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BucketedCashFlowRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RoundingMethod == input.RoundingMethod ||
                    (this.RoundingMethod != null &&
                    this.RoundingMethod.Equals(input.RoundingMethod))
                ) && 
                (
                    this.BucketingDates == input.BucketingDates ||
                    this.BucketingDates != null &&
                    input.BucketingDates != null &&
                    this.BucketingDates.SequenceEqual(input.BucketingDates)
                ) && 
                (
                    this.BucketTenors == input.BucketTenors ||
                    this.BucketTenors != null &&
                    input.BucketTenors != null &&
                    this.BucketTenors.SequenceEqual(input.BucketTenors)
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.WindowStart == input.WindowStart ||
                    (this.WindowStart != null &&
                    this.WindowStart.Equals(input.WindowStart))
                ) && 
                (
                    this.WindowEnd == input.WindowEnd ||
                    (this.WindowEnd != null &&
                    this.WindowEnd.Equals(input.WindowEnd))
                ) && 
                (
                    this.RecipeId == input.RecipeId ||
                    (this.RecipeId != null &&
                    this.RecipeId.Equals(input.RecipeId))
                ) && 
                (
                    this.ReportCurrency == input.ReportCurrency ||
                    (this.ReportCurrency != null &&
                    this.ReportCurrency.Equals(input.ReportCurrency))
                ) && 
                (
                    this.GroupBy == input.GroupBy ||
                    this.GroupBy != null &&
                    input.GroupBy != null &&
                    this.GroupBy.SequenceEqual(input.GroupBy)
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.EquipWithSubtotals == input.EquipWithSubtotals ||
                    this.EquipWithSubtotals.Equals(input.EquipWithSubtotals)
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                ) && 
                (
                    this.ExcludeUnsettledTrades == input.ExcludeUnsettledTrades ||
                    this.ExcludeUnsettledTrades.Equals(input.ExcludeUnsettledTrades)
                ) && 
                (
                    this.CashFlowType == input.CashFlowType ||
                    (this.CashFlowType != null &&
                    this.CashFlowType.Equals(input.CashFlowType))
                ) && 
                (
                    this.BucketingSchedule == input.BucketingSchedule ||
                    (this.BucketingSchedule != null &&
                    this.BucketingSchedule.Equals(input.BucketingSchedule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RoundingMethod != null)
                {
                    hashCode = (hashCode * 59) + this.RoundingMethod.GetHashCode();
                }
                if (this.BucketingDates != null)
                {
                    hashCode = (hashCode * 59) + this.BucketingDates.GetHashCode();
                }
                if (this.BucketTenors != null)
                {
                    hashCode = (hashCode * 59) + this.BucketTenors.GetHashCode();
                }
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.WindowStart != null)
                {
                    hashCode = (hashCode * 59) + this.WindowStart.GetHashCode();
                }
                if (this.WindowEnd != null)
                {
                    hashCode = (hashCode * 59) + this.WindowEnd.GetHashCode();
                }
                if (this.RecipeId != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeId.GetHashCode();
                }
                if (this.ReportCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.ReportCurrency.GetHashCode();
                }
                if (this.GroupBy != null)
                {
                    hashCode = (hashCode * 59) + this.GroupBy.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EquipWithSubtotals.GetHashCode();
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExcludeUnsettledTrades.GetHashCode();
                if (this.CashFlowType != null)
                {
                    hashCode = (hashCode * 59) + this.CashFlowType.GetHashCode();
                }
                if (this.BucketingSchedule != null)
                {
                    hashCode = (hashCode * 59) + this.BucketingSchedule.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RoundingMethod (string) minLength
            if (this.RoundingMethod != null && this.RoundingMethod.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RoundingMethod, length must be greater than 1.", new [] { "RoundingMethod" });
            }

            // ReportCurrency (string) maxLength
            if (this.ReportCurrency != null && this.ReportCurrency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReportCurrency, length must be less than 3.", new [] { "ReportCurrency" });
            }

            // ReportCurrency (string) minLength
            if (this.ReportCurrency != null && this.ReportCurrency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReportCurrency, length must be greater than 0.", new [] { "ReportCurrency" });
            }

            yield break;
        }
    }
}
