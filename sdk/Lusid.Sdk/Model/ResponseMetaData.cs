/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Metadata related to an api response
    /// </summary>
    [DataContract(Name = "ResponseMetaData")]
    public partial class ResponseMetaData : IEquatable<ResponseMetaData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseMetaData" /> class.
        /// </summary>
        /// <param name="type">The type of meta data information being provided.</param>
        /// <param name="description">The description of what occured for this specific piece of meta data.</param>
        /// <param name="identifierType">The type of the listed identifiers.</param>
        /// <param name="identifiers">The related identifiers that were impacted by this event.</param>
        public ResponseMetaData(string type = default(string), string description = default(string), string identifierType = default(string), List<string> identifiers = default(List<string>))
        {
            this.Type = type;
            this.Description = description;
            this.IdentifierType = identifierType;
            this.Identifiers = identifiers;
        }

        /// <summary>
        /// The type of meta data information being provided
        /// </summary>
        /// <value>The type of meta data information being provided</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The description of what occured for this specific piece of meta data
        /// </summary>
        /// <value>The description of what occured for this specific piece of meta data</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The type of the listed identifiers
        /// </summary>
        /// <value>The type of the listed identifiers</value>
        [DataMember(Name = "identifierType", EmitDefaultValue = true)]
        public string IdentifierType { get; set; }

        /// <summary>
        /// The related identifiers that were impacted by this event
        /// </summary>
        /// <value>The related identifiers that were impacted by this event</value>
        [DataMember(Name = "identifiers", EmitDefaultValue = true)]
        public List<string> Identifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseMetaData {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IdentifierType: ").Append(IdentifierType).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseMetaData);
        }

        /// <summary>
        /// Returns true if ResponseMetaData instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseMetaData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseMetaData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IdentifierType == input.IdentifierType ||
                    (this.IdentifierType != null &&
                    this.IdentifierType.Equals(input.IdentifierType))
                ) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.IdentifierType != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierType.GetHashCode();
                }
                if (this.Identifiers != null)
                {
                    hashCode = (hashCode * 59) + this.Identifiers.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
