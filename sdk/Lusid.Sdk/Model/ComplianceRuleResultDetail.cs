/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ComplianceRuleResultDetail
    /// </summary>
    [DataContract(Name = "ComplianceRuleResultDetail")]
    public partial class ComplianceRuleResultDetail : IEquatable<ComplianceRuleResultDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceRuleResultDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComplianceRuleResultDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceRuleResultDetail" /> class.
        /// </summary>
        /// <param name="ruleId">ruleId (required).</param>
        /// <param name="affectedPortfoliosDetails">affectedPortfoliosDetails (required).</param>
        /// <param name="affectedOrders">affectedOrders (required).</param>
        /// <param name="templateId">templateId (required).</param>
        /// <param name="templateDescription">templateDescription (required).</param>
        /// <param name="templateVariation">templateVariation (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="ruleName">ruleName (required).</param>
        /// <param name="ruleDescription">ruleDescription (required).</param>
        /// <param name="outcome">outcome (required).</param>
        public ComplianceRuleResultDetail(ResourceId ruleId = default(ResourceId), List<ComplianceRuleResultPortfolioDetail> affectedPortfoliosDetails = default(List<ComplianceRuleResultPortfolioDetail>), List<ResourceId> affectedOrders = default(List<ResourceId>), ResourceId templateId = default(ResourceId), string templateDescription = default(string), string templateVariation = default(string), string status = default(string), string ruleName = default(string), string ruleDescription = default(string), string outcome = default(string))
        {
            // to ensure "ruleId" is required (not null)
            if (ruleId == null)
            {
                throw new ArgumentNullException("ruleId is a required property for ComplianceRuleResultDetail and cannot be null");
            }
            this.RuleId = ruleId;
            // to ensure "affectedPortfoliosDetails" is required (not null)
            if (affectedPortfoliosDetails == null)
            {
                throw new ArgumentNullException("affectedPortfoliosDetails is a required property for ComplianceRuleResultDetail and cannot be null");
            }
            this.AffectedPortfoliosDetails = affectedPortfoliosDetails;
            // to ensure "affectedOrders" is required (not null)
            if (affectedOrders == null)
            {
                throw new ArgumentNullException("affectedOrders is a required property for ComplianceRuleResultDetail and cannot be null");
            }
            this.AffectedOrders = affectedOrders;
            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new ArgumentNullException("templateId is a required property for ComplianceRuleResultDetail and cannot be null");
            }
            this.TemplateId = templateId;
            // to ensure "templateDescription" is required (not null)
            if (templateDescription == null)
            {
                throw new ArgumentNullException("templateDescription is a required property for ComplianceRuleResultDetail and cannot be null");
            }
            this.TemplateDescription = templateDescription;
            // to ensure "templateVariation" is required (not null)
            if (templateVariation == null)
            {
                throw new ArgumentNullException("templateVariation is a required property for ComplianceRuleResultDetail and cannot be null");
            }
            this.TemplateVariation = templateVariation;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ComplianceRuleResultDetail and cannot be null");
            }
            this.Status = status;
            // to ensure "ruleName" is required (not null)
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName is a required property for ComplianceRuleResultDetail and cannot be null");
            }
            this.RuleName = ruleName;
            // to ensure "ruleDescription" is required (not null)
            if (ruleDescription == null)
            {
                throw new ArgumentNullException("ruleDescription is a required property for ComplianceRuleResultDetail and cannot be null");
            }
            this.RuleDescription = ruleDescription;
            // to ensure "outcome" is required (not null)
            if (outcome == null)
            {
                throw new ArgumentNullException("outcome is a required property for ComplianceRuleResultDetail and cannot be null");
            }
            this.Outcome = outcome;
        }

        /// <summary>
        /// Gets or Sets RuleId
        /// </summary>
        [DataMember(Name = "ruleId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId RuleId { get; set; }

        /// <summary>
        /// Gets or Sets AffectedPortfoliosDetails
        /// </summary>
        [DataMember(Name = "affectedPortfoliosDetails", IsRequired = true, EmitDefaultValue = true)]
        public List<ComplianceRuleResultPortfolioDetail> AffectedPortfoliosDetails { get; set; }

        /// <summary>
        /// Gets or Sets AffectedOrders
        /// </summary>
        [DataMember(Name = "affectedOrders", IsRequired = true, EmitDefaultValue = true)]
        public List<ResourceId> AffectedOrders { get; set; }

        /// <summary>
        /// Gets or Sets TemplateId
        /// </summary>
        [DataMember(Name = "templateId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId TemplateId { get; set; }

        /// <summary>
        /// Gets or Sets TemplateDescription
        /// </summary>
        [DataMember(Name = "templateDescription", IsRequired = true, EmitDefaultValue = true)]
        public string TemplateDescription { get; set; }

        /// <summary>
        /// Gets or Sets TemplateVariation
        /// </summary>
        [DataMember(Name = "templateVariation", IsRequired = true, EmitDefaultValue = true)]
        public string TemplateVariation { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets RuleName
        /// </summary>
        [DataMember(Name = "ruleName", IsRequired = true, EmitDefaultValue = true)]
        public string RuleName { get; set; }

        /// <summary>
        /// Gets or Sets RuleDescription
        /// </summary>
        [DataMember(Name = "ruleDescription", IsRequired = true, EmitDefaultValue = true)]
        public string RuleDescription { get; set; }

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name = "outcome", IsRequired = true, EmitDefaultValue = true)]
        public string Outcome { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComplianceRuleResultDetail {\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  AffectedPortfoliosDetails: ").Append(AffectedPortfoliosDetails).Append("\n");
            sb.Append("  AffectedOrders: ").Append(AffectedOrders).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  TemplateDescription: ").Append(TemplateDescription).Append("\n");
            sb.Append("  TemplateVariation: ").Append(TemplateVariation).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RuleName: ").Append(RuleName).Append("\n");
            sb.Append("  RuleDescription: ").Append(RuleDescription).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComplianceRuleResultDetail);
        }

        /// <summary>
        /// Returns true if ComplianceRuleResultDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ComplianceRuleResultDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComplianceRuleResultDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.AffectedPortfoliosDetails == input.AffectedPortfoliosDetails ||
                    this.AffectedPortfoliosDetails != null &&
                    input.AffectedPortfoliosDetails != null &&
                    this.AffectedPortfoliosDetails.SequenceEqual(input.AffectedPortfoliosDetails)
                ) && 
                (
                    this.AffectedOrders == input.AffectedOrders ||
                    this.AffectedOrders != null &&
                    input.AffectedOrders != null &&
                    this.AffectedOrders.SequenceEqual(input.AffectedOrders)
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.TemplateDescription == input.TemplateDescription ||
                    (this.TemplateDescription != null &&
                    this.TemplateDescription.Equals(input.TemplateDescription))
                ) && 
                (
                    this.TemplateVariation == input.TemplateVariation ||
                    (this.TemplateVariation != null &&
                    this.TemplateVariation.Equals(input.TemplateVariation))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.RuleName == input.RuleName ||
                    (this.RuleName != null &&
                    this.RuleName.Equals(input.RuleName))
                ) && 
                (
                    this.RuleDescription == input.RuleDescription ||
                    (this.RuleDescription != null &&
                    this.RuleDescription.Equals(input.RuleDescription))
                ) && 
                (
                    this.Outcome == input.Outcome ||
                    (this.Outcome != null &&
                    this.Outcome.Equals(input.Outcome))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                if (this.AffectedPortfoliosDetails != null)
                {
                    hashCode = (hashCode * 59) + this.AffectedPortfoliosDetails.GetHashCode();
                }
                if (this.AffectedOrders != null)
                {
                    hashCode = (hashCode * 59) + this.AffectedOrders.GetHashCode();
                }
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                if (this.TemplateDescription != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateDescription.GetHashCode();
                }
                if (this.TemplateVariation != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateVariation.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.RuleName != null)
                {
                    hashCode = (hashCode * 59) + this.RuleName.GetHashCode();
                }
                if (this.RuleDescription != null)
                {
                    hashCode = (hashCode * 59) + this.RuleDescription.GetHashCode();
                }
                if (this.Outcome != null)
                {
                    hashCode = (hashCode * 59) + this.Outcome.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TemplateDescription (string) minLength
            if (this.TemplateDescription != null && this.TemplateDescription.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateDescription, length must be greater than 1.", new [] { "TemplateDescription" });
            }

            // TemplateVariation (string) minLength
            if (this.TemplateVariation != null && this.TemplateVariation.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TemplateVariation, length must be greater than 1.", new [] { "TemplateVariation" });
            }

            // Status (string) minLength
            if (this.Status != null && this.Status.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Status, length must be greater than 1.", new [] { "Status" });
            }

            // RuleName (string) minLength
            if (this.RuleName != null && this.RuleName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleName, length must be greater than 1.", new [] { "RuleName" });
            }

            // RuleDescription (string) minLength
            if (this.RuleDescription != null && this.RuleDescription.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleDescription, length must be greater than 1.", new [] { "RuleDescription" });
            }

            // Outcome (string) minLength
            if (this.Outcome != null && this.Outcome.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Outcome, length must be greater than 1.", new [] { "Outcome" });
            }

            yield break;
        }
    }
}
