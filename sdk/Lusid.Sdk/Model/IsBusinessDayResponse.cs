/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Whether or not a DateTimeOffset is a business DateTime
    /// </summary>
    [DataContract(Name = "IsBusinessDayResponse")]
    public partial class IsBusinessDayResponse : IEquatable<IsBusinessDayResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IsBusinessDayResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IsBusinessDayResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IsBusinessDayResponse" /> class.
        /// </summary>
        /// <param name="requestedDateTime">requestedDateTime (required).</param>
        /// <param name="isBusinessDay">isBusinessDay (required).</param>
        public IsBusinessDayResponse(DateTimeOffset requestedDateTime = default(DateTimeOffset), bool isBusinessDay = default(bool))
        {
            this.RequestedDateTime = requestedDateTime;
            this.IsBusinessDay = isBusinessDay;
        }

        /// <summary>
        /// Gets or Sets RequestedDateTime
        /// </summary>
        [DataMember(Name = "requestedDateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset RequestedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets IsBusinessDay
        /// </summary>
        [DataMember(Name = "isBusinessDay", IsRequired = true, EmitDefaultValue = true)]
        public bool IsBusinessDay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IsBusinessDayResponse {\n");
            sb.Append("  RequestedDateTime: ").Append(RequestedDateTime).Append("\n");
            sb.Append("  IsBusinessDay: ").Append(IsBusinessDay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IsBusinessDayResponse);
        }

        /// <summary>
        /// Returns true if IsBusinessDayResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of IsBusinessDayResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IsBusinessDayResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RequestedDateTime == input.RequestedDateTime ||
                    (this.RequestedDateTime != null &&
                    this.RequestedDateTime.Equals(input.RequestedDateTime))
                ) && 
                (
                    this.IsBusinessDay == input.IsBusinessDay ||
                    this.IsBusinessDay.Equals(input.IsBusinessDay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.RequestedDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsBusinessDay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
