/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Container class pairing economic dependencies and quote data
    /// </summary>
    [DataContract(Name = "EconomicDependencyWithQuote")]
    public partial class EconomicDependencyWithQuote : IEquatable<EconomicDependencyWithQuote>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EconomicDependencyWithQuote" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EconomicDependencyWithQuote() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EconomicDependencyWithQuote" /> class.
        /// </summary>
        /// <param name="economicDependency">economicDependency (required).</param>
        /// <param name="metricValue">metricValue (required).</param>
        /// <param name="scaleFactor">Scale factor for the quote - this can be null, in which case we default to 1..</param>
        public EconomicDependencyWithQuote(EconomicDependency economicDependency = default(EconomicDependency), MetricValue metricValue = default(MetricValue), decimal? scaleFactor = default(decimal?))
        {
            // to ensure "economicDependency" is required (not null)
            if (economicDependency == null)
            {
                throw new ArgumentNullException("economicDependency is a required property for EconomicDependencyWithQuote and cannot be null");
            }
            this.EconomicDependency = economicDependency;
            // to ensure "metricValue" is required (not null)
            if (metricValue == null)
            {
                throw new ArgumentNullException("metricValue is a required property for EconomicDependencyWithQuote and cannot be null");
            }
            this.MetricValue = metricValue;
            this.ScaleFactor = scaleFactor;
        }

        /// <summary>
        /// Gets or Sets EconomicDependency
        /// </summary>
        [DataMember(Name = "economicDependency", IsRequired = true, EmitDefaultValue = true)]
        public EconomicDependency EconomicDependency { get; set; }

        /// <summary>
        /// Gets or Sets MetricValue
        /// </summary>
        [DataMember(Name = "metricValue", IsRequired = true, EmitDefaultValue = true)]
        public MetricValue MetricValue { get; set; }

        /// <summary>
        /// Scale factor for the quote - this can be null, in which case we default to 1.
        /// </summary>
        /// <value>Scale factor for the quote - this can be null, in which case we default to 1.</value>
        [DataMember(Name = "scaleFactor", EmitDefaultValue = true)]
        public decimal? ScaleFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EconomicDependencyWithQuote {\n");
            sb.Append("  EconomicDependency: ").Append(EconomicDependency).Append("\n");
            sb.Append("  MetricValue: ").Append(MetricValue).Append("\n");
            sb.Append("  ScaleFactor: ").Append(ScaleFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EconomicDependencyWithQuote);
        }

        /// <summary>
        /// Returns true if EconomicDependencyWithQuote instances are equal
        /// </summary>
        /// <param name="input">Instance of EconomicDependencyWithQuote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EconomicDependencyWithQuote input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EconomicDependency == input.EconomicDependency ||
                    (this.EconomicDependency != null &&
                    this.EconomicDependency.Equals(input.EconomicDependency))
                ) && 
                (
                    this.MetricValue == input.MetricValue ||
                    (this.MetricValue != null &&
                    this.MetricValue.Equals(input.MetricValue))
                ) && 
                (
                    this.ScaleFactor == input.ScaleFactor ||
                    (this.ScaleFactor != null &&
                    this.ScaleFactor.Equals(input.ScaleFactor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EconomicDependency != null)
                {
                    hashCode = (hashCode * 59) + this.EconomicDependency.GetHashCode();
                }
                if (this.MetricValue != null)
                {
                    hashCode = (hashCode * 59) + this.MetricValue.GetHashCode();
                }
                if (this.ScaleFactor != null)
                {
                    hashCode = (hashCode * 59) + this.ScaleFactor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
