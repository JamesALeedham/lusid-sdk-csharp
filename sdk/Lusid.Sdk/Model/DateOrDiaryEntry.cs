/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// DateOrDiaryEntry
    /// </summary>
    [DataContract(Name = "DateOrDiaryEntry")]
    public partial class DateOrDiaryEntry : IEquatable<DateOrDiaryEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateOrDiaryEntry" /> class.
        /// </summary>
        /// <param name="date">A date. If specified, DiaryEntry must not be specified..</param>
        /// <param name="diaryEntry">The code of a diary entry. If specified, Date must not be specified..</param>
        public DateOrDiaryEntry(DateTimeOrCutLabel date = default(DateTimeOrCutLabel), string diaryEntry = default(string))
        {
            this.Date = date;
            this.DiaryEntry = diaryEntry;
        }

        /// <summary>
        /// A date. If specified, DiaryEntry must not be specified.
        /// </summary>
        /// <value>A date. If specified, DiaryEntry must not be specified.</value>
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTimeOrCutLabel Date { get; set; }

        /// <summary>
        /// The code of a diary entry. If specified, Date must not be specified.
        /// </summary>
        /// <value>The code of a diary entry. If specified, Date must not be specified.</value>
        [DataMember(Name = "diaryEntry", EmitDefaultValue = true)]
        public string DiaryEntry { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DateOrDiaryEntry {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DiaryEntry: ").Append(DiaryEntry).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateOrDiaryEntry);
        }

        /// <summary>
        /// Returns true if DateOrDiaryEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of DateOrDiaryEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateOrDiaryEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DiaryEntry == input.DiaryEntry ||
                    (this.DiaryEntry != null &&
                    this.DiaryEntry.Equals(input.DiaryEntry))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                if (this.DiaryEntry != null)
                {
                    hashCode = (hashCode * 59) + this.DiaryEntry.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DiaryEntry (string) maxLength
            if (this.DiaryEntry != null && this.DiaryEntry.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiaryEntry, length must be less than 64.", new [] { "DiaryEntry" });
            }

            // DiaryEntry (string) minLength
            if (this.DiaryEntry != null && this.DiaryEntry.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiaryEntry, length must be greater than 1.", new [] { "DiaryEntry" });
            }

            // DiaryEntry (string) pattern
            Regex regexDiaryEntry = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexDiaryEntry.Match(this.DiaryEntry).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiaryEntry, must match a pattern of " + regexDiaryEntry, new [] { "DiaryEntry" });
            }

            yield break;
        }
    }
}
