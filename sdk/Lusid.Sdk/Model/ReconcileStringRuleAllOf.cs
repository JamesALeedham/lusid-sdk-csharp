/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ReconcileStringRuleAllOf
    /// </summary>
    [DataContract(Name = "ReconcileStringRule_allOf")]
    public partial class ReconcileStringRuleAllOf : IEquatable<ReconcileStringRuleAllOf>, IValidatableObject
    {
        /// <summary>
        /// The available values are: Exact, Contains, CaseInsensitive, ContainsAnyCase, IsOneOf
        /// </summary>
        /// <value>The available values are: Exact, Contains, CaseInsensitive, ContainsAnyCase, IsOneOf</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComparisonTypeEnum
        {
            /// <summary>
            /// Enum Exact for value: Exact
            /// </summary>
            [EnumMember(Value = "Exact")]
            Exact = 1,

            /// <summary>
            /// Enum Contains for value: Contains
            /// </summary>
            [EnumMember(Value = "Contains")]
            Contains = 2,

            /// <summary>
            /// Enum CaseInsensitive for value: CaseInsensitive
            /// </summary>
            [EnumMember(Value = "CaseInsensitive")]
            CaseInsensitive = 3,

            /// <summary>
            /// Enum ContainsAnyCase for value: ContainsAnyCase
            /// </summary>
            [EnumMember(Value = "ContainsAnyCase")]
            ContainsAnyCase = 4,

            /// <summary>
            /// Enum IsOneOf for value: IsOneOf
            /// </summary>
            [EnumMember(Value = "IsOneOf")]
            IsOneOf = 5

        }


        /// <summary>
        /// The available values are: Exact, Contains, CaseInsensitive, ContainsAnyCase, IsOneOf
        /// </summary>
        /// <value>The available values are: Exact, Contains, CaseInsensitive, ContainsAnyCase, IsOneOf</value>
        [DataMember(Name = "comparisonType", IsRequired = true, EmitDefaultValue = true)]
        public ComparisonTypeEnum ComparisonType { get; set; }
        /// <summary>
        /// The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact
        /// </summary>
        /// <value>The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RuleTypeEnum
        {
            /// <summary>
            /// Enum ReconcileNumericRule for value: ReconcileNumericRule
            /// </summary>
            [EnumMember(Value = "ReconcileNumericRule")]
            ReconcileNumericRule = 1,

            /// <summary>
            /// Enum ReconcileDateTimeRule for value: ReconcileDateTimeRule
            /// </summary>
            [EnumMember(Value = "ReconcileDateTimeRule")]
            ReconcileDateTimeRule = 2,

            /// <summary>
            /// Enum ReconcileStringRule for value: ReconcileStringRule
            /// </summary>
            [EnumMember(Value = "ReconcileStringRule")]
            ReconcileStringRule = 3,

            /// <summary>
            /// Enum ReconcileExact for value: ReconcileExact
            /// </summary>
            [EnumMember(Value = "ReconcileExact")]
            ReconcileExact = 4

        }


        /// <summary>
        /// The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact
        /// </summary>
        /// <value>The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact</value>
        [DataMember(Name = "ruleType", IsRequired = true, EmitDefaultValue = true)]
        public RuleTypeEnum RuleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconcileStringRuleAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReconcileStringRuleAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconcileStringRuleAllOf" /> class.
        /// </summary>
        /// <param name="comparisonType">The available values are: Exact, Contains, CaseInsensitive, ContainsAnyCase, IsOneOf (required).</param>
        /// <param name="oneOfCandidates">For cases of \&quot;IsOneOf\&quot; a set is required to match values against.  Fuzzy matching of strings against one of a set. There can be cases where systems \&quot;A\&quot; and \&quot;B\&quot; might use different terms for the same logical entity. A common case would be  comparison of something like a day count fraction where some convention like the \&quot;actual 365\&quot; convention might be represented as one of [\&quot;A365\&quot;, \&quot;Act365\&quot;, \&quot;Actual365\&quot;] or similar.  This is to allow this kind of fuzzy matching of values. Note that as this is exhaustive comparison across sets it will be slow and should therefore be used sparingly..</param>
        /// <param name="appliesTo">appliesTo (required).</param>
        /// <param name="ruleType">The available values are: ReconcileNumericRule, ReconcileDateTimeRule, ReconcileStringRule, ReconcileExact (required).</param>
        public ReconcileStringRuleAllOf(ComparisonTypeEnum comparisonType = default(ComparisonTypeEnum), Dictionary<string, List<string>> oneOfCandidates = default(Dictionary<string, List<string>>), AggregateSpec appliesTo = default(AggregateSpec), RuleTypeEnum ruleType = default(RuleTypeEnum))
        {
            this.ComparisonType = comparisonType;
            // to ensure "appliesTo" is required (not null)
            if (appliesTo == null)
            {
                throw new ArgumentNullException("appliesTo is a required property for ReconcileStringRuleAllOf and cannot be null");
            }
            this.AppliesTo = appliesTo;
            this.RuleType = ruleType;
            this.OneOfCandidates = oneOfCandidates;
        }

        /// <summary>
        /// For cases of \&quot;IsOneOf\&quot; a set is required to match values against.  Fuzzy matching of strings against one of a set. There can be cases where systems \&quot;A\&quot; and \&quot;B\&quot; might use different terms for the same logical entity. A common case would be  comparison of something like a day count fraction where some convention like the \&quot;actual 365\&quot; convention might be represented as one of [\&quot;A365\&quot;, \&quot;Act365\&quot;, \&quot;Actual365\&quot;] or similar.  This is to allow this kind of fuzzy matching of values. Note that as this is exhaustive comparison across sets it will be slow and should therefore be used sparingly.
        /// </summary>
        /// <value>For cases of \&quot;IsOneOf\&quot; a set is required to match values against.  Fuzzy matching of strings against one of a set. There can be cases where systems \&quot;A\&quot; and \&quot;B\&quot; might use different terms for the same logical entity. A common case would be  comparison of something like a day count fraction where some convention like the \&quot;actual 365\&quot; convention might be represented as one of [\&quot;A365\&quot;, \&quot;Act365\&quot;, \&quot;Actual365\&quot;] or similar.  This is to allow this kind of fuzzy matching of values. Note that as this is exhaustive comparison across sets it will be slow and should therefore be used sparingly.</value>
        [DataMember(Name = "oneOfCandidates", EmitDefaultValue = true)]
        public Dictionary<string, List<string>> OneOfCandidates { get; set; }

        /// <summary>
        /// Gets or Sets AppliesTo
        /// </summary>
        [DataMember(Name = "appliesTo", IsRequired = true, EmitDefaultValue = true)]
        public AggregateSpec AppliesTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReconcileStringRuleAllOf {\n");
            sb.Append("  ComparisonType: ").Append(ComparisonType).Append("\n");
            sb.Append("  OneOfCandidates: ").Append(OneOfCandidates).Append("\n");
            sb.Append("  AppliesTo: ").Append(AppliesTo).Append("\n");
            sb.Append("  RuleType: ").Append(RuleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReconcileStringRuleAllOf);
        }

        /// <summary>
        /// Returns true if ReconcileStringRuleAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ReconcileStringRuleAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReconcileStringRuleAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ComparisonType == input.ComparisonType ||
                    this.ComparisonType.Equals(input.ComparisonType)
                ) && 
                (
                    this.OneOfCandidates == input.OneOfCandidates ||
                    this.OneOfCandidates != null &&
                    input.OneOfCandidates != null &&
                    this.OneOfCandidates.SequenceEqual(input.OneOfCandidates)
                ) && 
                (
                    this.AppliesTo == input.AppliesTo ||
                    (this.AppliesTo != null &&
                    this.AppliesTo.Equals(input.AppliesTo))
                ) && 
                (
                    this.RuleType == input.RuleType ||
                    this.RuleType.Equals(input.RuleType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ComparisonType.GetHashCode();
                if (this.OneOfCandidates != null)
                {
                    hashCode = (hashCode * 59) + this.OneOfCandidates.GetHashCode();
                }
                if (this.AppliesTo != null)
                {
                    hashCode = (hashCode * 59) + this.AppliesTo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RuleType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
