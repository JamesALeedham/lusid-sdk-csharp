/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// DateAttributes
    /// </summary>
    [DataContract(Name = "DateAttributes")]
    public partial class DateAttributes : IEquatable<DateAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DateAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateAttributes" /> class.
        /// </summary>
        /// <param name="irregular">irregular (required).</param>
        /// <param name="irregularSession">irregularSession (required).</param>
        /// <param name="newHours">newHours (required).</param>
        /// <param name="activity">activity.</param>
        /// <param name="firstOpen">firstOpen.</param>
        /// <param name="lastOpen">lastOpen.</param>
        /// <param name="firstClose">firstClose.</param>
        /// <param name="lastClose">lastClose.</param>
        public DateAttributes(bool irregular = default(bool), bool irregularSession = default(bool), bool newHours = default(bool), string activity = default(string), string firstOpen = default(string), string lastOpen = default(string), string firstClose = default(string), string lastClose = default(string))
        {
            this.Irregular = irregular;
            this.IrregularSession = irregularSession;
            this.NewHours = newHours;
            this.Activity = activity;
            this.FirstOpen = firstOpen;
            this.LastOpen = lastOpen;
            this.FirstClose = firstClose;
            this.LastClose = lastClose;
        }

        /// <summary>
        /// Gets or Sets Irregular
        /// </summary>
        [DataMember(Name = "irregular", IsRequired = true, EmitDefaultValue = true)]
        public bool Irregular { get; set; }

        /// <summary>
        /// Gets or Sets IrregularSession
        /// </summary>
        [DataMember(Name = "irregularSession", IsRequired = true, EmitDefaultValue = true)]
        public bool IrregularSession { get; set; }

        /// <summary>
        /// Gets or Sets NewHours
        /// </summary>
        [DataMember(Name = "newHours", IsRequired = true, EmitDefaultValue = true)]
        public bool NewHours { get; set; }

        /// <summary>
        /// Gets or Sets Activity
        /// </summary>
        [DataMember(Name = "activity", EmitDefaultValue = true)]
        public string Activity { get; set; }

        /// <summary>
        /// Gets or Sets FirstOpen
        /// </summary>
        [DataMember(Name = "firstOpen", EmitDefaultValue = true)]
        public string FirstOpen { get; set; }

        /// <summary>
        /// Gets or Sets LastOpen
        /// </summary>
        [DataMember(Name = "lastOpen", EmitDefaultValue = true)]
        public string LastOpen { get; set; }

        /// <summary>
        /// Gets or Sets FirstClose
        /// </summary>
        [DataMember(Name = "firstClose", EmitDefaultValue = true)]
        public string FirstClose { get; set; }

        /// <summary>
        /// Gets or Sets LastClose
        /// </summary>
        [DataMember(Name = "lastClose", EmitDefaultValue = true)]
        public string LastClose { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DateAttributes {\n");
            sb.Append("  Irregular: ").Append(Irregular).Append("\n");
            sb.Append("  IrregularSession: ").Append(IrregularSession).Append("\n");
            sb.Append("  NewHours: ").Append(NewHours).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  FirstOpen: ").Append(FirstOpen).Append("\n");
            sb.Append("  LastOpen: ").Append(LastOpen).Append("\n");
            sb.Append("  FirstClose: ").Append(FirstClose).Append("\n");
            sb.Append("  LastClose: ").Append(LastClose).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateAttributes);
        }

        /// <summary>
        /// Returns true if DateAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of DateAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateAttributes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Irregular == input.Irregular ||
                    this.Irregular.Equals(input.Irregular)
                ) && 
                (
                    this.IrregularSession == input.IrregularSession ||
                    this.IrregularSession.Equals(input.IrregularSession)
                ) && 
                (
                    this.NewHours == input.NewHours ||
                    this.NewHours.Equals(input.NewHours)
                ) && 
                (
                    this.Activity == input.Activity ||
                    (this.Activity != null &&
                    this.Activity.Equals(input.Activity))
                ) && 
                (
                    this.FirstOpen == input.FirstOpen ||
                    (this.FirstOpen != null &&
                    this.FirstOpen.Equals(input.FirstOpen))
                ) && 
                (
                    this.LastOpen == input.LastOpen ||
                    (this.LastOpen != null &&
                    this.LastOpen.Equals(input.LastOpen))
                ) && 
                (
                    this.FirstClose == input.FirstClose ||
                    (this.FirstClose != null &&
                    this.FirstClose.Equals(input.FirstClose))
                ) && 
                (
                    this.LastClose == input.LastClose ||
                    (this.LastClose != null &&
                    this.LastClose.Equals(input.LastClose))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Irregular.GetHashCode();
                hashCode = (hashCode * 59) + this.IrregularSession.GetHashCode();
                hashCode = (hashCode * 59) + this.NewHours.GetHashCode();
                if (this.Activity != null)
                {
                    hashCode = (hashCode * 59) + this.Activity.GetHashCode();
                }
                if (this.FirstOpen != null)
                {
                    hashCode = (hashCode * 59) + this.FirstOpen.GetHashCode();
                }
                if (this.LastOpen != null)
                {
                    hashCode = (hashCode * 59) + this.LastOpen.GetHashCode();
                }
                if (this.FirstClose != null)
                {
                    hashCode = (hashCode * 59) + this.FirstClose.GetHashCode();
                }
                if (this.LastClose != null)
                {
                    hashCode = (hashCode * 59) + this.LastClose.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Activity (string) maxLength
            if (this.Activity != null && this.Activity.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Activity, length must be less than 100.", new [] { "Activity" });
            }

            // Activity (string) minLength
            if (this.Activity != null && this.Activity.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Activity, length must be greater than 0.", new [] { "Activity" });
            }

            // Activity (string) pattern
            Regex regexActivity = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexActivity.Match(this.Activity).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Activity, must match a pattern of " + regexActivity, new [] { "Activity" });
            }

            // FirstOpen (string) maxLength
            if (this.FirstOpen != null && this.FirstOpen.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstOpen, length must be less than 100.", new [] { "FirstOpen" });
            }

            // FirstOpen (string) minLength
            if (this.FirstOpen != null && this.FirstOpen.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstOpen, length must be greater than 0.", new [] { "FirstOpen" });
            }

            // FirstOpen (string) pattern
            Regex regexFirstOpen = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexFirstOpen.Match(this.FirstOpen).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstOpen, must match a pattern of " + regexFirstOpen, new [] { "FirstOpen" });
            }

            // LastOpen (string) maxLength
            if (this.LastOpen != null && this.LastOpen.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastOpen, length must be less than 100.", new [] { "LastOpen" });
            }

            // LastOpen (string) minLength
            if (this.LastOpen != null && this.LastOpen.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastOpen, length must be greater than 0.", new [] { "LastOpen" });
            }

            // LastOpen (string) pattern
            Regex regexLastOpen = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexLastOpen.Match(this.LastOpen).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastOpen, must match a pattern of " + regexLastOpen, new [] { "LastOpen" });
            }

            // FirstClose (string) maxLength
            if (this.FirstClose != null && this.FirstClose.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstClose, length must be less than 100.", new [] { "FirstClose" });
            }

            // FirstClose (string) minLength
            if (this.FirstClose != null && this.FirstClose.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstClose, length must be greater than 0.", new [] { "FirstClose" });
            }

            // FirstClose (string) pattern
            Regex regexFirstClose = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexFirstClose.Match(this.FirstClose).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstClose, must match a pattern of " + regexFirstClose, new [] { "FirstClose" });
            }

            // LastClose (string) maxLength
            if (this.LastClose != null && this.LastClose.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastClose, length must be less than 100.", new [] { "LastClose" });
            }

            // LastClose (string) minLength
            if (this.LastClose != null && this.LastClose.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastClose, length must be greater than 0.", new [] { "LastClose" });
            }

            // LastClose (string) pattern
            Regex regexLastClose = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexLastClose.Match(this.LastClose).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastClose, must match a pattern of " + regexLastClose, new [] { "LastClose" });
            }

            yield break;
        }
    }
}
