/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ComplianceRuleResultV2
    /// </summary>
    [DataContract(Name = "ComplianceRuleResultV2")]
    public partial class ComplianceRuleResultV2 : IEquatable<ComplianceRuleResultV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceRuleResultV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComplianceRuleResultV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceRuleResultV2" /> class.
        /// </summary>
        /// <param name="runId">runId (required).</param>
        /// <param name="instigatedAt">instigatedAt (required).</param>
        /// <param name="completedAt">completedAt (required).</param>
        /// <param name="schedule">schedule (required).</param>
        /// <param name="ruleResult">ruleResult (required).</param>
        public ComplianceRuleResultV2(ResourceId runId = default(ResourceId), DateTimeOffset instigatedAt = default(DateTimeOffset), DateTimeOffset completedAt = default(DateTimeOffset), string schedule = default(string), ComplianceSummaryRuleResult ruleResult = default(ComplianceSummaryRuleResult))
        {
            // to ensure "runId" is required (not null)
            if (runId == null)
            {
                throw new ArgumentNullException("runId is a required property for ComplianceRuleResultV2 and cannot be null");
            }
            this.RunId = runId;
            this.InstigatedAt = instigatedAt;
            this.CompletedAt = completedAt;
            // to ensure "schedule" is required (not null)
            if (schedule == null)
            {
                throw new ArgumentNullException("schedule is a required property for ComplianceRuleResultV2 and cannot be null");
            }
            this.Schedule = schedule;
            // to ensure "ruleResult" is required (not null)
            if (ruleResult == null)
            {
                throw new ArgumentNullException("ruleResult is a required property for ComplianceRuleResultV2 and cannot be null");
            }
            this.RuleResult = ruleResult;
        }

        /// <summary>
        /// Gets or Sets RunId
        /// </summary>
        [DataMember(Name = "runId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId RunId { get; set; }

        /// <summary>
        /// Gets or Sets InstigatedAt
        /// </summary>
        [DataMember(Name = "instigatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset InstigatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CompletedAt
        /// </summary>
        [DataMember(Name = "completedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", IsRequired = true, EmitDefaultValue = true)]
        public string Schedule { get; set; }

        /// <summary>
        /// Gets or Sets RuleResult
        /// </summary>
        [DataMember(Name = "ruleResult", IsRequired = true, EmitDefaultValue = true)]
        public ComplianceSummaryRuleResult RuleResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComplianceRuleResultV2 {\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  InstigatedAt: ").Append(InstigatedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  RuleResult: ").Append(RuleResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComplianceRuleResultV2);
        }

        /// <summary>
        /// Returns true if ComplianceRuleResultV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of ComplianceRuleResultV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComplianceRuleResultV2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.InstigatedAt == input.InstigatedAt ||
                    (this.InstigatedAt != null &&
                    this.InstigatedAt.Equals(input.InstigatedAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.RuleResult == input.RuleResult ||
                    (this.RuleResult != null &&
                    this.RuleResult.Equals(input.RuleResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RunId != null)
                {
                    hashCode = (hashCode * 59) + this.RunId.GetHashCode();
                }
                if (this.InstigatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.InstigatedAt.GetHashCode();
                }
                if (this.CompletedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedAt.GetHashCode();
                }
                if (this.Schedule != null)
                {
                    hashCode = (hashCode * 59) + this.Schedule.GetHashCode();
                }
                if (this.RuleResult != null)
                {
                    hashCode = (hashCode * 59) + this.RuleResult.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Schedule (string) minLength
            if (this.Schedule != null && this.Schedule.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Schedule, length must be greater than 1.", new [] { "Schedule" });
            }

            yield break;
        }
    }
}
