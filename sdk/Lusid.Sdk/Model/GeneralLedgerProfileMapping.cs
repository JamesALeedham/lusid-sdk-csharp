/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// GeneralLedgerProfileMapping
    /// </summary>
    [DataContract(Name = "GeneralLedgerProfileMapping")]
    public partial class GeneralLedgerProfileMapping : IEquatable<GeneralLedgerProfileMapping>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralLedgerProfileMapping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GeneralLedgerProfileMapping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeneralLedgerProfileMapping" /> class.
        /// </summary>
        /// <param name="mappingFilter">The filter syntax for the Mapping filter. See https://support.lusid.com/knowledgebase/article/KA-02140 for more information on filter syntax (required).</param>
        /// <param name="levels">References fields and properties on the associated Journal Entry Line and graph of associated objects. (required).</param>
        public GeneralLedgerProfileMapping(string mappingFilter = default(string), List<string> levels = default(List<string>))
        {
            // to ensure "mappingFilter" is required (not null)
            if (mappingFilter == null)
            {
                throw new ArgumentNullException("mappingFilter is a required property for GeneralLedgerProfileMapping and cannot be null");
            }
            this.MappingFilter = mappingFilter;
            // to ensure "levels" is required (not null)
            if (levels == null)
            {
                throw new ArgumentNullException("levels is a required property for GeneralLedgerProfileMapping and cannot be null");
            }
            this.Levels = levels;
        }

        /// <summary>
        /// The filter syntax for the Mapping filter. See https://support.lusid.com/knowledgebase/article/KA-02140 for more information on filter syntax
        /// </summary>
        /// <value>The filter syntax for the Mapping filter. See https://support.lusid.com/knowledgebase/article/KA-02140 for more information on filter syntax</value>
        [DataMember(Name = "mappingFilter", IsRequired = true, EmitDefaultValue = true)]
        public string MappingFilter { get; set; }

        /// <summary>
        /// References fields and properties on the associated Journal Entry Line and graph of associated objects.
        /// </summary>
        /// <value>References fields and properties on the associated Journal Entry Line and graph of associated objects.</value>
        [DataMember(Name = "levels", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Levels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeneralLedgerProfileMapping {\n");
            sb.Append("  MappingFilter: ").Append(MappingFilter).Append("\n");
            sb.Append("  Levels: ").Append(Levels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeneralLedgerProfileMapping);
        }

        /// <summary>
        /// Returns true if GeneralLedgerProfileMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of GeneralLedgerProfileMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneralLedgerProfileMapping input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MappingFilter == input.MappingFilter ||
                    (this.MappingFilter != null &&
                    this.MappingFilter.Equals(input.MappingFilter))
                ) && 
                (
                    this.Levels == input.Levels ||
                    this.Levels != null &&
                    input.Levels != null &&
                    this.Levels.SequenceEqual(input.Levels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MappingFilter != null)
                {
                    hashCode = (hashCode * 59) + this.MappingFilter.GetHashCode();
                }
                if (this.Levels != null)
                {
                    hashCode = (hashCode * 59) + this.Levels.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MappingFilter (string) maxLength
            if (this.MappingFilter != null && this.MappingFilter.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MappingFilter, length must be less than 16384.", new [] { "MappingFilter" });
            }

            // MappingFilter (string) minLength
            if (this.MappingFilter != null && this.MappingFilter.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MappingFilter, length must be greater than 1.", new [] { "MappingFilter" });
            }

            // MappingFilter (string) pattern
            Regex regexMappingFilter = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexMappingFilter.Match(this.MappingFilter).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MappingFilter, must match a pattern of " + regexMappingFilter, new [] { "MappingFilter" });
            }

            yield break;
        }
    }
}
