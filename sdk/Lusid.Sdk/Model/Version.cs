/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1387
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The version metadata.
    /// </summary>
    [DataContract]
    public partial class Version :  IEquatable<Version>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Version" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Version() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Version" /> class.
        /// </summary>
        /// <param name="effectiveFrom">The effective datetime at which this version became valid. Only applies when a single entity is being interacted with. (required).</param>
        /// <param name="asAtDate">The asAt datetime at which the data was committed to LUSID. (required).</param>
        public Version(DateTimeOffset? effectiveFrom = default(DateTimeOffset?), DateTimeOffset? asAtDate = default(DateTimeOffset?))
        {
            // to ensure "effectiveFrom" is required (not null)
            if (effectiveFrom == null)
            {
                throw new InvalidDataException("effectiveFrom is a required property for Version and cannot be null");
            }
            else
            {
                this.EffectiveFrom = effectiveFrom;
            }
            
            // to ensure "asAtDate" is required (not null)
            if (asAtDate == null)
            {
                throw new InvalidDataException("asAtDate is a required property for Version and cannot be null");
            }
            else
            {
                this.AsAtDate = asAtDate;
            }
            
        }
        
        /// <summary>
        /// The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.
        /// </summary>
        /// <value>The effective datetime at which this version became valid. Only applies when a single entity is being interacted with.</value>
        [DataMember(Name="effectiveFrom", EmitDefaultValue=false)]
        public DateTimeOffset? EffectiveFrom { get; set; }

        /// <summary>
        /// The asAt datetime at which the data was committed to LUSID.
        /// </summary>
        /// <value>The asAt datetime at which the data was committed to LUSID.</value>
        [DataMember(Name="asAtDate", EmitDefaultValue=false)]
        public DateTimeOffset? AsAtDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Version {\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  AsAtDate: ").Append(AsAtDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Version);
        }

        /// <summary>
        /// Returns true if Version instances are equal
        /// </summary>
        /// <param name="input">Instance of Version to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Version input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.AsAtDate == input.AsAtDate ||
                    (this.AsAtDate != null &&
                    this.AsAtDate.Equals(input.AsAtDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveFrom != null)
                    hashCode = hashCode * 59 + this.EffectiveFrom.GetHashCode();
                if (this.AsAtDate != null)
                    hashCode = hashCode * 59 + this.AsAtDate.GetHashCode();
                return hashCode;
            }
        }
    }

}
