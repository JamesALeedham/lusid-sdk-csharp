/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The time an entity was modified (amendment and/or historical correction).
    /// </summary>
    [DataContract(Name = "Change")]
    public partial class Change : IEquatable<Change>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Change" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Change() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Change" /> class.
        /// </summary>
        /// <param name="href">href.</param>
        /// <param name="entityId">entityId (required).</param>
        /// <param name="corrected">corrected (required).</param>
        /// <param name="correctionEffectiveAt">correctionEffectiveAt.</param>
        /// <param name="correctionAsAt">correctionAsAt.</param>
        /// <param name="amended">amended (required).</param>
        /// <param name="amendmentEffectiveAt">amendmentEffectiveAt.</param>
        /// <param name="amendmentAsAt">amendmentAsAt.</param>
        /// <param name="links">links.</param>
        public Change(string href = default(string), ResourceId entityId = default(ResourceId), bool corrected = default(bool), DateTimeOffset? correctionEffectiveAt = default(DateTimeOffset?), DateTimeOffset? correctionAsAt = default(DateTimeOffset?), bool amended = default(bool), DateTimeOffset? amendmentEffectiveAt = default(DateTimeOffset?), DateTimeOffset? amendmentAsAt = default(DateTimeOffset?), List<Link> links = default(List<Link>))
        {
            // to ensure "entityId" is required (not null)
            if (entityId == null)
            {
                throw new ArgumentNullException("entityId is a required property for Change and cannot be null");
            }
            this.EntityId = entityId;
            this.Corrected = corrected;
            this.Amended = amended;
            this.Href = href;
            this.CorrectionEffectiveAt = correctionEffectiveAt;
            this.CorrectionAsAt = correctionAsAt;
            this.AmendmentEffectiveAt = amendmentEffectiveAt;
            this.AmendmentAsAt = amendmentAsAt;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name = "href", EmitDefaultValue = true)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name = "entityId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId EntityId { get; set; }

        /// <summary>
        /// Gets or Sets Corrected
        /// </summary>
        [DataMember(Name = "corrected", IsRequired = true, EmitDefaultValue = true)]
        public bool Corrected { get; set; }

        /// <summary>
        /// Gets or Sets CorrectionEffectiveAt
        /// </summary>
        [DataMember(Name = "correctionEffectiveAt", EmitDefaultValue = true)]
        public DateTimeOffset? CorrectionEffectiveAt { get; set; }

        /// <summary>
        /// Gets or Sets CorrectionAsAt
        /// </summary>
        [DataMember(Name = "correctionAsAt", EmitDefaultValue = true)]
        public DateTimeOffset? CorrectionAsAt { get; set; }

        /// <summary>
        /// Gets or Sets Amended
        /// </summary>
        [DataMember(Name = "amended", IsRequired = true, EmitDefaultValue = true)]
        public bool Amended { get; set; }

        /// <summary>
        /// Gets or Sets AmendmentEffectiveAt
        /// </summary>
        [DataMember(Name = "amendmentEffectiveAt", EmitDefaultValue = true)]
        public DateTimeOffset? AmendmentEffectiveAt { get; set; }

        /// <summary>
        /// Gets or Sets AmendmentAsAt
        /// </summary>
        [DataMember(Name = "amendmentAsAt", EmitDefaultValue = true)]
        public DateTimeOffset? AmendmentAsAt { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Change {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Corrected: ").Append(Corrected).Append("\n");
            sb.Append("  CorrectionEffectiveAt: ").Append(CorrectionEffectiveAt).Append("\n");
            sb.Append("  CorrectionAsAt: ").Append(CorrectionAsAt).Append("\n");
            sb.Append("  Amended: ").Append(Amended).Append("\n");
            sb.Append("  AmendmentEffectiveAt: ").Append(AmendmentEffectiveAt).Append("\n");
            sb.Append("  AmendmentAsAt: ").Append(AmendmentAsAt).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Change);
        }

        /// <summary>
        /// Returns true if Change instances are equal
        /// </summary>
        /// <param name="input">Instance of Change to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Change input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.Corrected == input.Corrected ||
                    this.Corrected.Equals(input.Corrected)
                ) && 
                (
                    this.CorrectionEffectiveAt == input.CorrectionEffectiveAt ||
                    (this.CorrectionEffectiveAt != null &&
                    this.CorrectionEffectiveAt.Equals(input.CorrectionEffectiveAt))
                ) && 
                (
                    this.CorrectionAsAt == input.CorrectionAsAt ||
                    (this.CorrectionAsAt != null &&
                    this.CorrectionAsAt.Equals(input.CorrectionAsAt))
                ) && 
                (
                    this.Amended == input.Amended ||
                    this.Amended.Equals(input.Amended)
                ) && 
                (
                    this.AmendmentEffectiveAt == input.AmendmentEffectiveAt ||
                    (this.AmendmentEffectiveAt != null &&
                    this.AmendmentEffectiveAt.Equals(input.AmendmentEffectiveAt))
                ) && 
                (
                    this.AmendmentAsAt == input.AmendmentAsAt ||
                    (this.AmendmentAsAt != null &&
                    this.AmendmentAsAt.Equals(input.AmendmentAsAt))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                if (this.EntityId != null)
                {
                    hashCode = (hashCode * 59) + this.EntityId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Corrected.GetHashCode();
                if (this.CorrectionEffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.CorrectionEffectiveAt.GetHashCode();
                }
                if (this.CorrectionAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.CorrectionAsAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amended.GetHashCode();
                if (this.AmendmentEffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.AmendmentEffectiveAt.GetHashCode();
                }
                if (this.AmendmentAsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AmendmentAsAt.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
