/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpsertReconciliationBreakRequest
    /// </summary>
    [DataContract(Name = "UpsertReconciliationBreakRequest")]
    public partial class UpsertReconciliationBreakRequest : IEquatable<UpsertReconciliationBreakRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertReconciliationBreakRequest" /> class.
        /// </summary>
        /// <param name="leftFields">Fields for the left hand side of the reconciliation.</param>
        /// <param name="rightFields">Fields for the right hand side of the reconciliation.</param>
        /// <param name="diff">The difference between two matching fields.</param>
        public UpsertReconciliationBreakRequest(Dictionary<string, string> leftFields = default(Dictionary<string, string>), Dictionary<string, string> rightFields = default(Dictionary<string, string>), string diff = default(string))
        {
            this.LeftFields = leftFields;
            this.RightFields = rightFields;
            this.Diff = diff;
        }

        /// <summary>
        /// Fields for the left hand side of the reconciliation
        /// </summary>
        /// <value>Fields for the left hand side of the reconciliation</value>
        [DataMember(Name = "leftFields", EmitDefaultValue = true)]
        public Dictionary<string, string> LeftFields { get; set; }

        /// <summary>
        /// Fields for the right hand side of the reconciliation
        /// </summary>
        /// <value>Fields for the right hand side of the reconciliation</value>
        [DataMember(Name = "rightFields", EmitDefaultValue = true)]
        public Dictionary<string, string> RightFields { get; set; }

        /// <summary>
        /// The difference between two matching fields
        /// </summary>
        /// <value>The difference between two matching fields</value>
        [DataMember(Name = "diff", EmitDefaultValue = true)]
        public string Diff { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpsertReconciliationBreakRequest {\n");
            sb.Append("  LeftFields: ").Append(LeftFields).Append("\n");
            sb.Append("  RightFields: ").Append(RightFields).Append("\n");
            sb.Append("  Diff: ").Append(Diff).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertReconciliationBreakRequest);
        }

        /// <summary>
        /// Returns true if UpsertReconciliationBreakRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertReconciliationBreakRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertReconciliationBreakRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LeftFields == input.LeftFields ||
                    this.LeftFields != null &&
                    input.LeftFields != null &&
                    this.LeftFields.SequenceEqual(input.LeftFields)
                ) && 
                (
                    this.RightFields == input.RightFields ||
                    this.RightFields != null &&
                    input.RightFields != null &&
                    this.RightFields.SequenceEqual(input.RightFields)
                ) && 
                (
                    this.Diff == input.Diff ||
                    (this.Diff != null &&
                    this.Diff.Equals(input.Diff))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeftFields != null)
                {
                    hashCode = (hashCode * 59) + this.LeftFields.GetHashCode();
                }
                if (this.RightFields != null)
                {
                    hashCode = (hashCode * 59) + this.RightFields.GetHashCode();
                }
                if (this.Diff != null)
                {
                    hashCode = (hashCode * 59) + this.Diff.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Diff (string) maxLength
            if (this.Diff != null && this.Diff.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Diff, length must be less than 512.", new [] { "Diff" });
            }

            // Diff (string) minLength
            if (this.Diff != null && this.Diff.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Diff, length must be greater than 1.", new [] { "Diff" });
            }

            // Diff (string) pattern
            Regex regexDiff = new Regex(@"^\d{1,3}(,\d{3})*(\.\d+)?$", RegexOptions.CultureInvariant);
            if (false == regexDiff.Match(this.Diff).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Diff, must match a pattern of " + regexDiff, new [] { "Diff" });
            }

            yield break;
        }
    }
}
