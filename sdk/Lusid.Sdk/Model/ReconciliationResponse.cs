/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Class representing the set of comparisons that result from comparing holdings and their valuations between two separate evaluations.
    /// </summary>
    [DataContract(Name = "ReconciliationResponse")]
    public partial class ReconciliationResponse : IEquatable<ReconciliationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationResponse" /> class.
        /// </summary>
        /// <param name="comparisons">List of comparisons of left to right hand sides..</param>
        /// <param name="dataSchema">dataSchema.</param>
        public ReconciliationResponse(List<ReconciliationLine> comparisons = default(List<ReconciliationLine>), ResultDataSchema dataSchema = default(ResultDataSchema))
        {
            this.Comparisons = comparisons;
            this.DataSchema = dataSchema;
        }

        /// <summary>
        /// List of comparisons of left to right hand sides.
        /// </summary>
        /// <value>List of comparisons of left to right hand sides.</value>
        [DataMember(Name = "comparisons", EmitDefaultValue = true)]
        public List<ReconciliationLine> Comparisons { get; set; }

        /// <summary>
        /// Gets or Sets DataSchema
        /// </summary>
        [DataMember(Name = "dataSchema", EmitDefaultValue = false)]
        public ResultDataSchema DataSchema { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReconciliationResponse {\n");
            sb.Append("  Comparisons: ").Append(Comparisons).Append("\n");
            sb.Append("  DataSchema: ").Append(DataSchema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReconciliationResponse);
        }

        /// <summary>
        /// Returns true if ReconciliationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ReconciliationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReconciliationResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Comparisons == input.Comparisons ||
                    this.Comparisons != null &&
                    input.Comparisons != null &&
                    this.Comparisons.SequenceEqual(input.Comparisons)
                ) && 
                (
                    this.DataSchema == input.DataSchema ||
                    (this.DataSchema != null &&
                    this.DataSchema.Equals(input.DataSchema))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comparisons != null)
                {
                    hashCode = (hashCode * 59) + this.Comparisons.GetHashCode();
                }
                if (this.DataSchema != null)
                {
                    hashCode = (hashCode * 59) + this.DataSchema.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
