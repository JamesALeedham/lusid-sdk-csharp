/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The details for the cashflow associated with an instrument from a given portfolio.
    /// </summary>
    [DataContract(Name = "InstrumentCashFlow")]
    public partial class InstrumentCashFlow : IEquatable<InstrumentCashFlow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentCashFlow" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstrumentCashFlow() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentCashFlow" /> class.
        /// </summary>
        /// <param name="paymentDate">The date at which the given cash flow is due to be paid (SettlementDate is used somewhat interchangeably with PaymentDate.) (required).</param>
        /// <param name="amount">The quantity (amount) that will be paid. Note that this can be empty if the payment is in the future and a model is used that cannot estimate it..</param>
        /// <param name="currency">The payment currency of the cash flow. (required).</param>
        /// <param name="sourcePortfolioId">sourcePortfolioId (required).</param>
        /// <param name="sourceTransactionId">The identifier for the parent transaction on the instrument that will pay/receive this cash flow. (required).</param>
        /// <param name="sourceInstrumentScope">The unique Lusid Instrument Id (LUID) of the instrument that the holding is in. (required).</param>
        /// <param name="sourceInstrumentId">The unique Lusid Instrument Id (LUID) of the instrument that the holding is in. (required).</param>
        /// <param name="diagnostics">Whilst a cash flow is defined by an (amount,ccy) pair and the date it is paid on there is additional information required for diagnostics. This includes a range of information and can be empty in the case of a simple cash quantity or where further information is not available. Typical information includes items such as reset dates, RIC, accrual start/end, number of days and curve data. (required).</param>
        /// <param name="links">links.</param>
        public InstrumentCashFlow(DateTimeOffset paymentDate = default(DateTimeOffset), decimal? amount = default(decimal?), string currency = default(string), ResourceId sourcePortfolioId = default(ResourceId), string sourceTransactionId = default(string), string sourceInstrumentScope = default(string), string sourceInstrumentId = default(string), Dictionary<string, string> diagnostics = default(Dictionary<string, string>), List<Link> links = default(List<Link>))
        {
            this.PaymentDate = paymentDate;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for InstrumentCashFlow and cannot be null");
            }
            this.Currency = currency;
            // to ensure "sourcePortfolioId" is required (not null)
            if (sourcePortfolioId == null)
            {
                throw new ArgumentNullException("sourcePortfolioId is a required property for InstrumentCashFlow and cannot be null");
            }
            this.SourcePortfolioId = sourcePortfolioId;
            // to ensure "sourceTransactionId" is required (not null)
            if (sourceTransactionId == null)
            {
                throw new ArgumentNullException("sourceTransactionId is a required property for InstrumentCashFlow and cannot be null");
            }
            this.SourceTransactionId = sourceTransactionId;
            // to ensure "sourceInstrumentScope" is required (not null)
            if (sourceInstrumentScope == null)
            {
                throw new ArgumentNullException("sourceInstrumentScope is a required property for InstrumentCashFlow and cannot be null");
            }
            this.SourceInstrumentScope = sourceInstrumentScope;
            // to ensure "sourceInstrumentId" is required (not null)
            if (sourceInstrumentId == null)
            {
                throw new ArgumentNullException("sourceInstrumentId is a required property for InstrumentCashFlow and cannot be null");
            }
            this.SourceInstrumentId = sourceInstrumentId;
            // to ensure "diagnostics" is required (not null)
            if (diagnostics == null)
            {
                throw new ArgumentNullException("diagnostics is a required property for InstrumentCashFlow and cannot be null");
            }
            this.Diagnostics = diagnostics;
            this.Amount = amount;
            this.Links = links;
        }

        /// <summary>
        /// The date at which the given cash flow is due to be paid (SettlementDate is used somewhat interchangeably with PaymentDate.)
        /// </summary>
        /// <value>The date at which the given cash flow is due to be paid (SettlementDate is used somewhat interchangeably with PaymentDate.)</value>
        [DataMember(Name = "paymentDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset PaymentDate { get; set; }

        /// <summary>
        /// The quantity (amount) that will be paid. Note that this can be empty if the payment is in the future and a model is used that cannot estimate it.
        /// </summary>
        /// <value>The quantity (amount) that will be paid. Note that this can be empty if the payment is in the future and a model is used that cannot estimate it.</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// The payment currency of the cash flow.
        /// </summary>
        /// <value>The payment currency of the cash flow.</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets SourcePortfolioId
        /// </summary>
        [DataMember(Name = "sourcePortfolioId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId SourcePortfolioId { get; set; }

        /// <summary>
        /// The identifier for the parent transaction on the instrument that will pay/receive this cash flow.
        /// </summary>
        /// <value>The identifier for the parent transaction on the instrument that will pay/receive this cash flow.</value>
        [DataMember(Name = "sourceTransactionId", IsRequired = true, EmitDefaultValue = true)]
        public string SourceTransactionId { get; set; }

        /// <summary>
        /// The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.
        /// </summary>
        /// <value>The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.</value>
        [DataMember(Name = "sourceInstrumentScope", IsRequired = true, EmitDefaultValue = true)]
        public string SourceInstrumentScope { get; set; }

        /// <summary>
        /// The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.
        /// </summary>
        /// <value>The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.</value>
        [DataMember(Name = "sourceInstrumentId", IsRequired = true, EmitDefaultValue = true)]
        public string SourceInstrumentId { get; set; }

        /// <summary>
        /// Whilst a cash flow is defined by an (amount,ccy) pair and the date it is paid on there is additional information required for diagnostics. This includes a range of information and can be empty in the case of a simple cash quantity or where further information is not available. Typical information includes items such as reset dates, RIC, accrual start/end, number of days and curve data.
        /// </summary>
        /// <value>Whilst a cash flow is defined by an (amount,ccy) pair and the date it is paid on there is additional information required for diagnostics. This includes a range of information and can be empty in the case of a simple cash quantity or where further information is not available. Typical information includes items such as reset dates, RIC, accrual start/end, number of days and curve data.</value>
        [DataMember(Name = "diagnostics", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Diagnostics { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstrumentCashFlow {\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  SourcePortfolioId: ").Append(SourcePortfolioId).Append("\n");
            sb.Append("  SourceTransactionId: ").Append(SourceTransactionId).Append("\n");
            sb.Append("  SourceInstrumentScope: ").Append(SourceInstrumentScope).Append("\n");
            sb.Append("  SourceInstrumentId: ").Append(SourceInstrumentId).Append("\n");
            sb.Append("  Diagnostics: ").Append(Diagnostics).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentCashFlow);
        }

        /// <summary>
        /// Returns true if InstrumentCashFlow instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentCashFlow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentCashFlow input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.SourcePortfolioId == input.SourcePortfolioId ||
                    (this.SourcePortfolioId != null &&
                    this.SourcePortfolioId.Equals(input.SourcePortfolioId))
                ) && 
                (
                    this.SourceTransactionId == input.SourceTransactionId ||
                    (this.SourceTransactionId != null &&
                    this.SourceTransactionId.Equals(input.SourceTransactionId))
                ) && 
                (
                    this.SourceInstrumentScope == input.SourceInstrumentScope ||
                    (this.SourceInstrumentScope != null &&
                    this.SourceInstrumentScope.Equals(input.SourceInstrumentScope))
                ) && 
                (
                    this.SourceInstrumentId == input.SourceInstrumentId ||
                    (this.SourceInstrumentId != null &&
                    this.SourceInstrumentId.Equals(input.SourceInstrumentId))
                ) && 
                (
                    this.Diagnostics == input.Diagnostics ||
                    this.Diagnostics != null &&
                    input.Diagnostics != null &&
                    this.Diagnostics.SequenceEqual(input.Diagnostics)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDate.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.SourcePortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.SourcePortfolioId.GetHashCode();
                }
                if (this.SourceTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceTransactionId.GetHashCode();
                }
                if (this.SourceInstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.SourceInstrumentScope.GetHashCode();
                }
                if (this.SourceInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceInstrumentId.GetHashCode();
                }
                if (this.Diagnostics != null)
                {
                    hashCode = (hashCode * 59) + this.Diagnostics.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SourceTransactionId (string) minLength
            if (this.SourceTransactionId != null && this.SourceTransactionId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceTransactionId, length must be greater than 1.", new [] { "SourceTransactionId" });
            }

            // SourceInstrumentScope (string) minLength
            if (this.SourceInstrumentScope != null && this.SourceInstrumentScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceInstrumentScope, length must be greater than 1.", new [] { "SourceInstrumentScope" });
            }

            // SourceInstrumentId (string) minLength
            if (this.SourceInstrumentId != null && this.SourceInstrumentId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceInstrumentId, length must be greater than 1.", new [] { "SourceInstrumentId" });
            }

            yield break;
        }
    }
}
