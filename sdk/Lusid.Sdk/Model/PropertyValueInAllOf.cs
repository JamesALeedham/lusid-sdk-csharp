/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// PropertyValueInAllOf
    /// </summary>
    [DataContract(Name = "PropertyValueIn_allOf")]
    public partial class PropertyValueInAllOf : IEquatable<PropertyValueInAllOf>, IValidatableObject
    {
        /// <summary>
        /// The available values are: PropertyValueEquals, PropertyValueIn, SubHoldingKeyValueEquals
        /// </summary>
        /// <value>The available values are: PropertyValueEquals, PropertyValueIn, SubHoldingKeyValueEquals</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CriterionTypeEnum
        {
            /// <summary>
            /// Enum PropertyValueEquals for value: PropertyValueEquals
            /// </summary>
            [EnumMember(Value = "PropertyValueEquals")]
            PropertyValueEquals = 1,

            /// <summary>
            /// Enum PropertyValueIn for value: PropertyValueIn
            /// </summary>
            [EnumMember(Value = "PropertyValueIn")]
            PropertyValueIn = 2,

            /// <summary>
            /// Enum SubHoldingKeyValueEquals for value: SubHoldingKeyValueEquals
            /// </summary>
            [EnumMember(Value = "SubHoldingKeyValueEquals")]
            SubHoldingKeyValueEquals = 3

        }


        /// <summary>
        /// The available values are: PropertyValueEquals, PropertyValueIn, SubHoldingKeyValueEquals
        /// </summary>
        /// <value>The available values are: PropertyValueEquals, PropertyValueIn, SubHoldingKeyValueEquals</value>
        [DataMember(Name = "criterionType", IsRequired = true, EmitDefaultValue = true)]
        public CriterionTypeEnum CriterionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValueInAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PropertyValueInAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValueInAllOf" /> class.
        /// </summary>
        /// <param name="propertyKey">The property key whose value will form the left-hand side of the operation (required).</param>
        /// <param name="value">The value to be compared against (required).</param>
        /// <param name="criterionType">The available values are: PropertyValueEquals, PropertyValueIn, SubHoldingKeyValueEquals (required).</param>
        public PropertyValueInAllOf(string propertyKey = default(string), List<string> value = default(List<string>), CriterionTypeEnum criterionType = default(CriterionTypeEnum))
        {
            // to ensure "propertyKey" is required (not null)
            if (propertyKey == null)
            {
                throw new ArgumentNullException("propertyKey is a required property for PropertyValueInAllOf and cannot be null");
            }
            this.PropertyKey = propertyKey;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for PropertyValueInAllOf and cannot be null");
            }
            this.Value = value;
            this.CriterionType = criterionType;
        }

        /// <summary>
        /// The property key whose value will form the left-hand side of the operation
        /// </summary>
        /// <value>The property key whose value will form the left-hand side of the operation</value>
        [DataMember(Name = "propertyKey", IsRequired = true, EmitDefaultValue = true)]
        public string PropertyKey { get; set; }

        /// <summary>
        /// The value to be compared against
        /// </summary>
        /// <value>The value to be compared against</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropertyValueInAllOf {\n");
            sb.Append("  PropertyKey: ").Append(PropertyKey).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CriterionType: ").Append(CriterionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertyValueInAllOf);
        }

        /// <summary>
        /// Returns true if PropertyValueInAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertyValueInAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertyValueInAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PropertyKey == input.PropertyKey ||
                    (this.PropertyKey != null &&
                    this.PropertyKey.Equals(input.PropertyKey))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value != null &&
                    input.Value != null &&
                    this.Value.SequenceEqual(input.Value)
                ) && 
                (
                    this.CriterionType == input.CriterionType ||
                    this.CriterionType.Equals(input.CriterionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PropertyKey != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyKey.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CriterionType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
