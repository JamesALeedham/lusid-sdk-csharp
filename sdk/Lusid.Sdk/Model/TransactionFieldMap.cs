/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// TransactionFieldMap
    /// </summary>
    [DataContract(Name = "TransactionFieldMap")]
    public partial class TransactionFieldMap : IEquatable<TransactionFieldMap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionFieldMap" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionFieldMap() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionFieldMap" /> class.
        /// </summary>
        /// <param name="transactionId">transactionId (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="source">source (required).</param>
        /// <param name="lusidInstrumentId">lusidInstrumentId (required).</param>
        /// <param name="instrumentScope">instrumentScope (required).</param>
        /// <param name="tradeDate">tradeDate (required).</param>
        /// <param name="settlementDate">settlementDate (required).</param>
        /// <param name="units">units (required).</param>
        /// <param name="transactionPrice">transactionPrice (required).</param>
        /// <param name="transactionCurrency">transactionCurrency (required).</param>
        /// <param name="exchangeRate">exchangeRate (required).</param>
        /// <param name="totalConsideration">totalConsideration (required).</param>
        /// <param name="settlementCurrency">settlementCurrency (required).</param>
        public TransactionFieldMap(string transactionId = default(string), string type = default(string), string source = default(string), string lusidInstrumentId = default(string), string instrumentScope = default(string), string tradeDate = default(string), string settlementDate = default(string), string units = default(string), TransactionPriceAndType transactionPrice = default(TransactionPriceAndType), string transactionCurrency = default(string), string exchangeRate = default(string), TransactionCurrencyAndAmount totalConsideration = default(TransactionCurrencyAndAmount), string settlementCurrency = default(string))
        {
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new ArgumentNullException("transactionId is a required property for TransactionFieldMap and cannot be null");
            }
            this.TransactionId = transactionId;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for TransactionFieldMap and cannot be null");
            }
            this.Type = type;
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new ArgumentNullException("source is a required property for TransactionFieldMap and cannot be null");
            }
            this.Source = source;
            // to ensure "lusidInstrumentId" is required (not null)
            if (lusidInstrumentId == null)
            {
                throw new ArgumentNullException("lusidInstrumentId is a required property for TransactionFieldMap and cannot be null");
            }
            this.LusidInstrumentId = lusidInstrumentId;
            // to ensure "instrumentScope" is required (not null)
            if (instrumentScope == null)
            {
                throw new ArgumentNullException("instrumentScope is a required property for TransactionFieldMap and cannot be null");
            }
            this.InstrumentScope = instrumentScope;
            // to ensure "tradeDate" is required (not null)
            if (tradeDate == null)
            {
                throw new ArgumentNullException("tradeDate is a required property for TransactionFieldMap and cannot be null");
            }
            this.TradeDate = tradeDate;
            // to ensure "settlementDate" is required (not null)
            if (settlementDate == null)
            {
                throw new ArgumentNullException("settlementDate is a required property for TransactionFieldMap and cannot be null");
            }
            this.SettlementDate = settlementDate;
            // to ensure "units" is required (not null)
            if (units == null)
            {
                throw new ArgumentNullException("units is a required property for TransactionFieldMap and cannot be null");
            }
            this.Units = units;
            // to ensure "transactionPrice" is required (not null)
            if (transactionPrice == null)
            {
                throw new ArgumentNullException("transactionPrice is a required property for TransactionFieldMap and cannot be null");
            }
            this.TransactionPrice = transactionPrice;
            // to ensure "transactionCurrency" is required (not null)
            if (transactionCurrency == null)
            {
                throw new ArgumentNullException("transactionCurrency is a required property for TransactionFieldMap and cannot be null");
            }
            this.TransactionCurrency = transactionCurrency;
            // to ensure "exchangeRate" is required (not null)
            if (exchangeRate == null)
            {
                throw new ArgumentNullException("exchangeRate is a required property for TransactionFieldMap and cannot be null");
            }
            this.ExchangeRate = exchangeRate;
            // to ensure "totalConsideration" is required (not null)
            if (totalConsideration == null)
            {
                throw new ArgumentNullException("totalConsideration is a required property for TransactionFieldMap and cannot be null");
            }
            this.TotalConsideration = totalConsideration;
            // to ensure "settlementCurrency" is required (not null)
            if (settlementCurrency == null)
            {
                throw new ArgumentNullException("settlementCurrency is a required property for TransactionFieldMap and cannot be null");
            }
            this.SettlementCurrency = settlementCurrency;
        }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets LusidInstrumentId
        /// </summary>
        [DataMember(Name = "lusidInstrumentId", IsRequired = true, EmitDefaultValue = true)]
        public string LusidInstrumentId { get; set; }

        /// <summary>
        /// Gets or Sets InstrumentScope
        /// </summary>
        [DataMember(Name = "instrumentScope", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentScope { get; set; }

        /// <summary>
        /// Gets or Sets TradeDate
        /// </summary>
        [DataMember(Name = "tradeDate", IsRequired = true, EmitDefaultValue = true)]
        public string TradeDate { get; set; }

        /// <summary>
        /// Gets or Sets SettlementDate
        /// </summary>
        [DataMember(Name = "settlementDate", IsRequired = true, EmitDefaultValue = true)]
        public string SettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", IsRequired = true, EmitDefaultValue = true)]
        public string Units { get; set; }

        /// <summary>
        /// Gets or Sets TransactionPrice
        /// </summary>
        [DataMember(Name = "transactionPrice", IsRequired = true, EmitDefaultValue = true)]
        public TransactionPriceAndType TransactionPrice { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCurrency
        /// </summary>
        [DataMember(Name = "transactionCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name = "exchangeRate", IsRequired = true, EmitDefaultValue = true)]
        public string ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets TotalConsideration
        /// </summary>
        [DataMember(Name = "totalConsideration", IsRequired = true, EmitDefaultValue = true)]
        public TransactionCurrencyAndAmount TotalConsideration { get; set; }

        /// <summary>
        /// Gets or Sets SettlementCurrency
        /// </summary>
        [DataMember(Name = "settlementCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string SettlementCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionFieldMap {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  LusidInstrumentId: ").Append(LusidInstrumentId).Append("\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  TradeDate: ").Append(TradeDate).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  TransactionPrice: ").Append(TransactionPrice).Append("\n");
            sb.Append("  TransactionCurrency: ").Append(TransactionCurrency).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  TotalConsideration: ").Append(TotalConsideration).Append("\n");
            sb.Append("  SettlementCurrency: ").Append(SettlementCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionFieldMap);
        }

        /// <summary>
        /// Returns true if TransactionFieldMap instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionFieldMap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionFieldMap input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.LusidInstrumentId == input.LusidInstrumentId ||
                    (this.LusidInstrumentId != null &&
                    this.LusidInstrumentId.Equals(input.LusidInstrumentId))
                ) && 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.TradeDate == input.TradeDate ||
                    (this.TradeDate != null &&
                    this.TradeDate.Equals(input.TradeDate))
                ) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.TransactionPrice == input.TransactionPrice ||
                    (this.TransactionPrice != null &&
                    this.TransactionPrice.Equals(input.TransactionPrice))
                ) && 
                (
                    this.TransactionCurrency == input.TransactionCurrency ||
                    (this.TransactionCurrency != null &&
                    this.TransactionCurrency.Equals(input.TransactionCurrency))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.TotalConsideration == input.TotalConsideration ||
                    (this.TotalConsideration != null &&
                    this.TotalConsideration.Equals(input.TotalConsideration))
                ) && 
                (
                    this.SettlementCurrency == input.SettlementCurrency ||
                    (this.SettlementCurrency != null &&
                    this.SettlementCurrency.Equals(input.SettlementCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.LusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentId.GetHashCode();
                }
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.TradeDate != null)
                {
                    hashCode = (hashCode * 59) + this.TradeDate.GetHashCode();
                }
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                if (this.Units != null)
                {
                    hashCode = (hashCode * 59) + this.Units.GetHashCode();
                }
                if (this.TransactionPrice != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionPrice.GetHashCode();
                }
                if (this.TransactionCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionCurrency.GetHashCode();
                }
                if (this.ExchangeRate != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeRate.GetHashCode();
                }
                if (this.TotalConsideration != null)
                {
                    hashCode = (hashCode * 59) + this.TotalConsideration.GetHashCode();
                }
                if (this.SettlementCurrency != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementCurrency.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TransactionId (string) maxLength
            if (this.TransactionId != null && this.TransactionId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 1024.", new [] { "TransactionId" });
            }

            // TransactionId (string) minLength
            if (this.TransactionId != null && this.TransactionId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be greater than 0.", new [] { "TransactionId" });
            }

            // Type (string) maxLength
            if (this.Type != null && this.Type.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 1024.", new [] { "Type" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 0.", new [] { "Type" });
            }

            // Source (string) maxLength
            if (this.Source != null && this.Source.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Source, length must be less than 1024.", new [] { "Source" });
            }

            // Source (string) minLength
            if (this.Source != null && this.Source.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Source, length must be greater than 0.", new [] { "Source" });
            }

            // LusidInstrumentId (string) maxLength
            if (this.LusidInstrumentId != null && this.LusidInstrumentId.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LusidInstrumentId, length must be less than 1024.", new [] { "LusidInstrumentId" });
            }

            // LusidInstrumentId (string) minLength
            if (this.LusidInstrumentId != null && this.LusidInstrumentId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LusidInstrumentId, length must be greater than 0.", new [] { "LusidInstrumentId" });
            }

            // InstrumentScope (string) maxLength
            if (this.InstrumentScope != null && this.InstrumentScope.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, length must be less than 1024.", new [] { "InstrumentScope" });
            }

            // InstrumentScope (string) minLength
            if (this.InstrumentScope != null && this.InstrumentScope.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentScope, length must be greater than 0.", new [] { "InstrumentScope" });
            }

            // TradeDate (string) maxLength
            if (this.TradeDate != null && this.TradeDate.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TradeDate, length must be less than 1024.", new [] { "TradeDate" });
            }

            // TradeDate (string) minLength
            if (this.TradeDate != null && this.TradeDate.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TradeDate, length must be greater than 0.", new [] { "TradeDate" });
            }

            // SettlementDate (string) maxLength
            if (this.SettlementDate != null && this.SettlementDate.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementDate, length must be less than 1024.", new [] { "SettlementDate" });
            }

            // SettlementDate (string) minLength
            if (this.SettlementDate != null && this.SettlementDate.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementDate, length must be greater than 0.", new [] { "SettlementDate" });
            }

            // Units (string) maxLength
            if (this.Units != null && this.Units.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Units, length must be less than 1024.", new [] { "Units" });
            }

            // Units (string) minLength
            if (this.Units != null && this.Units.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Units, length must be greater than 0.", new [] { "Units" });
            }

            // TransactionCurrency (string) maxLength
            if (this.TransactionCurrency != null && this.TransactionCurrency.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionCurrency, length must be less than 1024.", new [] { "TransactionCurrency" });
            }

            // TransactionCurrency (string) minLength
            if (this.TransactionCurrency != null && this.TransactionCurrency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionCurrency, length must be greater than 0.", new [] { "TransactionCurrency" });
            }

            // ExchangeRate (string) maxLength
            if (this.ExchangeRate != null && this.ExchangeRate.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExchangeRate, length must be less than 1024.", new [] { "ExchangeRate" });
            }

            // ExchangeRate (string) minLength
            if (this.ExchangeRate != null && this.ExchangeRate.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExchangeRate, length must be greater than 0.", new [] { "ExchangeRate" });
            }

            // SettlementCurrency (string) maxLength
            if (this.SettlementCurrency != null && this.SettlementCurrency.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementCurrency, length must be less than 1024.", new [] { "SettlementCurrency" });
            }

            // SettlementCurrency (string) minLength
            if (this.SettlementCurrency != null && this.SettlementCurrency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementCurrency, length must be greater than 0.", new [] { "SettlementCurrency" });
            }

            yield break;
        }
    }
}
