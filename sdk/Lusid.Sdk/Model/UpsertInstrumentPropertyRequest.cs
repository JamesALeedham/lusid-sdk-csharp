/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpsertInstrumentPropertyRequest
    /// </summary>
    [DataContract(Name = "UpsertInstrumentPropertyRequest")]
    public partial class UpsertInstrumentPropertyRequest : IEquatable<UpsertInstrumentPropertyRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertInstrumentPropertyRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertInstrumentPropertyRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertInstrumentPropertyRequest" /> class.
        /// </summary>
        /// <param name="identifierType">The unique identifier type to search for the instrument, for example &#39;Figi&#39;. (required).</param>
        /// <param name="identifier">A value of that type to identify the instrument to upsert properties for, for example &#39;BBG000BLNNV0&#39;. (required).</param>
        /// <param name="properties">A set of instrument properties and associated values to store for the instrument. Each property must be from the &#39;Instrument&#39; domain..</param>
        public UpsertInstrumentPropertyRequest(string identifierType = default(string), string identifier = default(string), List<Property> properties = default(List<Property>))
        {
            // to ensure "identifierType" is required (not null)
            if (identifierType == null)
            {
                throw new ArgumentNullException("identifierType is a required property for UpsertInstrumentPropertyRequest and cannot be null");
            }
            this.IdentifierType = identifierType;
            // to ensure "identifier" is required (not null)
            if (identifier == null)
            {
                throw new ArgumentNullException("identifier is a required property for UpsertInstrumentPropertyRequest and cannot be null");
            }
            this.Identifier = identifier;
            this.Properties = properties;
        }

        /// <summary>
        /// The unique identifier type to search for the instrument, for example &#39;Figi&#39;.
        /// </summary>
        /// <value>The unique identifier type to search for the instrument, for example &#39;Figi&#39;.</value>
        [DataMember(Name = "identifierType", IsRequired = true, EmitDefaultValue = true)]
        public string IdentifierType { get; set; }

        /// <summary>
        /// A value of that type to identify the instrument to upsert properties for, for example &#39;BBG000BLNNV0&#39;.
        /// </summary>
        /// <value>A value of that type to identify the instrument to upsert properties for, for example &#39;BBG000BLNNV0&#39;.</value>
        [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = true)]
        public string Identifier { get; set; }

        /// <summary>
        /// A set of instrument properties and associated values to store for the instrument. Each property must be from the &#39;Instrument&#39; domain.
        /// </summary>
        /// <value>A set of instrument properties and associated values to store for the instrument. Each property must be from the &#39;Instrument&#39; domain.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public List<Property> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpsertInstrumentPropertyRequest {\n");
            sb.Append("  IdentifierType: ").Append(IdentifierType).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertInstrumentPropertyRequest);
        }

        /// <summary>
        /// Returns true if UpsertInstrumentPropertyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertInstrumentPropertyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertInstrumentPropertyRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IdentifierType == input.IdentifierType ||
                    (this.IdentifierType != null &&
                    this.IdentifierType.Equals(input.IdentifierType))
                ) && 
                (
                    this.Identifier == input.Identifier ||
                    (this.Identifier != null &&
                    this.Identifier.Equals(input.Identifier))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdentifierType != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierType.GetHashCode();
                }
                if (this.Identifier != null)
                {
                    hashCode = (hashCode * 59) + this.Identifier.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IdentifierType (string) minLength
            if (this.IdentifierType != null && this.IdentifierType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierType, length must be greater than 1.", new [] { "IdentifierType" });
            }

            // Identifier (string) minLength
            if (this.Identifier != null && this.Identifier.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Identifier, length must be greater than 1.", new [] { "Identifier" });
            }

            yield break;
        }
    }
}
