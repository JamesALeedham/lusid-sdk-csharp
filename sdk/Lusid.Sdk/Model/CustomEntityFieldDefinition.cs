/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CustomEntityFieldDefinition
    /// </summary>
    [DataContract(Name = "CustomEntityFieldDefinition")]
    public partial class CustomEntityFieldDefinition : IEquatable<CustomEntityFieldDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEntityFieldDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEntityFieldDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEntityFieldDefinition" /> class.
        /// </summary>
        /// <param name="name">The name of the field. (required).</param>
        /// <param name="lifetime">Describes how the field’s values can change over time. The available values are: “Perpetual”, “TimeVariant”. (required).</param>
        /// <param name="type">The value type for the field. Available values are: “String”, “Boolean”, “DateTime”, “Decimal”. (required).</param>
        /// <param name="collectionType">The collection type for the field. Available values are: “Single”, “Array”. Null value defaults to “Single”.</param>
        /// <param name="required">Whether the field is required or not. (required).</param>
        /// <param name="description">An optional description for the field..</param>
        public CustomEntityFieldDefinition(string name = default(string), string lifetime = default(string), string type = default(string), string collectionType = default(string), bool required = default(bool), string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CustomEntityFieldDefinition and cannot be null");
            }
            this.Name = name;
            // to ensure "lifetime" is required (not null)
            if (lifetime == null)
            {
                throw new ArgumentNullException("lifetime is a required property for CustomEntityFieldDefinition and cannot be null");
            }
            this.Lifetime = lifetime;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for CustomEntityFieldDefinition and cannot be null");
            }
            this.Type = type;
            this.Required = required;
            this.CollectionType = collectionType;
            this.Description = description;
        }

        /// <summary>
        /// The name of the field.
        /// </summary>
        /// <value>The name of the field.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Describes how the field’s values can change over time. The available values are: “Perpetual”, “TimeVariant”.
        /// </summary>
        /// <value>Describes how the field’s values can change over time. The available values are: “Perpetual”, “TimeVariant”.</value>
        [DataMember(Name = "lifetime", IsRequired = true, EmitDefaultValue = true)]
        public string Lifetime { get; set; }

        /// <summary>
        /// The value type for the field. Available values are: “String”, “Boolean”, “DateTime”, “Decimal”.
        /// </summary>
        /// <value>The value type for the field. Available values are: “String”, “Boolean”, “DateTime”, “Decimal”.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The collection type for the field. Available values are: “Single”, “Array”. Null value defaults to “Single”
        /// </summary>
        /// <value>The collection type for the field. Available values are: “Single”, “Array”. Null value defaults to “Single”</value>
        [DataMember(Name = "collectionType", EmitDefaultValue = true)]
        public string CollectionType { get; set; }

        /// <summary>
        /// Whether the field is required or not.
        /// </summary>
        /// <value>Whether the field is required or not.</value>
        [DataMember(Name = "required", IsRequired = true, EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// An optional description for the field.
        /// </summary>
        /// <value>An optional description for the field.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomEntityFieldDefinition {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Lifetime: ").Append(Lifetime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CollectionType: ").Append(CollectionType).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEntityFieldDefinition);
        }

        /// <summary>
        /// Returns true if CustomEntityFieldDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEntityFieldDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEntityFieldDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Lifetime == input.Lifetime ||
                    (this.Lifetime != null &&
                    this.Lifetime.Equals(input.Lifetime))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.CollectionType == input.CollectionType ||
                    (this.CollectionType != null &&
                    this.CollectionType.Equals(input.CollectionType))
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Lifetime != null)
                {
                    hashCode = (hashCode * 59) + this.Lifetime.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.CollectionType != null)
                {
                    hashCode = (hashCode * 59) + this.CollectionType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Lifetime (string) minLength
            if (this.Lifetime != null && this.Lifetime.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lifetime, length must be greater than 1.", new [] { "Lifetime" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 512.", new [] { "Description" });
            }

            yield break;
        }
    }
}
