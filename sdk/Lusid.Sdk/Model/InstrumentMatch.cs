/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A collection of instrument search results
    /// </summary>
    [DataContract(Name = "InstrumentMatch")]
    public partial class InstrumentMatch : IEquatable<InstrumentMatch>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentMatch" /> class.
        /// </summary>
        /// <param name="masteredInstruments">The collection of instruments found by the search which have been mastered within LUSID..</param>
        /// <param name="externalInstruments">The collection of instruments found by the search which have not been mastered within LUSID and instead found via OpenFIGI..</param>
        public InstrumentMatch(List<InstrumentDefinition> masteredInstruments = default(List<InstrumentDefinition>), List<InstrumentDefinition> externalInstruments = default(List<InstrumentDefinition>))
        {
            this.MasteredInstruments = masteredInstruments;
            this.ExternalInstruments = externalInstruments;
        }

        /// <summary>
        /// The collection of instruments found by the search which have been mastered within LUSID.
        /// </summary>
        /// <value>The collection of instruments found by the search which have been mastered within LUSID.</value>
        [DataMember(Name = "masteredInstruments", EmitDefaultValue = true)]
        public List<InstrumentDefinition> MasteredInstruments { get; set; }

        /// <summary>
        /// The collection of instruments found by the search which have not been mastered within LUSID and instead found via OpenFIGI.
        /// </summary>
        /// <value>The collection of instruments found by the search which have not been mastered within LUSID and instead found via OpenFIGI.</value>
        [DataMember(Name = "externalInstruments", EmitDefaultValue = true)]
        public List<InstrumentDefinition> ExternalInstruments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstrumentMatch {\n");
            sb.Append("  MasteredInstruments: ").Append(MasteredInstruments).Append("\n");
            sb.Append("  ExternalInstruments: ").Append(ExternalInstruments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentMatch);
        }

        /// <summary>
        /// Returns true if InstrumentMatch instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentMatch to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentMatch input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MasteredInstruments == input.MasteredInstruments ||
                    this.MasteredInstruments != null &&
                    input.MasteredInstruments != null &&
                    this.MasteredInstruments.SequenceEqual(input.MasteredInstruments)
                ) && 
                (
                    this.ExternalInstruments == input.ExternalInstruments ||
                    this.ExternalInstruments != null &&
                    input.ExternalInstruments != null &&
                    this.ExternalInstruments.SequenceEqual(input.ExternalInstruments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MasteredInstruments != null)
                {
                    hashCode = (hashCode * 59) + this.MasteredInstruments.GetHashCode();
                }
                if (this.ExternalInstruments != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalInstruments.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
