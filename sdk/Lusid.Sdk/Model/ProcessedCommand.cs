/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The list of commands.
    /// </summary>
    [DataContract(Name = "ProcessedCommand")]
    public partial class ProcessedCommand : IEquatable<ProcessedCommand>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessedCommand" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessedCommand() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessedCommand" /> class.
        /// </summary>
        /// <param name="description">The description of the command issued. (required).</param>
        /// <param name="path">The unique identifier for the command including the request id..</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="processedTime">The asAt datetime that the events published by the processing of this command were committed to LUSID. (required).</param>
        public ProcessedCommand(string description = default(string), string path = default(string), User userId = default(User), DateTimeOffset processedTime = default(DateTimeOffset))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ProcessedCommand and cannot be null");
            }
            this.Description = description;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for ProcessedCommand and cannot be null");
            }
            this.UserId = userId;
            this.ProcessedTime = processedTime;
            this.Path = path;
        }

        /// <summary>
        /// The description of the command issued.
        /// </summary>
        /// <value>The description of the command issued.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier for the command including the request id.
        /// </summary>
        /// <value>The unique identifier for the command including the request id.</value>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public User UserId { get; set; }

        /// <summary>
        /// The asAt datetime that the events published by the processing of this command were committed to LUSID.
        /// </summary>
        /// <value>The asAt datetime that the events published by the processing of this command were committed to LUSID.</value>
        [DataMember(Name = "processedTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ProcessedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessedCommand {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ProcessedTime: ").Append(ProcessedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessedCommand);
        }

        /// <summary>
        /// Returns true if ProcessedCommand instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessedCommand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessedCommand input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ProcessedTime == input.ProcessedTime ||
                    (this.ProcessedTime != null &&
                    this.ProcessedTime.Equals(input.ProcessedTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.ProcessedTime != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessedTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 1.", new [] { "Description" });
            }

            yield break;
        }
    }
}
