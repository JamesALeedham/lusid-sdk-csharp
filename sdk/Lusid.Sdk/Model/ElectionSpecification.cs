/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ElectionSpecification
    /// </summary>
    [DataContract(Name = "ElectionSpecification")]
    public partial class ElectionSpecification : IEquatable<ElectionSpecification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectionSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ElectionSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ElectionSpecification" /> class.
        /// </summary>
        /// <param name="electionType">electionType (required).</param>
        /// <param name="cardinality">cardinality (required).</param>
        /// <param name="referencedAs">referencedAs (required).</param>
        public ElectionSpecification(string electionType = default(string), Dictionary<string, string> cardinality = default(Dictionary<string, string>), List<string> referencedAs = default(List<string>))
        {
            // to ensure "electionType" is required (not null)
            if (electionType == null)
            {
                throw new ArgumentNullException("electionType is a required property for ElectionSpecification and cannot be null");
            }
            this.ElectionType = electionType;
            // to ensure "cardinality" is required (not null)
            if (cardinality == null)
            {
                throw new ArgumentNullException("cardinality is a required property for ElectionSpecification and cannot be null");
            }
            this.Cardinality = cardinality;
            // to ensure "referencedAs" is required (not null)
            if (referencedAs == null)
            {
                throw new ArgumentNullException("referencedAs is a required property for ElectionSpecification and cannot be null");
            }
            this.ReferencedAs = referencedAs;
        }

        /// <summary>
        /// Gets or Sets ElectionType
        /// </summary>
        [DataMember(Name = "electionType", IsRequired = true, EmitDefaultValue = true)]
        public string ElectionType { get; set; }

        /// <summary>
        /// Gets or Sets Cardinality
        /// </summary>
        [DataMember(Name = "cardinality", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Cardinality { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedAs
        /// </summary>
        [DataMember(Name = "referencedAs", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ReferencedAs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ElectionSpecification {\n");
            sb.Append("  ElectionType: ").Append(ElectionType).Append("\n");
            sb.Append("  Cardinality: ").Append(Cardinality).Append("\n");
            sb.Append("  ReferencedAs: ").Append(ReferencedAs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ElectionSpecification);
        }

        /// <summary>
        /// Returns true if ElectionSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of ElectionSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ElectionSpecification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ElectionType == input.ElectionType ||
                    (this.ElectionType != null &&
                    this.ElectionType.Equals(input.ElectionType))
                ) && 
                (
                    this.Cardinality == input.Cardinality ||
                    this.Cardinality != null &&
                    input.Cardinality != null &&
                    this.Cardinality.SequenceEqual(input.Cardinality)
                ) && 
                (
                    this.ReferencedAs == input.ReferencedAs ||
                    this.ReferencedAs != null &&
                    input.ReferencedAs != null &&
                    this.ReferencedAs.SequenceEqual(input.ReferencedAs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ElectionType != null)
                {
                    hashCode = (hashCode * 59) + this.ElectionType.GetHashCode();
                }
                if (this.Cardinality != null)
                {
                    hashCode = (hashCode * 59) + this.Cardinality.GetHashCode();
                }
                if (this.ReferencedAs != null)
                {
                    hashCode = (hashCode * 59) + this.ReferencedAs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ElectionType (string) minLength
            if (this.ElectionType != null && this.ElectionType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ElectionType, length must be greater than 1.", new [] { "ElectionType" });
            }

            yield break;
        }
    }
}
