/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpsertResultValuesDataRequest
    /// </summary>
    [DataContract(Name = "UpsertResultValuesDataRequest")]
    public partial class UpsertResultValuesDataRequest : IEquatable<UpsertResultValuesDataRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertResultValuesDataRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertResultValuesDataRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertResultValuesDataRequest" /> class.
        /// </summary>
        /// <param name="documentId">documentId (required).</param>
        /// <param name="key">The structured unit result data key..</param>
        /// <param name="dataAddress">The address of the piece of unit result data.</param>
        /// <param name="resultValue">resultValue.</param>
        public UpsertResultValuesDataRequest(StructuredResultDataId documentId = default(StructuredResultDataId), Dictionary<string, string> key = default(Dictionary<string, string>), string dataAddress = default(string), ResultValue resultValue = default(ResultValue))
        {
            // to ensure "documentId" is required (not null)
            if (documentId == null)
            {
                throw new ArgumentNullException("documentId is a required property for UpsertResultValuesDataRequest and cannot be null");
            }
            this.DocumentId = documentId;
            this.Key = key;
            this.DataAddress = dataAddress;
            this.ResultValue = resultValue;
        }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        [DataMember(Name = "documentId", IsRequired = true, EmitDefaultValue = true)]
        public StructuredResultDataId DocumentId { get; set; }

        /// <summary>
        /// The structured unit result data key.
        /// </summary>
        /// <value>The structured unit result data key.</value>
        [DataMember(Name = "key", EmitDefaultValue = true)]
        public Dictionary<string, string> Key { get; set; }

        /// <summary>
        /// The address of the piece of unit result data
        /// </summary>
        /// <value>The address of the piece of unit result data</value>
        [DataMember(Name = "dataAddress", EmitDefaultValue = true)]
        public string DataAddress { get; set; }

        /// <summary>
        /// Gets or Sets ResultValue
        /// </summary>
        [DataMember(Name = "resultValue", EmitDefaultValue = false)]
        public ResultValue ResultValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpsertResultValuesDataRequest {\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  DataAddress: ").Append(DataAddress).Append("\n");
            sb.Append("  ResultValue: ").Append(ResultValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertResultValuesDataRequest);
        }

        /// <summary>
        /// Returns true if UpsertResultValuesDataRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertResultValuesDataRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertResultValuesDataRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.Key == input.Key ||
                    this.Key != null &&
                    input.Key != null &&
                    this.Key.SequenceEqual(input.Key)
                ) && 
                (
                    this.DataAddress == input.DataAddress ||
                    (this.DataAddress != null &&
                    this.DataAddress.Equals(input.DataAddress))
                ) && 
                (
                    this.ResultValue == input.ResultValue ||
                    (this.ResultValue != null &&
                    this.ResultValue.Equals(input.ResultValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.DataAddress != null)
                {
                    hashCode = (hashCode * 59) + this.DataAddress.GetHashCode();
                }
                if (this.ResultValue != null)
                {
                    hashCode = (hashCode * 59) + this.ResultValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
