/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CreateSequenceRequest
    /// </summary>
    [DataContract(Name = "CreateSequenceRequest")]
    public partial class CreateSequenceRequest : IEquatable<CreateSequenceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSequenceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateSequenceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSequenceRequest" /> class.
        /// </summary>
        /// <param name="code">The code of the sequence definition to create (required).</param>
        /// <param name="increment">The value to increment between each value in the sequence.</param>
        /// <param name="minValue">The minimum value of the sequence.</param>
        /// <param name="maxValue">The maximum value of the sequence.</param>
        /// <param name="start">The start value of the sequence.</param>
        /// <param name="cycle">Set to true to start the sequence over again when it reaches the end. Defaults to false if not provided..</param>
        /// <param name="pattern">The pattern to be used to generate next values in the sequence. Defaults to null if not provided..</param>
        public CreateSequenceRequest(string code = default(string), long? increment = default(long?), long? minValue = default(long?), long? maxValue = default(long?), long? start = default(long?), bool cycle = default(bool), string pattern = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for CreateSequenceRequest and cannot be null");
            }
            this.Code = code;
            this.Increment = increment;
            this.MinValue = minValue;
            this.MaxValue = maxValue;
            this.Start = start;
            this.Cycle = cycle;
            this.Pattern = pattern;
        }

        /// <summary>
        /// The code of the sequence definition to create
        /// </summary>
        /// <value>The code of the sequence definition to create</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// The value to increment between each value in the sequence
        /// </summary>
        /// <value>The value to increment between each value in the sequence</value>
        [DataMember(Name = "increment", EmitDefaultValue = true)]
        public long? Increment { get; set; }

        /// <summary>
        /// The minimum value of the sequence
        /// </summary>
        /// <value>The minimum value of the sequence</value>
        [DataMember(Name = "minValue", EmitDefaultValue = true)]
        public long? MinValue { get; set; }

        /// <summary>
        /// The maximum value of the sequence
        /// </summary>
        /// <value>The maximum value of the sequence</value>
        [DataMember(Name = "maxValue", EmitDefaultValue = true)]
        public long? MaxValue { get; set; }

        /// <summary>
        /// The start value of the sequence
        /// </summary>
        /// <value>The start value of the sequence</value>
        [DataMember(Name = "start", EmitDefaultValue = true)]
        public long? Start { get; set; }

        /// <summary>
        /// Set to true to start the sequence over again when it reaches the end. Defaults to false if not provided.
        /// </summary>
        /// <value>Set to true to start the sequence over again when it reaches the end. Defaults to false if not provided.</value>
        [DataMember(Name = "cycle", EmitDefaultValue = true)]
        public bool Cycle { get; set; }

        /// <summary>
        /// The pattern to be used to generate next values in the sequence. Defaults to null if not provided.
        /// </summary>
        /// <value>The pattern to be used to generate next values in the sequence. Defaults to null if not provided.</value>
        [DataMember(Name = "pattern", EmitDefaultValue = true)]
        public string Pattern { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateSequenceRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Increment: ").Append(Increment).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Cycle: ").Append(Cycle).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSequenceRequest);
        }

        /// <summary>
        /// Returns true if CreateSequenceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSequenceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSequenceRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Increment == input.Increment ||
                    (this.Increment != null &&
                    this.Increment.Equals(input.Increment))
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    (this.MinValue != null &&
                    this.MinValue.Equals(input.MinValue))
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    (this.MaxValue != null &&
                    this.MaxValue.Equals(input.MaxValue))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Cycle == input.Cycle ||
                    this.Cycle.Equals(input.Cycle)
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Increment != null)
                {
                    hashCode = (hashCode * 59) + this.Increment.GetHashCode();
                }
                if (this.MinValue != null)
                {
                    hashCode = (hashCode * 59) + this.MinValue.GetHashCode();
                }
                if (this.MaxValue != null)
                {
                    hashCode = (hashCode * 59) + this.MaxValue.GetHashCode();
                }
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Cycle.GetHashCode();
                if (this.Pattern != null)
                {
                    hashCode = (hashCode * 59) + this.Pattern.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 64.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Code (string) pattern
            Regex regexCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            // Pattern (string) maxLength
            if (this.Pattern != null && this.Pattern.Length > 44)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pattern, length must be less than 44.", new [] { "Pattern" });
            }

            // Pattern (string) minLength
            if (this.Pattern != null && this.Pattern.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pattern, length must be greater than 1.", new [] { "Pattern" });
            }

            // Pattern (string) pattern
            Regex regexPattern = new Regex(@"^[A-Za-z0-9_-]*\{\{seqValue\}\}[A-Za-z0-9_-]*$", RegexOptions.CultureInvariant);
            if (false == regexPattern.Match(this.Pattern).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Pattern, must match a pattern of " + regexPattern, new [] { "Pattern" });
            }

            yield break;
        }
    }
}
