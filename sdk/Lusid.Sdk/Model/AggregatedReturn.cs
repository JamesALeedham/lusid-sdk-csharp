/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A list of Aggregated Returns.
    /// </summary>
    [DataContract(Name = "AggregatedReturn")]
    public partial class AggregatedReturn : IEquatable<AggregatedReturn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedReturn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AggregatedReturn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedReturn" /> class.
        /// </summary>
        /// <param name="effectiveAt">The effectiveAt for the return. (required).</param>
        /// <param name="endOfPeriod">The end of period date. For the monthly period this will be the Month End Date. (required).</param>
        /// <param name="openingMarketValue">The opening market value..</param>
        /// <param name="closingMarketValue">The closing market value..</param>
        /// <param name="metricsValue">The value for the specified metric. (required).</param>
        /// <param name="frequency">Show the aggregated output returns on a Daily or Monthly period..</param>
        /// <param name="compositeMembers">The number of members in the Composite on the given day..</param>
        /// <param name="compositeMembersWithoutReturn">List containing Composite members which post no return on the given day..</param>
        public AggregatedReturn(DateTimeOffset effectiveAt = default(DateTimeOffset), DateTimeOffset endOfPeriod = default(DateTimeOffset), decimal? openingMarketValue = default(decimal?), decimal? closingMarketValue = default(decimal?), Dictionary<string, decimal> metricsValue = default(Dictionary<string, decimal>), string frequency = default(string), int? compositeMembers = default(int?), List<ResourceId> compositeMembersWithoutReturn = default(List<ResourceId>))
        {
            this.EffectiveAt = effectiveAt;
            this.EndOfPeriod = endOfPeriod;
            // to ensure "metricsValue" is required (not null)
            if (metricsValue == null)
            {
                throw new ArgumentNullException("metricsValue is a required property for AggregatedReturn and cannot be null");
            }
            this.MetricsValue = metricsValue;
            this.OpeningMarketValue = openingMarketValue;
            this.ClosingMarketValue = closingMarketValue;
            this.Frequency = frequency;
            this.CompositeMembers = compositeMembers;
            this.CompositeMembersWithoutReturn = compositeMembersWithoutReturn;
        }

        /// <summary>
        /// The effectiveAt for the return.
        /// </summary>
        /// <value>The effectiveAt for the return.</value>
        [DataMember(Name = "effectiveAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveAt { get; set; }

        /// <summary>
        /// The end of period date. For the monthly period this will be the Month End Date.
        /// </summary>
        /// <value>The end of period date. For the monthly period this will be the Month End Date.</value>
        [DataMember(Name = "endOfPeriod", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EndOfPeriod { get; set; }

        /// <summary>
        /// The opening market value.
        /// </summary>
        /// <value>The opening market value.</value>
        [DataMember(Name = "openingMarketValue", EmitDefaultValue = true)]
        public decimal? OpeningMarketValue { get; set; }

        /// <summary>
        /// The closing market value.
        /// </summary>
        /// <value>The closing market value.</value>
        [DataMember(Name = "closingMarketValue", EmitDefaultValue = true)]
        public decimal? ClosingMarketValue { get; set; }

        /// <summary>
        /// The value for the specified metric.
        /// </summary>
        /// <value>The value for the specified metric.</value>
        [DataMember(Name = "metricsValue", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, decimal> MetricsValue { get; set; }

        /// <summary>
        /// Show the aggregated output returns on a Daily or Monthly period.
        /// </summary>
        /// <value>Show the aggregated output returns on a Daily or Monthly period.</value>
        [DataMember(Name = "frequency", EmitDefaultValue = true)]
        public string Frequency { get; set; }

        /// <summary>
        /// The number of members in the Composite on the given day.
        /// </summary>
        /// <value>The number of members in the Composite on the given day.</value>
        [DataMember(Name = "compositeMembers", EmitDefaultValue = true)]
        public int? CompositeMembers { get; set; }

        /// <summary>
        /// List containing Composite members which post no return on the given day.
        /// </summary>
        /// <value>List containing Composite members which post no return on the given day.</value>
        [DataMember(Name = "compositeMembersWithoutReturn", EmitDefaultValue = true)]
        public List<ResourceId> CompositeMembersWithoutReturn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregatedReturn {\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  EndOfPeriod: ").Append(EndOfPeriod).Append("\n");
            sb.Append("  OpeningMarketValue: ").Append(OpeningMarketValue).Append("\n");
            sb.Append("  ClosingMarketValue: ").Append(ClosingMarketValue).Append("\n");
            sb.Append("  MetricsValue: ").Append(MetricsValue).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  CompositeMembers: ").Append(CompositeMembers).Append("\n");
            sb.Append("  CompositeMembersWithoutReturn: ").Append(CompositeMembersWithoutReturn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedReturn);
        }

        /// <summary>
        /// Returns true if AggregatedReturn instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedReturn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedReturn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.EndOfPeriod == input.EndOfPeriod ||
                    (this.EndOfPeriod != null &&
                    this.EndOfPeriod.Equals(input.EndOfPeriod))
                ) && 
                (
                    this.OpeningMarketValue == input.OpeningMarketValue ||
                    (this.OpeningMarketValue != null &&
                    this.OpeningMarketValue.Equals(input.OpeningMarketValue))
                ) && 
                (
                    this.ClosingMarketValue == input.ClosingMarketValue ||
                    (this.ClosingMarketValue != null &&
                    this.ClosingMarketValue.Equals(input.ClosingMarketValue))
                ) && 
                (
                    this.MetricsValue == input.MetricsValue ||
                    this.MetricsValue != null &&
                    input.MetricsValue != null &&
                    this.MetricsValue.SequenceEqual(input.MetricsValue)
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.CompositeMembers == input.CompositeMembers ||
                    (this.CompositeMembers != null &&
                    this.CompositeMembers.Equals(input.CompositeMembers))
                ) && 
                (
                    this.CompositeMembersWithoutReturn == input.CompositeMembersWithoutReturn ||
                    this.CompositeMembersWithoutReturn != null &&
                    input.CompositeMembersWithoutReturn != null &&
                    this.CompositeMembersWithoutReturn.SequenceEqual(input.CompositeMembersWithoutReturn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.EndOfPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.EndOfPeriod.GetHashCode();
                }
                if (this.OpeningMarketValue != null)
                {
                    hashCode = (hashCode * 59) + this.OpeningMarketValue.GetHashCode();
                }
                if (this.ClosingMarketValue != null)
                {
                    hashCode = (hashCode * 59) + this.ClosingMarketValue.GetHashCode();
                }
                if (this.MetricsValue != null)
                {
                    hashCode = (hashCode * 59) + this.MetricsValue.GetHashCode();
                }
                if (this.Frequency != null)
                {
                    hashCode = (hashCode * 59) + this.Frequency.GetHashCode();
                }
                if (this.CompositeMembers != null)
                {
                    hashCode = (hashCode * 59) + this.CompositeMembers.GetHashCode();
                }
                if (this.CompositeMembersWithoutReturn != null)
                {
                    hashCode = (hashCode * 59) + this.CompositeMembersWithoutReturn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
