/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// LUSID representation of an Inflation Swap.  The implementation supports the following swap types:  * Zero Coupon inflation swap, with a single payment at maturity.  * LPI Swap (capped and floored)  * Year on Year inflation swap
    /// </summary>
    [DataContract(Name = "InflationSwap")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class InflationSwap : LusidInstrument, IEquatable<InflationSwap>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InflationSwap" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InflationSwap() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InflationSwap" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the instrument. This is normally synonymous with the trade-date. (required).</param>
        /// <param name="maturityDate">The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it. (required).</param>
        /// <param name="flowConventions">flowConventions (required).</param>
        /// <param name="fixedRate">Fixed Rate (required).</param>
        /// <param name="inflationCap">Optional cap, needed for LPI swaps. Should not be set for ZCIIS..</param>
        /// <param name="inflationFloor">Optional floor, needed for LPI swaps. Should not be set for ZCIIS..</param>
        /// <param name="inflationFrequency">Frequency of inflation updated. Optional and defaults to Monthly which is the most common.  However both Australian and New Zealand inflation is published Quarterly. Only tenors of 1M or 3M are supported..</param>
        /// <param name="inflationIndexName">Name of the Inflation Index (required).</param>
        /// <param name="inflationInterpolation">Inflation Interpolation flag, defaults to Linear but some older swaps require Flat.    Supported string (enumeration) values are: [Linear, Flat]..</param>
        /// <param name="inflationRollDay">Day of the month that inflation rolls from one month to the next. This is optional and defaults to 1, which is  the typically value for the majority of inflation bonds (exceptions include Japan which rolls on the 10th  and some LatAm bonds which roll on the 15th)..</param>
        /// <param name="notional">The notional (required).</param>
        /// <param name="observationLag">Observation Lag, must be a number of Months, typically 3 or 4 but sometimes 8. (required).</param>
        /// <param name="payReceive">PayReceive flag for the inflation leg.  This field is optional and defaults to Pay.  If set to Pay, this swap pays inflation and receives fixed.    Supported string (enumeration) values are: [Pay, Receive]..</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CapFloor, CashSettled, CdsIndex, Basket, FundingLeg, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo, Equity, ExchangeTradedOption, ReferenceInstrument, ComplexBond, InflationLinkedBond, InflationSwap, SimpleCashFlowLoan, TotalReturnSwap (required) (default to &quot;InflationSwap&quot;).</param>
        public InflationSwap(DateTimeOffset startDate = default(DateTimeOffset), DateTimeOffset maturityDate = default(DateTimeOffset), FlowConventions flowConventions = default(FlowConventions), decimal fixedRate = default(decimal), decimal? inflationCap = default(decimal?), decimal? inflationFloor = default(decimal?), string inflationFrequency = default(string), string inflationIndexName = default(string), string inflationInterpolation = default(string), int inflationRollDay = default(int), decimal notional = default(decimal), string observationLag = default(string), string payReceive = default(string), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            this.StartDate = startDate;
            this.MaturityDate = maturityDate;
            // to ensure "flowConventions" is required (not null)
            if (flowConventions == null)
            {
                throw new ArgumentNullException("flowConventions is a required property for InflationSwap and cannot be null");
            }
            this.FlowConventions = flowConventions;
            this.FixedRate = fixedRate;
            // to ensure "inflationIndexName" is required (not null)
            if (inflationIndexName == null)
            {
                throw new ArgumentNullException("inflationIndexName is a required property for InflationSwap and cannot be null");
            }
            this.InflationIndexName = inflationIndexName;
            this.Notional = notional;
            // to ensure "observationLag" is required (not null)
            if (observationLag == null)
            {
                throw new ArgumentNullException("observationLag is a required property for InflationSwap and cannot be null");
            }
            this.ObservationLag = observationLag;
            this.InflationCap = inflationCap;
            this.InflationFloor = inflationFloor;
            this.InflationFrequency = inflationFrequency;
            this.InflationInterpolation = inflationInterpolation;
            this.InflationRollDay = inflationRollDay;
            this.PayReceive = payReceive;
        }

        /// <summary>
        /// The start date of the instrument. This is normally synonymous with the trade-date.
        /// </summary>
        /// <value>The start date of the instrument. This is normally synonymous with the trade-date.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.
        /// </summary>
        /// <value>The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates that may well be observed or set prior to the maturity date, but refer to a termination date beyond it.</value>
        [DataMember(Name = "maturityDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset MaturityDate { get; set; }

        /// <summary>
        /// Gets or Sets FlowConventions
        /// </summary>
        [DataMember(Name = "flowConventions", IsRequired = true, EmitDefaultValue = true)]
        public FlowConventions FlowConventions { get; set; }

        /// <summary>
        /// Fixed Rate
        /// </summary>
        /// <value>Fixed Rate</value>
        [DataMember(Name = "fixedRate", IsRequired = true, EmitDefaultValue = true)]
        public decimal FixedRate { get; set; }

        /// <summary>
        /// Optional cap, needed for LPI swaps. Should not be set for ZCIIS.
        /// </summary>
        /// <value>Optional cap, needed for LPI swaps. Should not be set for ZCIIS.</value>
        [DataMember(Name = "inflationCap", EmitDefaultValue = true)]
        public decimal? InflationCap { get; set; }

        /// <summary>
        /// Optional floor, needed for LPI swaps. Should not be set for ZCIIS.
        /// </summary>
        /// <value>Optional floor, needed for LPI swaps. Should not be set for ZCIIS.</value>
        [DataMember(Name = "inflationFloor", EmitDefaultValue = true)]
        public decimal? InflationFloor { get; set; }

        /// <summary>
        /// Frequency of inflation updated. Optional and defaults to Monthly which is the most common.  However both Australian and New Zealand inflation is published Quarterly. Only tenors of 1M or 3M are supported.
        /// </summary>
        /// <value>Frequency of inflation updated. Optional and defaults to Monthly which is the most common.  However both Australian and New Zealand inflation is published Quarterly. Only tenors of 1M or 3M are supported.</value>
        [DataMember(Name = "inflationFrequency", EmitDefaultValue = true)]
        public string InflationFrequency { get; set; }

        /// <summary>
        /// Name of the Inflation Index
        /// </summary>
        /// <value>Name of the Inflation Index</value>
        [DataMember(Name = "inflationIndexName", IsRequired = true, EmitDefaultValue = true)]
        public string InflationIndexName { get; set; }

        /// <summary>
        /// Inflation Interpolation flag, defaults to Linear but some older swaps require Flat.    Supported string (enumeration) values are: [Linear, Flat].
        /// </summary>
        /// <value>Inflation Interpolation flag, defaults to Linear but some older swaps require Flat.    Supported string (enumeration) values are: [Linear, Flat].</value>
        [DataMember(Name = "inflationInterpolation", EmitDefaultValue = true)]
        public string InflationInterpolation { get; set; }

        /// <summary>
        /// Day of the month that inflation rolls from one month to the next. This is optional and defaults to 1, which is  the typically value for the majority of inflation bonds (exceptions include Japan which rolls on the 10th  and some LatAm bonds which roll on the 15th).
        /// </summary>
        /// <value>Day of the month that inflation rolls from one month to the next. This is optional and defaults to 1, which is  the typically value for the majority of inflation bonds (exceptions include Japan which rolls on the 10th  and some LatAm bonds which roll on the 15th).</value>
        [DataMember(Name = "inflationRollDay", EmitDefaultValue = false)]
        public int InflationRollDay { get; set; }

        /// <summary>
        /// The notional
        /// </summary>
        /// <value>The notional</value>
        [DataMember(Name = "notional", IsRequired = true, EmitDefaultValue = true)]
        public decimal Notional { get; set; }

        /// <summary>
        /// Observation Lag, must be a number of Months, typically 3 or 4 but sometimes 8.
        /// </summary>
        /// <value>Observation Lag, must be a number of Months, typically 3 or 4 but sometimes 8.</value>
        [DataMember(Name = "observationLag", IsRequired = true, EmitDefaultValue = true)]
        public string ObservationLag { get; set; }

        /// <summary>
        /// PayReceive flag for the inflation leg.  This field is optional and defaults to Pay.  If set to Pay, this swap pays inflation and receives fixed.    Supported string (enumeration) values are: [Pay, Receive].
        /// </summary>
        /// <value>PayReceive flag for the inflation leg.  This field is optional and defaults to Pay.  If set to Pay, this swap pays inflation and receives fixed.    Supported string (enumeration) values are: [Pay, Receive].</value>
        [DataMember(Name = "payReceive", EmitDefaultValue = true)]
        public string PayReceive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InflationSwap {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  FlowConventions: ").Append(FlowConventions).Append("\n");
            sb.Append("  FixedRate: ").Append(FixedRate).Append("\n");
            sb.Append("  InflationCap: ").Append(InflationCap).Append("\n");
            sb.Append("  InflationFloor: ").Append(InflationFloor).Append("\n");
            sb.Append("  InflationFrequency: ").Append(InflationFrequency).Append("\n");
            sb.Append("  InflationIndexName: ").Append(InflationIndexName).Append("\n");
            sb.Append("  InflationInterpolation: ").Append(InflationInterpolation).Append("\n");
            sb.Append("  InflationRollDay: ").Append(InflationRollDay).Append("\n");
            sb.Append("  Notional: ").Append(Notional).Append("\n");
            sb.Append("  ObservationLag: ").Append(ObservationLag).Append("\n");
            sb.Append("  PayReceive: ").Append(PayReceive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InflationSwap);
        }

        /// <summary>
        /// Returns true if InflationSwap instances are equal
        /// </summary>
        /// <param name="input">Instance of InflationSwap to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InflationSwap input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && base.Equals(input) && 
                (
                    this.FlowConventions == input.FlowConventions ||
                    (this.FlowConventions != null &&
                    this.FlowConventions.Equals(input.FlowConventions))
                ) && base.Equals(input) && 
                (
                    this.FixedRate == input.FixedRate ||
                    this.FixedRate.Equals(input.FixedRate)
                ) && base.Equals(input) && 
                (
                    this.InflationCap == input.InflationCap ||
                    (this.InflationCap != null &&
                    this.InflationCap.Equals(input.InflationCap))
                ) && base.Equals(input) && 
                (
                    this.InflationFloor == input.InflationFloor ||
                    (this.InflationFloor != null &&
                    this.InflationFloor.Equals(input.InflationFloor))
                ) && base.Equals(input) && 
                (
                    this.InflationFrequency == input.InflationFrequency ||
                    (this.InflationFrequency != null &&
                    this.InflationFrequency.Equals(input.InflationFrequency))
                ) && base.Equals(input) && 
                (
                    this.InflationIndexName == input.InflationIndexName ||
                    (this.InflationIndexName != null &&
                    this.InflationIndexName.Equals(input.InflationIndexName))
                ) && base.Equals(input) && 
                (
                    this.InflationInterpolation == input.InflationInterpolation ||
                    (this.InflationInterpolation != null &&
                    this.InflationInterpolation.Equals(input.InflationInterpolation))
                ) && base.Equals(input) && 
                (
                    this.InflationRollDay == input.InflationRollDay ||
                    this.InflationRollDay.Equals(input.InflationRollDay)
                ) && base.Equals(input) && 
                (
                    this.Notional == input.Notional ||
                    this.Notional.Equals(input.Notional)
                ) && base.Equals(input) && 
                (
                    this.ObservationLag == input.ObservationLag ||
                    (this.ObservationLag != null &&
                    this.ObservationLag.Equals(input.ObservationLag))
                ) && base.Equals(input) && 
                (
                    this.PayReceive == input.PayReceive ||
                    (this.PayReceive != null &&
                    this.PayReceive.Equals(input.PayReceive))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.MaturityDate != null)
                {
                    hashCode = (hashCode * 59) + this.MaturityDate.GetHashCode();
                }
                if (this.FlowConventions != null)
                {
                    hashCode = (hashCode * 59) + this.FlowConventions.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FixedRate.GetHashCode();
                if (this.InflationCap != null)
                {
                    hashCode = (hashCode * 59) + this.InflationCap.GetHashCode();
                }
                if (this.InflationFloor != null)
                {
                    hashCode = (hashCode * 59) + this.InflationFloor.GetHashCode();
                }
                if (this.InflationFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.InflationFrequency.GetHashCode();
                }
                if (this.InflationIndexName != null)
                {
                    hashCode = (hashCode * 59) + this.InflationIndexName.GetHashCode();
                }
                if (this.InflationInterpolation != null)
                {
                    hashCode = (hashCode * 59) + this.InflationInterpolation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InflationRollDay.GetHashCode();
                hashCode = (hashCode * 59) + this.Notional.GetHashCode();
                if (this.ObservationLag != null)
                {
                    hashCode = (hashCode * 59) + this.ObservationLag.GetHashCode();
                }
                if (this.PayReceive != null)
                {
                    hashCode = (hashCode * 59) + this.PayReceive.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // InflationIndexName (string) minLength
            if (this.InflationIndexName != null && this.InflationIndexName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InflationIndexName, length must be greater than 1.", new [] { "InflationIndexName" });
            }

            // ObservationLag (string) minLength
            if (this.ObservationLag != null && this.ObservationLag.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ObservationLag, length must be greater than 1.", new [] { "ObservationLag" });
            }

            yield break;
        }
    }
}
