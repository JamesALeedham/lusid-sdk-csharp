/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ComplianceRuleResult
    /// </summary>
    [DataContract(Name = "ComplianceRuleResult")]
    public partial class ComplianceRuleResult : IEquatable<ComplianceRuleResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceRuleResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComplianceRuleResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceRuleResult" /> class.
        /// </summary>
        /// <param name="ruleId">The unique identifierof a compliance rule (required).</param>
        /// <param name="ruleName">The User-given name of the rule (required).</param>
        /// <param name="ruleDescription">The User-given description of the rule (required).</param>
        /// <param name="portfolio">portfolio (required).</param>
        /// <param name="passed">The result of an individual compliance run, true if passed (required).</param>
        /// <param name="resultValue">The calculation result that was used to confirm a pass/fail (required).</param>
        /// <param name="ruleInformationMatch">The value matched by the rule (required).</param>
        /// <param name="ruleInformationKey">The property key matched by the rule (required).</param>
        /// <param name="ruleLowerLimit">The lower limit of the rule (required).</param>
        /// <param name="ruleUpperLimit">The upper limit of the rule (required).</param>
        public ComplianceRuleResult(string ruleId = default(string), string ruleName = default(string), string ruleDescription = default(string), ResourceId portfolio = default(ResourceId), bool passed = default(bool), decimal resultValue = default(decimal), string ruleInformationMatch = default(string), string ruleInformationKey = default(string), decimal ruleLowerLimit = default(decimal), decimal ruleUpperLimit = default(decimal))
        {
            // to ensure "ruleId" is required (not null)
            if (ruleId == null)
            {
                throw new ArgumentNullException("ruleId is a required property for ComplianceRuleResult and cannot be null");
            }
            this.RuleId = ruleId;
            // to ensure "ruleName" is required (not null)
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName is a required property for ComplianceRuleResult and cannot be null");
            }
            this.RuleName = ruleName;
            // to ensure "ruleDescription" is required (not null)
            if (ruleDescription == null)
            {
                throw new ArgumentNullException("ruleDescription is a required property for ComplianceRuleResult and cannot be null");
            }
            this.RuleDescription = ruleDescription;
            // to ensure "portfolio" is required (not null)
            if (portfolio == null)
            {
                throw new ArgumentNullException("portfolio is a required property for ComplianceRuleResult and cannot be null");
            }
            this.Portfolio = portfolio;
            this.Passed = passed;
            this.ResultValue = resultValue;
            // to ensure "ruleInformationMatch" is required (not null)
            if (ruleInformationMatch == null)
            {
                throw new ArgumentNullException("ruleInformationMatch is a required property for ComplianceRuleResult and cannot be null");
            }
            this.RuleInformationMatch = ruleInformationMatch;
            // to ensure "ruleInformationKey" is required (not null)
            if (ruleInformationKey == null)
            {
                throw new ArgumentNullException("ruleInformationKey is a required property for ComplianceRuleResult and cannot be null");
            }
            this.RuleInformationKey = ruleInformationKey;
            this.RuleLowerLimit = ruleLowerLimit;
            this.RuleUpperLimit = ruleUpperLimit;
        }

        /// <summary>
        /// The unique identifierof a compliance rule
        /// </summary>
        /// <value>The unique identifierof a compliance rule</value>
        [DataMember(Name = "ruleId", IsRequired = true, EmitDefaultValue = true)]
        public string RuleId { get; set; }

        /// <summary>
        /// The User-given name of the rule
        /// </summary>
        /// <value>The User-given name of the rule</value>
        [DataMember(Name = "ruleName", IsRequired = true, EmitDefaultValue = true)]
        public string RuleName { get; set; }

        /// <summary>
        /// The User-given description of the rule
        /// </summary>
        /// <value>The User-given description of the rule</value>
        [DataMember(Name = "ruleDescription", IsRequired = true, EmitDefaultValue = true)]
        public string RuleDescription { get; set; }

        /// <summary>
        /// Gets or Sets Portfolio
        /// </summary>
        [DataMember(Name = "portfolio", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Portfolio { get; set; }

        /// <summary>
        /// The result of an individual compliance run, true if passed
        /// </summary>
        /// <value>The result of an individual compliance run, true if passed</value>
        [DataMember(Name = "passed", IsRequired = true, EmitDefaultValue = true)]
        public bool Passed { get; set; }

        /// <summary>
        /// The calculation result that was used to confirm a pass/fail
        /// </summary>
        /// <value>The calculation result that was used to confirm a pass/fail</value>
        [DataMember(Name = "resultValue", IsRequired = true, EmitDefaultValue = true)]
        public decimal ResultValue { get; set; }

        /// <summary>
        /// The value matched by the rule
        /// </summary>
        /// <value>The value matched by the rule</value>
        [DataMember(Name = "ruleInformationMatch", IsRequired = true, EmitDefaultValue = true)]
        public string RuleInformationMatch { get; set; }

        /// <summary>
        /// The property key matched by the rule
        /// </summary>
        /// <value>The property key matched by the rule</value>
        [DataMember(Name = "ruleInformationKey", IsRequired = true, EmitDefaultValue = true)]
        public string RuleInformationKey { get; set; }

        /// <summary>
        /// The lower limit of the rule
        /// </summary>
        /// <value>The lower limit of the rule</value>
        [DataMember(Name = "ruleLowerLimit", IsRequired = true, EmitDefaultValue = true)]
        public decimal RuleLowerLimit { get; set; }

        /// <summary>
        /// The upper limit of the rule
        /// </summary>
        /// <value>The upper limit of the rule</value>
        [DataMember(Name = "ruleUpperLimit", IsRequired = true, EmitDefaultValue = true)]
        public decimal RuleUpperLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComplianceRuleResult {\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  RuleName: ").Append(RuleName).Append("\n");
            sb.Append("  RuleDescription: ").Append(RuleDescription).Append("\n");
            sb.Append("  Portfolio: ").Append(Portfolio).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  ResultValue: ").Append(ResultValue).Append("\n");
            sb.Append("  RuleInformationMatch: ").Append(RuleInformationMatch).Append("\n");
            sb.Append("  RuleInformationKey: ").Append(RuleInformationKey).Append("\n");
            sb.Append("  RuleLowerLimit: ").Append(RuleLowerLimit).Append("\n");
            sb.Append("  RuleUpperLimit: ").Append(RuleUpperLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComplianceRuleResult);
        }

        /// <summary>
        /// Returns true if ComplianceRuleResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ComplianceRuleResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComplianceRuleResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.RuleName == input.RuleName ||
                    (this.RuleName != null &&
                    this.RuleName.Equals(input.RuleName))
                ) && 
                (
                    this.RuleDescription == input.RuleDescription ||
                    (this.RuleDescription != null &&
                    this.RuleDescription.Equals(input.RuleDescription))
                ) && 
                (
                    this.Portfolio == input.Portfolio ||
                    (this.Portfolio != null &&
                    this.Portfolio.Equals(input.Portfolio))
                ) && 
                (
                    this.Passed == input.Passed ||
                    this.Passed.Equals(input.Passed)
                ) && 
                (
                    this.ResultValue == input.ResultValue ||
                    this.ResultValue.Equals(input.ResultValue)
                ) && 
                (
                    this.RuleInformationMatch == input.RuleInformationMatch ||
                    (this.RuleInformationMatch != null &&
                    this.RuleInformationMatch.Equals(input.RuleInformationMatch))
                ) && 
                (
                    this.RuleInformationKey == input.RuleInformationKey ||
                    (this.RuleInformationKey != null &&
                    this.RuleInformationKey.Equals(input.RuleInformationKey))
                ) && 
                (
                    this.RuleLowerLimit == input.RuleLowerLimit ||
                    this.RuleLowerLimit.Equals(input.RuleLowerLimit)
                ) && 
                (
                    this.RuleUpperLimit == input.RuleUpperLimit ||
                    this.RuleUpperLimit.Equals(input.RuleUpperLimit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                if (this.RuleName != null)
                {
                    hashCode = (hashCode * 59) + this.RuleName.GetHashCode();
                }
                if (this.RuleDescription != null)
                {
                    hashCode = (hashCode * 59) + this.RuleDescription.GetHashCode();
                }
                if (this.Portfolio != null)
                {
                    hashCode = (hashCode * 59) + this.Portfolio.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Passed.GetHashCode();
                hashCode = (hashCode * 59) + this.ResultValue.GetHashCode();
                if (this.RuleInformationMatch != null)
                {
                    hashCode = (hashCode * 59) + this.RuleInformationMatch.GetHashCode();
                }
                if (this.RuleInformationKey != null)
                {
                    hashCode = (hashCode * 59) + this.RuleInformationKey.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RuleLowerLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.RuleUpperLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RuleId (string) minLength
            if (this.RuleId != null && this.RuleId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleId, length must be greater than 1.", new [] { "RuleId" });
            }

            // RuleName (string) minLength
            if (this.RuleName != null && this.RuleName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleName, length must be greater than 1.", new [] { "RuleName" });
            }

            // RuleDescription (string) minLength
            if (this.RuleDescription != null && this.RuleDescription.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleDescription, length must be greater than 1.", new [] { "RuleDescription" });
            }

            // RuleInformationMatch (string) minLength
            if (this.RuleInformationMatch != null && this.RuleInformationMatch.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleInformationMatch, length must be greater than 1.", new [] { "RuleInformationMatch" });
            }

            // RuleInformationKey (string) minLength
            if (this.RuleInformationKey != null && this.RuleInformationKey.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RuleInformationKey, length must be greater than 1.", new [] { "RuleInformationKey" });
            }

            yield break;
        }
    }
}
