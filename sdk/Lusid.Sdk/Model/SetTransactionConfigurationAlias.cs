/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// SetTransactionConfigurationAlias
    /// </summary>
    [DataContract(Name = "SetTransactionConfigurationAlias")]
    public partial class SetTransactionConfigurationAlias : IEquatable<SetTransactionConfigurationAlias>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetTransactionConfigurationAlias" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetTransactionConfigurationAlias() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetTransactionConfigurationAlias" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="transactionClass">transactionClass (required).</param>
        /// <param name="transactionRole">transactionRole (required).</param>
        /// <param name="isDefault">isDefault.</param>
        public SetTransactionConfigurationAlias(string type = default(string), string description = default(string), string transactionClass = default(string), string transactionRole = default(string), bool isDefault = default(bool))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for SetTransactionConfigurationAlias and cannot be null");
            }
            this.Type = type;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for SetTransactionConfigurationAlias and cannot be null");
            }
            this.Description = description;
            // to ensure "transactionClass" is required (not null)
            if (transactionClass == null)
            {
                throw new ArgumentNullException("transactionClass is a required property for SetTransactionConfigurationAlias and cannot be null");
            }
            this.TransactionClass = transactionClass;
            // to ensure "transactionRole" is required (not null)
            if (transactionRole == null)
            {
                throw new ArgumentNullException("transactionRole is a required property for SetTransactionConfigurationAlias and cannot be null");
            }
            this.TransactionRole = transactionRole;
            this.IsDefault = isDefault;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets TransactionClass
        /// </summary>
        [DataMember(Name = "transactionClass", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionClass { get; set; }

        /// <summary>
        /// Gets or Sets TransactionRole
        /// </summary>
        [DataMember(Name = "transactionRole", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionRole { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetTransactionConfigurationAlias {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TransactionClass: ").Append(TransactionClass).Append("\n");
            sb.Append("  TransactionRole: ").Append(TransactionRole).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetTransactionConfigurationAlias);
        }

        /// <summary>
        /// Returns true if SetTransactionConfigurationAlias instances are equal
        /// </summary>
        /// <param name="input">Instance of SetTransactionConfigurationAlias to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetTransactionConfigurationAlias input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TransactionClass == input.TransactionClass ||
                    (this.TransactionClass != null &&
                    this.TransactionClass.Equals(input.TransactionClass))
                ) && 
                (
                    this.TransactionRole == input.TransactionRole ||
                    (this.TransactionRole != null &&
                    this.TransactionRole.Equals(input.TransactionRole))
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.TransactionClass != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionClass.GetHashCode();
                }
                if (this.TransactionRole != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionRole.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsDefault.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Type (string) maxLength
            if (this.Type != null && this.Type.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be less than 64.", new [] { "Type" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            // TransactionClass (string) minLength
            if (this.TransactionClass != null && this.TransactionClass.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionClass, length must be greater than 1.", new [] { "TransactionClass" });
            }

            // TransactionRole (string) minLength
            if (this.TransactionRole != null && this.TransactionRole.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionRole, length must be greater than 1.", new [] { "TransactionRole" });
            }

            yield break;
        }
    }
}
