/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CurveOptionsAllOf
    /// </summary>
    [DataContract(Name = "CurveOptions_allOf")]
    public partial class CurveOptionsAllOf : IEquatable<CurveOptionsAllOf>, IValidatableObject
    {
        /// <summary>
        /// The available values are: CurveOptions
        /// </summary>
        /// <value>The available values are: CurveOptions</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MarketDataOptionsTypeEnum
        {
            /// <summary>
            /// Enum CurveOptions for value: CurveOptions
            /// </summary>
            [EnumMember(Value = "CurveOptions")]
            CurveOptions = 1

        }


        /// <summary>
        /// The available values are: CurveOptions
        /// </summary>
        /// <value>The available values are: CurveOptions</value>
        [DataMember(Name = "marketDataOptionsType", IsRequired = true, EmitDefaultValue = true)]
        public MarketDataOptionsTypeEnum MarketDataOptionsType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurveOptionsAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurveOptionsAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurveOptionsAllOf" /> class.
        /// </summary>
        /// <param name="dayCountConvention">Day count convention of the curve. Defaults to \&quot;Act360\&quot;..</param>
        /// <param name="frontExtrapolationType">What type of extrapolation is used to build the curve  Imagine that the curve is facing the observer(you), then the \&quot;front\&quot; direction is the closest point on the curve onward. &lt;br /&gt;  example: 0D tenor to past  Defaults to \&quot;Flat\&quot;. Supported string (enumeration) values are: [None, Flat, Linear]..</param>
        /// <param name="backExtrapolationType">What type of extrapolation is used to build the curve.  &lt;br /&gt;  Imagine that the curve is facing the observer(you), then the \&quot;back\&quot; direction is the furthest point on the curve onward. &lt;br /&gt;  example: 30Y tenor to infinity  Defaults to \&quot;Flat\&quot;. Supported string (enumeration) values are: [None, Flat, Linear]..</param>
        /// <param name="marketDataOptionsType">The available values are: CurveOptions (required).</param>
        public CurveOptionsAllOf(string dayCountConvention = default(string), string frontExtrapolationType = default(string), string backExtrapolationType = default(string), MarketDataOptionsTypeEnum marketDataOptionsType = default(MarketDataOptionsTypeEnum))
        {
            this.MarketDataOptionsType = marketDataOptionsType;
            this.DayCountConvention = dayCountConvention;
            this.FrontExtrapolationType = frontExtrapolationType;
            this.BackExtrapolationType = backExtrapolationType;
        }

        /// <summary>
        /// Day count convention of the curve. Defaults to \&quot;Act360\&quot;.
        /// </summary>
        /// <value>Day count convention of the curve. Defaults to \&quot;Act360\&quot;.</value>
        [DataMember(Name = "dayCountConvention", EmitDefaultValue = true)]
        public string DayCountConvention { get; set; }

        /// <summary>
        /// What type of extrapolation is used to build the curve  Imagine that the curve is facing the observer(you), then the \&quot;front\&quot; direction is the closest point on the curve onward. &lt;br /&gt;  example: 0D tenor to past  Defaults to \&quot;Flat\&quot;. Supported string (enumeration) values are: [None, Flat, Linear].
        /// </summary>
        /// <value>What type of extrapolation is used to build the curve  Imagine that the curve is facing the observer(you), then the \&quot;front\&quot; direction is the closest point on the curve onward. &lt;br /&gt;  example: 0D tenor to past  Defaults to \&quot;Flat\&quot;. Supported string (enumeration) values are: [None, Flat, Linear].</value>
        [DataMember(Name = "frontExtrapolationType", EmitDefaultValue = true)]
        public string FrontExtrapolationType { get; set; }

        /// <summary>
        /// What type of extrapolation is used to build the curve.  &lt;br /&gt;  Imagine that the curve is facing the observer(you), then the \&quot;back\&quot; direction is the furthest point on the curve onward. &lt;br /&gt;  example: 30Y tenor to infinity  Defaults to \&quot;Flat\&quot;. Supported string (enumeration) values are: [None, Flat, Linear].
        /// </summary>
        /// <value>What type of extrapolation is used to build the curve.  &lt;br /&gt;  Imagine that the curve is facing the observer(you), then the \&quot;back\&quot; direction is the furthest point on the curve onward. &lt;br /&gt;  example: 30Y tenor to infinity  Defaults to \&quot;Flat\&quot;. Supported string (enumeration) values are: [None, Flat, Linear].</value>
        [DataMember(Name = "backExtrapolationType", EmitDefaultValue = true)]
        public string BackExtrapolationType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurveOptionsAllOf {\n");
            sb.Append("  DayCountConvention: ").Append(DayCountConvention).Append("\n");
            sb.Append("  FrontExtrapolationType: ").Append(FrontExtrapolationType).Append("\n");
            sb.Append("  BackExtrapolationType: ").Append(BackExtrapolationType).Append("\n");
            sb.Append("  MarketDataOptionsType: ").Append(MarketDataOptionsType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurveOptionsAllOf);
        }

        /// <summary>
        /// Returns true if CurveOptionsAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CurveOptionsAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurveOptionsAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DayCountConvention == input.DayCountConvention ||
                    (this.DayCountConvention != null &&
                    this.DayCountConvention.Equals(input.DayCountConvention))
                ) && 
                (
                    this.FrontExtrapolationType == input.FrontExtrapolationType ||
                    (this.FrontExtrapolationType != null &&
                    this.FrontExtrapolationType.Equals(input.FrontExtrapolationType))
                ) && 
                (
                    this.BackExtrapolationType == input.BackExtrapolationType ||
                    (this.BackExtrapolationType != null &&
                    this.BackExtrapolationType.Equals(input.BackExtrapolationType))
                ) && 
                (
                    this.MarketDataOptionsType == input.MarketDataOptionsType ||
                    this.MarketDataOptionsType.Equals(input.MarketDataOptionsType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DayCountConvention != null)
                {
                    hashCode = (hashCode * 59) + this.DayCountConvention.GetHashCode();
                }
                if (this.FrontExtrapolationType != null)
                {
                    hashCode = (hashCode * 59) + this.FrontExtrapolationType.GetHashCode();
                }
                if (this.BackExtrapolationType != null)
                {
                    hashCode = (hashCode * 59) + this.BackExtrapolationType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MarketDataOptionsType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DayCountConvention (string) maxLength
            if (this.DayCountConvention != null && this.DayCountConvention.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DayCountConvention, length must be less than 50.", new [] { "DayCountConvention" });
            }

            // DayCountConvention (string) minLength
            if (this.DayCountConvention != null && this.DayCountConvention.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DayCountConvention, length must be greater than 0.", new [] { "DayCountConvention" });
            }

            // FrontExtrapolationType (string) maxLength
            if (this.FrontExtrapolationType != null && this.FrontExtrapolationType.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FrontExtrapolationType, length must be less than 50.", new [] { "FrontExtrapolationType" });
            }

            // FrontExtrapolationType (string) minLength
            if (this.FrontExtrapolationType != null && this.FrontExtrapolationType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FrontExtrapolationType, length must be greater than 0.", new [] { "FrontExtrapolationType" });
            }

            // BackExtrapolationType (string) maxLength
            if (this.BackExtrapolationType != null && this.BackExtrapolationType.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BackExtrapolationType, length must be less than 50.", new [] { "BackExtrapolationType" });
            }

            // BackExtrapolationType (string) minLength
            if (this.BackExtrapolationType != null && this.BackExtrapolationType.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BackExtrapolationType, length must be greater than 0.", new [] { "BackExtrapolationType" });
            }

            yield break;
        }
    }
}
