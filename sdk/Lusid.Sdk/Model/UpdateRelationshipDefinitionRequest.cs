/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpdateRelationshipDefinitionRequest
    /// </summary>
    [DataContract(Name = "UpdateRelationshipDefinitionRequest")]
    public partial class UpdateRelationshipDefinitionRequest : IEquatable<UpdateRelationshipDefinitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRelationshipDefinitionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateRelationshipDefinitionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRelationshipDefinitionRequest" /> class.
        /// </summary>
        /// <param name="displayName">The display name of the relation. (required).</param>
        /// <param name="outwardDescription">The description to relate source entity object and target entity object. (required).</param>
        /// <param name="inwardDescription">The description to relate target entity object and source entity object. (required).</param>
        public UpdateRelationshipDefinitionRequest(string displayName = default(string), string outwardDescription = default(string), string inwardDescription = default(string))
        {
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for UpdateRelationshipDefinitionRequest and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "outwardDescription" is required (not null)
            if (outwardDescription == null)
            {
                throw new ArgumentNullException("outwardDescription is a required property for UpdateRelationshipDefinitionRequest and cannot be null");
            }
            this.OutwardDescription = outwardDescription;
            // to ensure "inwardDescription" is required (not null)
            if (inwardDescription == null)
            {
                throw new ArgumentNullException("inwardDescription is a required property for UpdateRelationshipDefinitionRequest and cannot be null");
            }
            this.InwardDescription = inwardDescription;
        }

        /// <summary>
        /// The display name of the relation.
        /// </summary>
        /// <value>The display name of the relation.</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description to relate source entity object and target entity object.
        /// </summary>
        /// <value>The description to relate source entity object and target entity object.</value>
        [DataMember(Name = "outwardDescription", IsRequired = true, EmitDefaultValue = true)]
        public string OutwardDescription { get; set; }

        /// <summary>
        /// The description to relate target entity object and source entity object.
        /// </summary>
        /// <value>The description to relate target entity object and source entity object.</value>
        [DataMember(Name = "inwardDescription", IsRequired = true, EmitDefaultValue = true)]
        public string InwardDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateRelationshipDefinitionRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  OutwardDescription: ").Append(OutwardDescription).Append("\n");
            sb.Append("  InwardDescription: ").Append(InwardDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateRelationshipDefinitionRequest);
        }

        /// <summary>
        /// Returns true if UpdateRelationshipDefinitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateRelationshipDefinitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateRelationshipDefinitionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.OutwardDescription == input.OutwardDescription ||
                    (this.OutwardDescription != null &&
                    this.OutwardDescription.Equals(input.OutwardDescription))
                ) && 
                (
                    this.InwardDescription == input.InwardDescription ||
                    (this.InwardDescription != null &&
                    this.InwardDescription.Equals(input.InwardDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.OutwardDescription != null)
                {
                    hashCode = (hashCode * 59) + this.OutwardDescription.GetHashCode();
                }
                if (this.InwardDescription != null)
                {
                    hashCode = (hashCode * 59) + this.InwardDescription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 512.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // DisplayName (string) pattern
            Regex regexDisplayName = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDisplayName.Match(this.DisplayName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, must match a pattern of " + regexDisplayName, new [] { "DisplayName" });
            }

            // OutwardDescription (string) maxLength
            if (this.OutwardDescription != null && this.OutwardDescription.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OutwardDescription, length must be less than 512.", new [] { "OutwardDescription" });
            }

            // OutwardDescription (string) minLength
            if (this.OutwardDescription != null && this.OutwardDescription.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OutwardDescription, length must be greater than 1.", new [] { "OutwardDescription" });
            }

            // OutwardDescription (string) pattern
            Regex regexOutwardDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexOutwardDescription.Match(this.OutwardDescription).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OutwardDescription, must match a pattern of " + regexOutwardDescription, new [] { "OutwardDescription" });
            }

            // InwardDescription (string) maxLength
            if (this.InwardDescription != null && this.InwardDescription.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InwardDescription, length must be less than 512.", new [] { "InwardDescription" });
            }

            // InwardDescription (string) minLength
            if (this.InwardDescription != null && this.InwardDescription.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InwardDescription, length must be greater than 1.", new [] { "InwardDescription" });
            }

            // InwardDescription (string) pattern
            Regex regexInwardDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexInwardDescription.Match(this.InwardDescription).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InwardDescription, must match a pattern of " + regexInwardDescription, new [] { "InwardDescription" });
            }

            yield break;
        }
    }
}
