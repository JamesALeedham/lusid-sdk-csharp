/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A list of Dispersion calculations for the given years.
    /// </summary>
    [DataContract(Name = "CompositeDispersion")]
    public partial class CompositeDispersion : IEquatable<CompositeDispersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositeDispersion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompositeDispersion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompositeDispersion" /> class.
        /// </summary>
        /// <param name="effectiveAt">The date for which dipsersion calculation has been done. This should be 31 Dec for each given year. (required).</param>
        /// <param name="dispersionCalculation">The result for the dispersion calculation on the given effectiveAt..</param>
        /// <param name="variance">The variance on the given effectiveAt..</param>
        /// <param name="firstQuartile">First Quartile (Q1) &#x3D;  (lower quartile) &#x3D; the middle of the bottom half of the returns..</param>
        /// <param name="thirdQuartile">Third Quartile (Q3) &#x3D;  (higher quartile) &#x3D; the middle of the top half of the returns..</param>
        /// <param name="range">Highest return - Lowest return..</param>
        /// <param name="constituentsInScope">List containing Composite members which are part of the dispersion calcualtion..</param>
        /// <param name="constituentsExcluded">List containing the Composite members which are not part of the dispersion calculation.</param>
        public CompositeDispersion(DateTimeOffset effectiveAt = default(DateTimeOffset), decimal? dispersionCalculation = default(decimal?), decimal? variance = default(decimal?), decimal? firstQuartile = default(decimal?), decimal? thirdQuartile = default(decimal?), decimal? range = default(decimal?), List<ResourceId> constituentsInScope = default(List<ResourceId>), List<ResourceId> constituentsExcluded = default(List<ResourceId>))
        {
            this.EffectiveAt = effectiveAt;
            this.DispersionCalculation = dispersionCalculation;
            this.Variance = variance;
            this.FirstQuartile = firstQuartile;
            this.ThirdQuartile = thirdQuartile;
            this.Range = range;
            this.ConstituentsInScope = constituentsInScope;
            this.ConstituentsExcluded = constituentsExcluded;
        }

        /// <summary>
        /// The date for which dipsersion calculation has been done. This should be 31 Dec for each given year.
        /// </summary>
        /// <value>The date for which dipsersion calculation has been done. This should be 31 Dec for each given year.</value>
        [DataMember(Name = "effectiveAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveAt { get; set; }

        /// <summary>
        /// The result for the dispersion calculation on the given effectiveAt.
        /// </summary>
        /// <value>The result for the dispersion calculation on the given effectiveAt.</value>
        [DataMember(Name = "dispersionCalculation", EmitDefaultValue = true)]
        public decimal? DispersionCalculation { get; set; }

        /// <summary>
        /// The variance on the given effectiveAt.
        /// </summary>
        /// <value>The variance on the given effectiveAt.</value>
        [DataMember(Name = "variance", EmitDefaultValue = true)]
        public decimal? Variance { get; set; }

        /// <summary>
        /// First Quartile (Q1) &#x3D;  (lower quartile) &#x3D; the middle of the bottom half of the returns.
        /// </summary>
        /// <value>First Quartile (Q1) &#x3D;  (lower quartile) &#x3D; the middle of the bottom half of the returns.</value>
        [DataMember(Name = "firstQuartile", EmitDefaultValue = true)]
        public decimal? FirstQuartile { get; set; }

        /// <summary>
        /// Third Quartile (Q3) &#x3D;  (higher quartile) &#x3D; the middle of the top half of the returns.
        /// </summary>
        /// <value>Third Quartile (Q3) &#x3D;  (higher quartile) &#x3D; the middle of the top half of the returns.</value>
        [DataMember(Name = "thirdQuartile", EmitDefaultValue = true)]
        public decimal? ThirdQuartile { get; set; }

        /// <summary>
        /// Highest return - Lowest return.
        /// </summary>
        /// <value>Highest return - Lowest return.</value>
        [DataMember(Name = "range", EmitDefaultValue = true)]
        public decimal? Range { get; set; }

        /// <summary>
        /// List containing Composite members which are part of the dispersion calcualtion.
        /// </summary>
        /// <value>List containing Composite members which are part of the dispersion calcualtion.</value>
        [DataMember(Name = "constituentsInScope", EmitDefaultValue = true)]
        public List<ResourceId> ConstituentsInScope { get; set; }

        /// <summary>
        /// List containing the Composite members which are not part of the dispersion calculation
        /// </summary>
        /// <value>List containing the Composite members which are not part of the dispersion calculation</value>
        [DataMember(Name = "constituentsExcluded", EmitDefaultValue = true)]
        public List<ResourceId> ConstituentsExcluded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompositeDispersion {\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  DispersionCalculation: ").Append(DispersionCalculation).Append("\n");
            sb.Append("  Variance: ").Append(Variance).Append("\n");
            sb.Append("  FirstQuartile: ").Append(FirstQuartile).Append("\n");
            sb.Append("  ThirdQuartile: ").Append(ThirdQuartile).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  ConstituentsInScope: ").Append(ConstituentsInScope).Append("\n");
            sb.Append("  ConstituentsExcluded: ").Append(ConstituentsExcluded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompositeDispersion);
        }

        /// <summary>
        /// Returns true if CompositeDispersion instances are equal
        /// </summary>
        /// <param name="input">Instance of CompositeDispersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompositeDispersion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.DispersionCalculation == input.DispersionCalculation ||
                    (this.DispersionCalculation != null &&
                    this.DispersionCalculation.Equals(input.DispersionCalculation))
                ) && 
                (
                    this.Variance == input.Variance ||
                    (this.Variance != null &&
                    this.Variance.Equals(input.Variance))
                ) && 
                (
                    this.FirstQuartile == input.FirstQuartile ||
                    (this.FirstQuartile != null &&
                    this.FirstQuartile.Equals(input.FirstQuartile))
                ) && 
                (
                    this.ThirdQuartile == input.ThirdQuartile ||
                    (this.ThirdQuartile != null &&
                    this.ThirdQuartile.Equals(input.ThirdQuartile))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.ConstituentsInScope == input.ConstituentsInScope ||
                    this.ConstituentsInScope != null &&
                    input.ConstituentsInScope != null &&
                    this.ConstituentsInScope.SequenceEqual(input.ConstituentsInScope)
                ) && 
                (
                    this.ConstituentsExcluded == input.ConstituentsExcluded ||
                    this.ConstituentsExcluded != null &&
                    input.ConstituentsExcluded != null &&
                    this.ConstituentsExcluded.SequenceEqual(input.ConstituentsExcluded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                if (this.DispersionCalculation != null)
                {
                    hashCode = (hashCode * 59) + this.DispersionCalculation.GetHashCode();
                }
                if (this.Variance != null)
                {
                    hashCode = (hashCode * 59) + this.Variance.GetHashCode();
                }
                if (this.FirstQuartile != null)
                {
                    hashCode = (hashCode * 59) + this.FirstQuartile.GetHashCode();
                }
                if (this.ThirdQuartile != null)
                {
                    hashCode = (hashCode * 59) + this.ThirdQuartile.GetHashCode();
                }
                if (this.Range != null)
                {
                    hashCode = (hashCode * 59) + this.Range.GetHashCode();
                }
                if (this.ConstituentsInScope != null)
                {
                    hashCode = (hashCode * 59) + this.ConstituentsInScope.GetHashCode();
                }
                if (this.ConstituentsExcluded != null)
                {
                    hashCode = (hashCode * 59) + this.ConstituentsExcluded.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
