/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// OrderGraphPlacement
    /// </summary>
    [DataContract(Name = "OrderGraphPlacement")]
    public partial class OrderGraphPlacement : IEquatable<OrderGraphPlacement>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderGraphPlacement" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OrderGraphPlacement() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderGraphPlacement" /> class.
        /// </summary>
        /// <param name="placement">placement (required).</param>
        /// <param name="blockId">blockId (required).</param>
        /// <param name="ordered">ordered (required).</param>
        /// <param name="placed">placed (required).</param>
        /// <param name="executed">executed (required).</param>
        /// <param name="allocated">allocated (required).</param>
        /// <param name="derivedState">A simple description of the overall state of a placement. (required).</param>
        /// <param name="calculatedAveragePrice">Average price realised on executions for a given placement.</param>
        public OrderGraphPlacement(Placement placement = default(Placement), ResourceId blockId = default(ResourceId), OrderGraphPlacementOrderSynopsis ordered = default(OrderGraphPlacementOrderSynopsis), OrderGraphPlacementPlacementSynopsis placed = default(OrderGraphPlacementPlacementSynopsis), OrderGraphPlacementExecutionSynopsis executed = default(OrderGraphPlacementExecutionSynopsis), OrderGraphPlacementAllocationSynopsis allocated = default(OrderGraphPlacementAllocationSynopsis), string derivedState = default(string), decimal? calculatedAveragePrice = default(decimal?))
        {
            // to ensure "placement" is required (not null)
            if (placement == null)
            {
                throw new ArgumentNullException("placement is a required property for OrderGraphPlacement and cannot be null");
            }
            this.Placement = placement;
            // to ensure "blockId" is required (not null)
            if (blockId == null)
            {
                throw new ArgumentNullException("blockId is a required property for OrderGraphPlacement and cannot be null");
            }
            this.BlockId = blockId;
            // to ensure "ordered" is required (not null)
            if (ordered == null)
            {
                throw new ArgumentNullException("ordered is a required property for OrderGraphPlacement and cannot be null");
            }
            this.Ordered = ordered;
            // to ensure "placed" is required (not null)
            if (placed == null)
            {
                throw new ArgumentNullException("placed is a required property for OrderGraphPlacement and cannot be null");
            }
            this.Placed = placed;
            // to ensure "executed" is required (not null)
            if (executed == null)
            {
                throw new ArgumentNullException("executed is a required property for OrderGraphPlacement and cannot be null");
            }
            this.Executed = executed;
            // to ensure "allocated" is required (not null)
            if (allocated == null)
            {
                throw new ArgumentNullException("allocated is a required property for OrderGraphPlacement and cannot be null");
            }
            this.Allocated = allocated;
            // to ensure "derivedState" is required (not null)
            if (derivedState == null)
            {
                throw new ArgumentNullException("derivedState is a required property for OrderGraphPlacement and cannot be null");
            }
            this.DerivedState = derivedState;
            this.CalculatedAveragePrice = calculatedAveragePrice;
        }

        /// <summary>
        /// Gets or Sets Placement
        /// </summary>
        [DataMember(Name = "placement", IsRequired = true, EmitDefaultValue = true)]
        public Placement Placement { get; set; }

        /// <summary>
        /// Gets or Sets BlockId
        /// </summary>
        [DataMember(Name = "blockId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId BlockId { get; set; }

        /// <summary>
        /// Gets or Sets Ordered
        /// </summary>
        [DataMember(Name = "ordered", IsRequired = true, EmitDefaultValue = true)]
        public OrderGraphPlacementOrderSynopsis Ordered { get; set; }

        /// <summary>
        /// Gets or Sets Placed
        /// </summary>
        [DataMember(Name = "placed", IsRequired = true, EmitDefaultValue = true)]
        public OrderGraphPlacementPlacementSynopsis Placed { get; set; }

        /// <summary>
        /// Gets or Sets Executed
        /// </summary>
        [DataMember(Name = "executed", IsRequired = true, EmitDefaultValue = true)]
        public OrderGraphPlacementExecutionSynopsis Executed { get; set; }

        /// <summary>
        /// Gets or Sets Allocated
        /// </summary>
        [DataMember(Name = "allocated", IsRequired = true, EmitDefaultValue = true)]
        public OrderGraphPlacementAllocationSynopsis Allocated { get; set; }

        /// <summary>
        /// A simple description of the overall state of a placement.
        /// </summary>
        /// <value>A simple description of the overall state of a placement.</value>
        [DataMember(Name = "derivedState", IsRequired = true, EmitDefaultValue = true)]
        public string DerivedState { get; set; }

        /// <summary>
        /// Average price realised on executions for a given placement
        /// </summary>
        /// <value>Average price realised on executions for a given placement</value>
        [DataMember(Name = "calculatedAveragePrice", EmitDefaultValue = true)]
        public decimal? CalculatedAveragePrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderGraphPlacement {\n");
            sb.Append("  Placement: ").Append(Placement).Append("\n");
            sb.Append("  BlockId: ").Append(BlockId).Append("\n");
            sb.Append("  Ordered: ").Append(Ordered).Append("\n");
            sb.Append("  Placed: ").Append(Placed).Append("\n");
            sb.Append("  Executed: ").Append(Executed).Append("\n");
            sb.Append("  Allocated: ").Append(Allocated).Append("\n");
            sb.Append("  DerivedState: ").Append(DerivedState).Append("\n");
            sb.Append("  CalculatedAveragePrice: ").Append(CalculatedAveragePrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderGraphPlacement);
        }

        /// <summary>
        /// Returns true if OrderGraphPlacement instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderGraphPlacement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderGraphPlacement input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Placement == input.Placement ||
                    (this.Placement != null &&
                    this.Placement.Equals(input.Placement))
                ) && 
                (
                    this.BlockId == input.BlockId ||
                    (this.BlockId != null &&
                    this.BlockId.Equals(input.BlockId))
                ) && 
                (
                    this.Ordered == input.Ordered ||
                    (this.Ordered != null &&
                    this.Ordered.Equals(input.Ordered))
                ) && 
                (
                    this.Placed == input.Placed ||
                    (this.Placed != null &&
                    this.Placed.Equals(input.Placed))
                ) && 
                (
                    this.Executed == input.Executed ||
                    (this.Executed != null &&
                    this.Executed.Equals(input.Executed))
                ) && 
                (
                    this.Allocated == input.Allocated ||
                    (this.Allocated != null &&
                    this.Allocated.Equals(input.Allocated))
                ) && 
                (
                    this.DerivedState == input.DerivedState ||
                    (this.DerivedState != null &&
                    this.DerivedState.Equals(input.DerivedState))
                ) && 
                (
                    this.CalculatedAveragePrice == input.CalculatedAveragePrice ||
                    (this.CalculatedAveragePrice != null &&
                    this.CalculatedAveragePrice.Equals(input.CalculatedAveragePrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Placement != null)
                {
                    hashCode = (hashCode * 59) + this.Placement.GetHashCode();
                }
                if (this.BlockId != null)
                {
                    hashCode = (hashCode * 59) + this.BlockId.GetHashCode();
                }
                if (this.Ordered != null)
                {
                    hashCode = (hashCode * 59) + this.Ordered.GetHashCode();
                }
                if (this.Placed != null)
                {
                    hashCode = (hashCode * 59) + this.Placed.GetHashCode();
                }
                if (this.Executed != null)
                {
                    hashCode = (hashCode * 59) + this.Executed.GetHashCode();
                }
                if (this.Allocated != null)
                {
                    hashCode = (hashCode * 59) + this.Allocated.GetHashCode();
                }
                if (this.DerivedState != null)
                {
                    hashCode = (hashCode * 59) + this.DerivedState.GetHashCode();
                }
                if (this.CalculatedAveragePrice != null)
                {
                    hashCode = (hashCode * 59) + this.CalculatedAveragePrice.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DerivedState (string) minLength
            if (this.DerivedState != null && this.DerivedState.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DerivedState, length must be greater than 1.", new [] { "DerivedState" });
            }

            yield break;
        }
    }
}
