/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Result class for a cash flow value
    /// </summary>
    [DataContract(Name = "CashFlowValue")]
    [JsonConverter(typeof(JsonSubtypes), "ResultValueType")]
    public partial class CashFlowValue : ResultValue, IEquatable<CashFlowValue>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashFlowValue" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CashFlowValue() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashFlowValue" /> class.
        /// </summary>
        /// <param name="paymentDate">The payment date of the cash flow (required).</param>
        /// <param name="diagnostics">diagnostics.</param>
        /// <param name="cashFlowLineage">cashFlowLineage.</param>
        /// <param name="paymentAmount">The amount paid or received (required).</param>
        /// <param name="paymentCcy">The currency of the transaction (required).</param>
        /// <param name="resultValueType">The available values are: ResultValue, ResultValueDictionary, ResultValue0D, ResultValueDecimal, ResultValueInt, ResultValueString, ResultValueBool, ResultValueCurrency, CashFlowValue, CashFlowValueSet, ResultValueLifeCycleEventValue, ResultValueDateTimeOffset (required) (default to &quot;CashFlowValue&quot;).</param>
        public CashFlowValue(DateTimeOffset paymentDate = default(DateTimeOffset), ResultValueDictionary diagnostics = default(ResultValueDictionary), CashFlowLineage cashFlowLineage = default(CashFlowLineage), decimal paymentAmount = default(decimal), string paymentCcy = default(string), ResultValueTypeEnum resultValueType = default(ResultValueTypeEnum)) : base(resultValueType)
        {
            this.PaymentDate = paymentDate;
            this.PaymentAmount = paymentAmount;
            // to ensure "paymentCcy" is required (not null)
            if (paymentCcy == null)
            {
                throw new ArgumentNullException("paymentCcy is a required property for CashFlowValue and cannot be null");
            }
            this.PaymentCcy = paymentCcy;
            this.Diagnostics = diagnostics;
            this.CashFlowLineage = cashFlowLineage;
        }

        /// <summary>
        /// The payment date of the cash flow
        /// </summary>
        /// <value>The payment date of the cash flow</value>
        [DataMember(Name = "paymentDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset PaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets Diagnostics
        /// </summary>
        [DataMember(Name = "diagnostics", EmitDefaultValue = false)]
        public ResultValueDictionary Diagnostics { get; set; }

        /// <summary>
        /// Gets or Sets CashFlowLineage
        /// </summary>
        [DataMember(Name = "cashFlowLineage", EmitDefaultValue = false)]
        public CashFlowLineage CashFlowLineage { get; set; }

        /// <summary>
        /// The amount paid or received
        /// </summary>
        /// <value>The amount paid or received</value>
        [DataMember(Name = "paymentAmount", IsRequired = true, EmitDefaultValue = true)]
        public decimal PaymentAmount { get; set; }

        /// <summary>
        /// The currency of the transaction
        /// </summary>
        /// <value>The currency of the transaction</value>
        [DataMember(Name = "paymentCcy", IsRequired = true, EmitDefaultValue = true)]
        public string PaymentCcy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CashFlowValue {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  Diagnostics: ").Append(Diagnostics).Append("\n");
            sb.Append("  CashFlowLineage: ").Append(CashFlowLineage).Append("\n");
            sb.Append("  PaymentAmount: ").Append(PaymentAmount).Append("\n");
            sb.Append("  PaymentCcy: ").Append(PaymentCcy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashFlowValue);
        }

        /// <summary>
        /// Returns true if CashFlowValue instances are equal
        /// </summary>
        /// <param name="input">Instance of CashFlowValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashFlowValue input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && base.Equals(input) && 
                (
                    this.Diagnostics == input.Diagnostics ||
                    (this.Diagnostics != null &&
                    this.Diagnostics.Equals(input.Diagnostics))
                ) && base.Equals(input) && 
                (
                    this.CashFlowLineage == input.CashFlowLineage ||
                    (this.CashFlowLineage != null &&
                    this.CashFlowLineage.Equals(input.CashFlowLineage))
                ) && base.Equals(input) && 
                (
                    this.PaymentAmount == input.PaymentAmount ||
                    this.PaymentAmount.Equals(input.PaymentAmount)
                ) && base.Equals(input) && 
                (
                    this.PaymentCcy == input.PaymentCcy ||
                    (this.PaymentCcy != null &&
                    this.PaymentCcy.Equals(input.PaymentCcy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDate.GetHashCode();
                }
                if (this.Diagnostics != null)
                {
                    hashCode = (hashCode * 59) + this.Diagnostics.GetHashCode();
                }
                if (this.CashFlowLineage != null)
                {
                    hashCode = (hashCode * 59) + this.CashFlowLineage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaymentAmount.GetHashCode();
                if (this.PaymentCcy != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentCcy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
