/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CreateCalendarRequest
    /// </summary>
    [DataContract(Name = "CreateCalendarRequest")]
    public partial class CreateCalendarRequest : IEquatable<CreateCalendarRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCalendarRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCalendarRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCalendarRequest" /> class.
        /// </summary>
        /// <param name="calendarId">calendarId (required).</param>
        /// <param name="calendarType">calendarType (required).</param>
        /// <param name="weekendMask">weekendMask (required).</param>
        /// <param name="sourceProvider">sourceProvider (required).</param>
        /// <param name="properties">properties.</param>
        public CreateCalendarRequest(ResourceId calendarId = default(ResourceId), string calendarType = default(string), WeekendMask weekendMask = default(WeekendMask), string sourceProvider = default(string), List<Property> properties = default(List<Property>))
        {
            // to ensure "calendarId" is required (not null)
            if (calendarId == null)
            {
                throw new ArgumentNullException("calendarId is a required property for CreateCalendarRequest and cannot be null");
            }
            this.CalendarId = calendarId;
            // to ensure "calendarType" is required (not null)
            if (calendarType == null)
            {
                throw new ArgumentNullException("calendarType is a required property for CreateCalendarRequest and cannot be null");
            }
            this.CalendarType = calendarType;
            // to ensure "weekendMask" is required (not null)
            if (weekendMask == null)
            {
                throw new ArgumentNullException("weekendMask is a required property for CreateCalendarRequest and cannot be null");
            }
            this.WeekendMask = weekendMask;
            // to ensure "sourceProvider" is required (not null)
            if (sourceProvider == null)
            {
                throw new ArgumentNullException("sourceProvider is a required property for CreateCalendarRequest and cannot be null");
            }
            this.SourceProvider = sourceProvider;
            this.Properties = properties;
        }

        /// <summary>
        /// Gets or Sets CalendarId
        /// </summary>
        [DataMember(Name = "calendarId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId CalendarId { get; set; }

        /// <summary>
        /// Gets or Sets CalendarType
        /// </summary>
        [DataMember(Name = "calendarType", IsRequired = true, EmitDefaultValue = true)]
        public string CalendarType { get; set; }

        /// <summary>
        /// Gets or Sets WeekendMask
        /// </summary>
        [DataMember(Name = "weekendMask", IsRequired = true, EmitDefaultValue = true)]
        public WeekendMask WeekendMask { get; set; }

        /// <summary>
        /// Gets or Sets SourceProvider
        /// </summary>
        [DataMember(Name = "sourceProvider", IsRequired = true, EmitDefaultValue = true)]
        public string SourceProvider { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public List<Property> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCalendarRequest {\n");
            sb.Append("  CalendarId: ").Append(CalendarId).Append("\n");
            sb.Append("  CalendarType: ").Append(CalendarType).Append("\n");
            sb.Append("  WeekendMask: ").Append(WeekendMask).Append("\n");
            sb.Append("  SourceProvider: ").Append(SourceProvider).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCalendarRequest);
        }

        /// <summary>
        /// Returns true if CreateCalendarRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCalendarRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCalendarRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CalendarId == input.CalendarId ||
                    (this.CalendarId != null &&
                    this.CalendarId.Equals(input.CalendarId))
                ) && 
                (
                    this.CalendarType == input.CalendarType ||
                    (this.CalendarType != null &&
                    this.CalendarType.Equals(input.CalendarType))
                ) && 
                (
                    this.WeekendMask == input.WeekendMask ||
                    (this.WeekendMask != null &&
                    this.WeekendMask.Equals(input.WeekendMask))
                ) && 
                (
                    this.SourceProvider == input.SourceProvider ||
                    (this.SourceProvider != null &&
                    this.SourceProvider.Equals(input.SourceProvider))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CalendarId != null)
                {
                    hashCode = (hashCode * 59) + this.CalendarId.GetHashCode();
                }
                if (this.CalendarType != null)
                {
                    hashCode = (hashCode * 59) + this.CalendarType.GetHashCode();
                }
                if (this.WeekendMask != null)
                {
                    hashCode = (hashCode * 59) + this.WeekendMask.GetHashCode();
                }
                if (this.SourceProvider != null)
                {
                    hashCode = (hashCode * 59) + this.SourceProvider.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CalendarType (string) maxLength
            if (this.CalendarType != null && this.CalendarType.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalendarType, length must be less than 256.", new [] { "CalendarType" });
            }

            // CalendarType (string) minLength
            if (this.CalendarType != null && this.CalendarType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalendarType, length must be greater than 1.", new [] { "CalendarType" });
            }

            // CalendarType (string) pattern
            Regex regexCalendarType = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCalendarType.Match(this.CalendarType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CalendarType, must match a pattern of " + regexCalendarType, new [] { "CalendarType" });
            }

            // SourceProvider (string) maxLength
            if (this.SourceProvider != null && this.SourceProvider.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceProvider, length must be less than 50.", new [] { "SourceProvider" });
            }

            // SourceProvider (string) minLength
            if (this.SourceProvider != null && this.SourceProvider.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceProvider, length must be greater than 0.", new [] { "SourceProvider" });
            }

            // SourceProvider (string) pattern
            Regex regexSourceProvider = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexSourceProvider.Match(this.SourceProvider).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SourceProvider, must match a pattern of " + regexSourceProvider, new [] { "SourceProvider" });
            }

            yield break;
        }
    }
}
