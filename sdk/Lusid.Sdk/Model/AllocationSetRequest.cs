/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A request to create or update multiple Allocations.
    /// </summary>
    [DataContract(Name = "AllocationSetRequest")]
    public partial class AllocationSetRequest : IEquatable<AllocationSetRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllocationSetRequest" /> class.
        /// </summary>
        /// <param name="allocationRequests">A collection of AllocationRequests..</param>
        public AllocationSetRequest(List<AllocationRequest> allocationRequests = default(List<AllocationRequest>))
        {
            this.AllocationRequests = allocationRequests;
        }

        /// <summary>
        /// A collection of AllocationRequests.
        /// </summary>
        /// <value>A collection of AllocationRequests.</value>
        [DataMember(Name = "allocationRequests", EmitDefaultValue = true)]
        public List<AllocationRequest> AllocationRequests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AllocationSetRequest {\n");
            sb.Append("  AllocationRequests: ").Append(AllocationRequests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllocationSetRequest);
        }

        /// <summary>
        /// Returns true if AllocationSetRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AllocationSetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllocationSetRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AllocationRequests == input.AllocationRequests ||
                    this.AllocationRequests != null &&
                    input.AllocationRequests != null &&
                    this.AllocationRequests.SequenceEqual(input.AllocationRequests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllocationRequests != null)
                {
                    hashCode = (hashCode * 59) + this.AllocationRequests.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
