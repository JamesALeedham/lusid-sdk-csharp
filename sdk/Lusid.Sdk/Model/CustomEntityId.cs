/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CustomEntityId
    /// </summary>
    [DataContract(Name = "CustomEntityId")]
    public partial class CustomEntityId : IEquatable<CustomEntityId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEntityId" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEntityId() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEntityId" /> class.
        /// </summary>
        /// <param name="identifierScope">The scope the identifier resides in (the scope of the identifier property definition). (required).</param>
        /// <param name="identifierType">What the identifier represents (the code of the identifier property definition). (required).</param>
        /// <param name="identifierValue">The value of the identifier for this entity. (required).</param>
        /// <param name="effectiveFrom">The effective datetime from which the identifier is valid..</param>
        /// <param name="effectiveUntil">The effective datetime until which the identifier is valid. If not supplied this will be valid indefinitely, or until the next &#39;effectiveFrom&#39; datetime of the identifier..</param>
        public CustomEntityId(string identifierScope = default(string), string identifierType = default(string), string identifierValue = default(string), DateTimeOffset? effectiveFrom = default(DateTimeOffset?), DateTimeOffset? effectiveUntil = default(DateTimeOffset?))
        {
            // to ensure "identifierScope" is required (not null)
            if (identifierScope == null)
            {
                throw new ArgumentNullException("identifierScope is a required property for CustomEntityId and cannot be null");
            }
            this.IdentifierScope = identifierScope;
            // to ensure "identifierType" is required (not null)
            if (identifierType == null)
            {
                throw new ArgumentNullException("identifierType is a required property for CustomEntityId and cannot be null");
            }
            this.IdentifierType = identifierType;
            // to ensure "identifierValue" is required (not null)
            if (identifierValue == null)
            {
                throw new ArgumentNullException("identifierValue is a required property for CustomEntityId and cannot be null");
            }
            this.IdentifierValue = identifierValue;
            this.EffectiveFrom = effectiveFrom;
            this.EffectiveUntil = effectiveUntil;
        }

        /// <summary>
        /// The scope the identifier resides in (the scope of the identifier property definition).
        /// </summary>
        /// <value>The scope the identifier resides in (the scope of the identifier property definition).</value>
        [DataMember(Name = "identifierScope", IsRequired = true, EmitDefaultValue = true)]
        public string IdentifierScope { get; set; }

        /// <summary>
        /// What the identifier represents (the code of the identifier property definition).
        /// </summary>
        /// <value>What the identifier represents (the code of the identifier property definition).</value>
        [DataMember(Name = "identifierType", IsRequired = true, EmitDefaultValue = true)]
        public string IdentifierType { get; set; }

        /// <summary>
        /// The value of the identifier for this entity.
        /// </summary>
        /// <value>The value of the identifier for this entity.</value>
        [DataMember(Name = "identifierValue", IsRequired = true, EmitDefaultValue = true)]
        public string IdentifierValue { get; set; }

        /// <summary>
        /// The effective datetime from which the identifier is valid.
        /// </summary>
        /// <value>The effective datetime from which the identifier is valid.</value>
        [DataMember(Name = "effectiveFrom", EmitDefaultValue = true)]
        public DateTimeOffset? EffectiveFrom { get; set; }

        /// <summary>
        /// The effective datetime until which the identifier is valid. If not supplied this will be valid indefinitely, or until the next &#39;effectiveFrom&#39; datetime of the identifier.
        /// </summary>
        /// <value>The effective datetime until which the identifier is valid. If not supplied this will be valid indefinitely, or until the next &#39;effectiveFrom&#39; datetime of the identifier.</value>
        [DataMember(Name = "effectiveUntil", EmitDefaultValue = true)]
        public DateTimeOffset? EffectiveUntil { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomEntityId {\n");
            sb.Append("  IdentifierScope: ").Append(IdentifierScope).Append("\n");
            sb.Append("  IdentifierType: ").Append(IdentifierType).Append("\n");
            sb.Append("  IdentifierValue: ").Append(IdentifierValue).Append("\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  EffectiveUntil: ").Append(EffectiveUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomEntityId);
        }

        /// <summary>
        /// Returns true if CustomEntityId instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomEntityId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomEntityId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IdentifierScope == input.IdentifierScope ||
                    (this.IdentifierScope != null &&
                    this.IdentifierScope.Equals(input.IdentifierScope))
                ) && 
                (
                    this.IdentifierType == input.IdentifierType ||
                    (this.IdentifierType != null &&
                    this.IdentifierType.Equals(input.IdentifierType))
                ) && 
                (
                    this.IdentifierValue == input.IdentifierValue ||
                    (this.IdentifierValue != null &&
                    this.IdentifierValue.Equals(input.IdentifierValue))
                ) && 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.EffectiveUntil == input.EffectiveUntil ||
                    (this.EffectiveUntil != null &&
                    this.EffectiveUntil.Equals(input.EffectiveUntil))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdentifierScope != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierScope.GetHashCode();
                }
                if (this.IdentifierType != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierType.GetHashCode();
                }
                if (this.IdentifierValue != null)
                {
                    hashCode = (hashCode * 59) + this.IdentifierValue.GetHashCode();
                }
                if (this.EffectiveFrom != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveFrom.GetHashCode();
                }
                if (this.EffectiveUntil != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveUntil.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IdentifierScope (string) maxLength
            if (this.IdentifierScope != null && this.IdentifierScope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierScope, length must be less than 64.", new [] { "IdentifierScope" });
            }

            // IdentifierScope (string) minLength
            if (this.IdentifierScope != null && this.IdentifierScope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierScope, length must be greater than 1.", new [] { "IdentifierScope" });
            }

            // IdentifierScope (string) pattern
            Regex regexIdentifierScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexIdentifierScope.Match(this.IdentifierScope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierScope, must match a pattern of " + regexIdentifierScope, new [] { "IdentifierScope" });
            }

            // IdentifierType (string) maxLength
            if (this.IdentifierType != null && this.IdentifierType.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierType, length must be less than 64.", new [] { "IdentifierType" });
            }

            // IdentifierType (string) minLength
            if (this.IdentifierType != null && this.IdentifierType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierType, length must be greater than 1.", new [] { "IdentifierType" });
            }

            // IdentifierType (string) pattern
            Regex regexIdentifierType = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexIdentifierType.Match(this.IdentifierType).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierType, must match a pattern of " + regexIdentifierType, new [] { "IdentifierType" });
            }

            // IdentifierValue (string) maxLength
            if (this.IdentifierValue != null && this.IdentifierValue.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierValue, length must be less than 1024.", new [] { "IdentifierValue" });
            }

            // IdentifierValue (string) minLength
            if (this.IdentifierValue != null && this.IdentifierValue.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierValue, length must be greater than 1.", new [] { "IdentifierValue" });
            }

            // IdentifierValue (string) pattern
            Regex regexIdentifierValue = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexIdentifierValue.Match(this.IdentifierValue).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentifierValue, must match a pattern of " + regexIdentifierValue, new [] { "IdentifierValue" });
            }

            yield break;
        }
    }
}
