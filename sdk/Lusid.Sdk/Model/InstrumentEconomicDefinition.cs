/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1383
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Expanded instrument definition - in the case of OTC instruments  this contains the definition of the non-exchange traded instrument.  The format for this can be client-defined, but in order to transparently use  vendor libraries it must conform to a format that LUSID understands.
    /// </summary>
    [DataContract]
    public partial class InstrumentEconomicDefinition :  IEquatable<InstrumentEconomicDefinition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentEconomicDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstrumentEconomicDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstrumentEconomicDefinition" /> class.
        /// </summary>
        /// <param name="instrumentFormat">The format of the expanded definition. (required).</param>
        /// <param name="content">The content of the expanded definition. There is no validation on the format of this. (required).</param>
        public InstrumentEconomicDefinition(string instrumentFormat = default(string), string content = default(string))
        {
            // to ensure "instrumentFormat" is required (not null)
            if (instrumentFormat == null)
            {
                throw new InvalidDataException("instrumentFormat is a required property for InstrumentEconomicDefinition and cannot be null");
            }
            else
            {
                this.InstrumentFormat = instrumentFormat;
            }
            
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new InvalidDataException("content is a required property for InstrumentEconomicDefinition and cannot be null");
            }
            else
            {
                this.Content = content;
            }
            
        }
        
        /// <summary>
        /// The format of the expanded definition.
        /// </summary>
        /// <value>The format of the expanded definition.</value>
        [DataMember(Name="instrumentFormat", EmitDefaultValue=false)]
        public string InstrumentFormat { get; set; }

        /// <summary>
        /// The content of the expanded definition. There is no validation on the format of this.
        /// </summary>
        /// <value>The content of the expanded definition. There is no validation on the format of this.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstrumentEconomicDefinition {\n");
            sb.Append("  InstrumentFormat: ").Append(InstrumentFormat).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstrumentEconomicDefinition);
        }

        /// <summary>
        /// Returns true if InstrumentEconomicDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of InstrumentEconomicDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstrumentEconomicDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstrumentFormat == input.InstrumentFormat ||
                    (this.InstrumentFormat != null &&
                    this.InstrumentFormat.Equals(input.InstrumentFormat))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentFormat != null)
                    hashCode = hashCode * 59 + this.InstrumentFormat.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                return hashCode;
            }
        }
    }

}
