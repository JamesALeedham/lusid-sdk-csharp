/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// MappedString
    /// </summary>
    [DataContract(Name = "MappedString")]
    public partial class MappedString : IEquatable<MappedString>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MappedString" /> class.
        /// </summary>
        /// <param name="leftValue">leftValue.</param>
        /// <param name="rightValue">rightValue.</param>
        /// <param name="mappingDirection">mappingDirection.</param>
        /// <param name="isCaseSensitive">isCaseSensitive.</param>
        public MappedString(string leftValue = default(string), string rightValue = default(string), string mappingDirection = default(string), bool isCaseSensitive = default(bool))
        {
            this.LeftValue = leftValue;
            this.RightValue = rightValue;
            this.MappingDirection = mappingDirection;
            this.IsCaseSensitive = isCaseSensitive;
        }

        /// <summary>
        /// Gets or Sets LeftValue
        /// </summary>
        [DataMember(Name = "leftValue", EmitDefaultValue = true)]
        public string LeftValue { get; set; }

        /// <summary>
        /// Gets or Sets RightValue
        /// </summary>
        [DataMember(Name = "rightValue", EmitDefaultValue = true)]
        public string RightValue { get; set; }

        /// <summary>
        /// Gets or Sets MappingDirection
        /// </summary>
        [DataMember(Name = "mappingDirection", EmitDefaultValue = true)]
        public string MappingDirection { get; set; }

        /// <summary>
        /// Gets or Sets IsCaseSensitive
        /// </summary>
        [DataMember(Name = "isCaseSensitive", EmitDefaultValue = true)]
        public bool IsCaseSensitive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MappedString {\n");
            sb.Append("  LeftValue: ").Append(LeftValue).Append("\n");
            sb.Append("  RightValue: ").Append(RightValue).Append("\n");
            sb.Append("  MappingDirection: ").Append(MappingDirection).Append("\n");
            sb.Append("  IsCaseSensitive: ").Append(IsCaseSensitive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MappedString);
        }

        /// <summary>
        /// Returns true if MappedString instances are equal
        /// </summary>
        /// <param name="input">Instance of MappedString to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MappedString input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LeftValue == input.LeftValue ||
                    (this.LeftValue != null &&
                    this.LeftValue.Equals(input.LeftValue))
                ) && 
                (
                    this.RightValue == input.RightValue ||
                    (this.RightValue != null &&
                    this.RightValue.Equals(input.RightValue))
                ) && 
                (
                    this.MappingDirection == input.MappingDirection ||
                    (this.MappingDirection != null &&
                    this.MappingDirection.Equals(input.MappingDirection))
                ) && 
                (
                    this.IsCaseSensitive == input.IsCaseSensitive ||
                    this.IsCaseSensitive.Equals(input.IsCaseSensitive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeftValue != null)
                {
                    hashCode = (hashCode * 59) + this.LeftValue.GetHashCode();
                }
                if (this.RightValue != null)
                {
                    hashCode = (hashCode * 59) + this.RightValue.GetHashCode();
                }
                if (this.MappingDirection != null)
                {
                    hashCode = (hashCode * 59) + this.MappingDirection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsCaseSensitive.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
