/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// JELinesQueryParameters
    /// </summary>
    [DataContract(Name = "JELinesQueryParameters")]
    public partial class JELinesQueryParameters : IEquatable<JELinesQueryParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JELinesQueryParameters" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the JELines..</param>
        /// <param name="endDate">The end date of the JELInes.</param>
        /// <param name="filter">Expression to filter the result set..</param>
        /// <param name="propertyKeys">A list of property keys from the &#39;Instrument&#39;, &#39;Transaction&#39;, &#39;Portfolio&#39;, &#39;Account&#39;, &#39;LegalEntity&#39; or &#39;CustodianAccount&#39; domain to decorate onto the JELine..</param>
        public JELinesQueryParameters(DateTimeOrCutLabel startDate = default(DateTimeOrCutLabel), DateTimeOrCutLabel endDate = default(DateTimeOrCutLabel), string filter = default(string), List<string> propertyKeys = default(List<string>))
        {
            this.StartDate = startDate;
            this.EndDate = endDate;
            this.Filter = filter;
            this.PropertyKeys = propertyKeys;
        }

        /// <summary>
        /// The start date of the JELines.
        /// </summary>
        /// <value>The start date of the JELines.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        public DateTimeOrCutLabel StartDate { get; set; }

        /// <summary>
        /// The end date of the JELInes
        /// </summary>
        /// <value>The end date of the JELInes</value>
        [DataMember(Name = "endDate", EmitDefaultValue = true)]
        public DateTimeOrCutLabel EndDate { get; set; }

        /// <summary>
        /// Expression to filter the result set.
        /// </summary>
        /// <value>Expression to filter the result set.</value>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// A list of property keys from the &#39;Instrument&#39;, &#39;Transaction&#39;, &#39;Portfolio&#39;, &#39;Account&#39;, &#39;LegalEntity&#39; or &#39;CustodianAccount&#39; domain to decorate onto the JELine.
        /// </summary>
        /// <value>A list of property keys from the &#39;Instrument&#39;, &#39;Transaction&#39;, &#39;Portfolio&#39;, &#39;Account&#39;, &#39;LegalEntity&#39; or &#39;CustodianAccount&#39; domain to decorate onto the JELine.</value>
        [DataMember(Name = "propertyKeys", EmitDefaultValue = true)]
        public List<string> PropertyKeys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JELinesQueryParameters {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  PropertyKeys: ").Append(PropertyKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JELinesQueryParameters);
        }

        /// <summary>
        /// Returns true if JELinesQueryParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of JELinesQueryParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JELinesQueryParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.PropertyKeys == input.PropertyKeys ||
                    this.PropertyKeys != null &&
                    input.PropertyKeys != null &&
                    this.PropertyKeys.SequenceEqual(input.PropertyKeys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.PropertyKeys != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyKeys.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Filter (string) maxLength
            if (this.Filter != null && this.Filter.Length > 16384)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, length must be less than 16384.", new [] { "Filter" });
            }

            // Filter (string) minLength
            if (this.Filter != null && this.Filter.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, length must be greater than 0.", new [] { "Filter" });
            }

            // Filter (string) pattern
            Regex regexFilter = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexFilter.Match(this.Filter).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filter, must match a pattern of " + regexFilter, new [] { "Filter" });
            }

            yield break;
        }
    }
}
