/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ReconciliationRunId
    /// </summary>
    [DataContract(Name = "ReconciliationRunId")]
    public partial class ReconciliationRunId : IEquatable<ReconciliationRunId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationRunId" /> class.
        /// </summary>
        /// <param name="reconciliation">reconciliation.</param>
        /// <param name="date">date.</param>
        /// <param name="version">version.</param>
        public ReconciliationRunId(ReconciliationId reconciliation = default(ReconciliationId), DateTimeOffset date = default(DateTimeOffset), int version = default(int))
        {
            this.Reconciliation = reconciliation;
            this.Date = date;
            this._Version = version;
        }

        /// <summary>
        /// Gets or Sets Reconciliation
        /// </summary>
        [DataMember(Name = "reconciliation", EmitDefaultValue = false)]
        public ReconciliationId Reconciliation { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public DateTimeOffset Date { get; set; }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int _Version { get; set; }

        /// <summary>
        /// Gets or Sets AsString
        /// </summary>
        [DataMember(Name = "asString", EmitDefaultValue = true)]
        public string AsString { get; private set; }

        /// <summary>
        /// Returns false as AsString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAsString()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReconciliationRunId {\n");
            sb.Append("  Reconciliation: ").Append(Reconciliation).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  AsString: ").Append(AsString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReconciliationRunId);
        }

        /// <summary>
        /// Returns true if ReconciliationRunId instances are equal
        /// </summary>
        /// <param name="input">Instance of ReconciliationRunId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReconciliationRunId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Reconciliation == input.Reconciliation ||
                    (this.Reconciliation != null &&
                    this.Reconciliation.Equals(input.Reconciliation))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.AsString == input.AsString ||
                    (this.AsString != null &&
                    this.AsString.Equals(input.AsString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reconciliation != null)
                {
                    hashCode = (hashCode * 59) + this.Reconciliation.GetHashCode();
                }
                if (this.Date != null)
                {
                    hashCode = (hashCode * 59) + this.Date.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._Version.GetHashCode();
                if (this.AsString != null)
                {
                    hashCode = (hashCode * 59) + this.AsString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
