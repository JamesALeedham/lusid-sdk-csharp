/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpsertCorporateActionRequest
    /// </summary>
    [DataContract(Name = "UpsertCorporateActionRequest")]
    public partial class UpsertCorporateActionRequest : IEquatable<UpsertCorporateActionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertCorporateActionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertCorporateActionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertCorporateActionRequest" /> class.
        /// </summary>
        /// <param name="corporateActionCode">The unique identifier of this corporate action (required).</param>
        /// <param name="description">The description of the corporate action..</param>
        /// <param name="announcementDate">The announcement date of the corporate action (required).</param>
        /// <param name="exDate">The ex date of the corporate action (required).</param>
        /// <param name="recordDate">The record date of the corporate action (required).</param>
        /// <param name="paymentDate">The payment date of the corporate action (required).</param>
        /// <param name="transitions">The transitions that result from this corporate action (required).</param>
        public UpsertCorporateActionRequest(string corporateActionCode = default(string), string description = default(string), DateTimeOffset announcementDate = default(DateTimeOffset), DateTimeOffset exDate = default(DateTimeOffset), DateTimeOffset recordDate = default(DateTimeOffset), DateTimeOffset paymentDate = default(DateTimeOffset), List<CorporateActionTransitionRequest> transitions = default(List<CorporateActionTransitionRequest>))
        {
            // to ensure "corporateActionCode" is required (not null)
            if (corporateActionCode == null)
            {
                throw new ArgumentNullException("corporateActionCode is a required property for UpsertCorporateActionRequest and cannot be null");
            }
            this.CorporateActionCode = corporateActionCode;
            this.AnnouncementDate = announcementDate;
            this.ExDate = exDate;
            this.RecordDate = recordDate;
            this.PaymentDate = paymentDate;
            // to ensure "transitions" is required (not null)
            if (transitions == null)
            {
                throw new ArgumentNullException("transitions is a required property for UpsertCorporateActionRequest and cannot be null");
            }
            this.Transitions = transitions;
            this.Description = description;
        }

        /// <summary>
        /// The unique identifier of this corporate action
        /// </summary>
        /// <value>The unique identifier of this corporate action</value>
        [DataMember(Name = "corporateActionCode", IsRequired = true, EmitDefaultValue = true)]
        public string CorporateActionCode { get; set; }

        /// <summary>
        /// The description of the corporate action.
        /// </summary>
        /// <value>The description of the corporate action.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The announcement date of the corporate action
        /// </summary>
        /// <value>The announcement date of the corporate action</value>
        [DataMember(Name = "announcementDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset AnnouncementDate { get; set; }

        /// <summary>
        /// The ex date of the corporate action
        /// </summary>
        /// <value>The ex date of the corporate action</value>
        [DataMember(Name = "exDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ExDate { get; set; }

        /// <summary>
        /// The record date of the corporate action
        /// </summary>
        /// <value>The record date of the corporate action</value>
        [DataMember(Name = "recordDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset RecordDate { get; set; }

        /// <summary>
        /// The payment date of the corporate action
        /// </summary>
        /// <value>The payment date of the corporate action</value>
        [DataMember(Name = "paymentDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset PaymentDate { get; set; }

        /// <summary>
        /// The transitions that result from this corporate action
        /// </summary>
        /// <value>The transitions that result from this corporate action</value>
        [DataMember(Name = "transitions", IsRequired = true, EmitDefaultValue = true)]
        public List<CorporateActionTransitionRequest> Transitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpsertCorporateActionRequest {\n");
            sb.Append("  CorporateActionCode: ").Append(CorporateActionCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AnnouncementDate: ").Append(AnnouncementDate).Append("\n");
            sb.Append("  ExDate: ").Append(ExDate).Append("\n");
            sb.Append("  RecordDate: ").Append(RecordDate).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertCorporateActionRequest);
        }

        /// <summary>
        /// Returns true if UpsertCorporateActionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertCorporateActionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertCorporateActionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CorporateActionCode == input.CorporateActionCode ||
                    (this.CorporateActionCode != null &&
                    this.CorporateActionCode.Equals(input.CorporateActionCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AnnouncementDate == input.AnnouncementDate ||
                    (this.AnnouncementDate != null &&
                    this.AnnouncementDate.Equals(input.AnnouncementDate))
                ) && 
                (
                    this.ExDate == input.ExDate ||
                    (this.ExDate != null &&
                    this.ExDate.Equals(input.ExDate))
                ) && 
                (
                    this.RecordDate == input.RecordDate ||
                    (this.RecordDate != null &&
                    this.RecordDate.Equals(input.RecordDate))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.Transitions == input.Transitions ||
                    this.Transitions != null &&
                    input.Transitions != null &&
                    this.Transitions.SequenceEqual(input.Transitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorporateActionCode != null)
                {
                    hashCode = (hashCode * 59) + this.CorporateActionCode.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.AnnouncementDate != null)
                {
                    hashCode = (hashCode * 59) + this.AnnouncementDate.GetHashCode();
                }
                if (this.ExDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExDate.GetHashCode();
                }
                if (this.RecordDate != null)
                {
                    hashCode = (hashCode * 59) + this.RecordDate.GetHashCode();
                }
                if (this.PaymentDate != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentDate.GetHashCode();
                }
                if (this.Transitions != null)
                {
                    hashCode = (hashCode * 59) + this.Transitions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CorporateActionCode (string) maxLength
            if (this.CorporateActionCode != null && this.CorporateActionCode.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorporateActionCode, length must be less than 64.", new [] { "CorporateActionCode" });
            }

            // CorporateActionCode (string) minLength
            if (this.CorporateActionCode != null && this.CorporateActionCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorporateActionCode, length must be greater than 1.", new [] { "CorporateActionCode" });
            }

            // CorporateActionCode (string) pattern
            Regex regexCorporateActionCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCorporateActionCode.Match(this.CorporateActionCode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CorporateActionCode, must match a pattern of " + regexCorporateActionCode, new [] { "CorporateActionCode" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            yield break;
        }
    }
}
