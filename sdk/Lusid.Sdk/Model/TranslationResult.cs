/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The result of invoking a translation script.
    /// </summary>
    [DataContract(Name = "TranslationResult")]
    public partial class TranslationResult : IEquatable<TranslationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TranslationResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TranslationResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TranslationResult" /> class.
        /// </summary>
        /// <param name="entity">The serialised entity the translation script produced. (required).</param>
        public TranslationResult(string entity = default(string))
        {
            // to ensure "entity" is required (not null)
            if (entity == null)
            {
                throw new ArgumentNullException("entity is a required property for TranslationResult and cannot be null");
            }
            this.Entity = entity;
        }

        /// <summary>
        /// The serialised entity the translation script produced.
        /// </summary>
        /// <value>The serialised entity the translation script produced.</value>
        [DataMember(Name = "entity", IsRequired = true, EmitDefaultValue = true)]
        public string Entity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TranslationResult {\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TranslationResult);
        }

        /// <summary>
        /// Returns true if TranslationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TranslationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranslationResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Entity (string) minLength
            if (this.Entity != null && this.Entity.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Entity, length must be greater than 1.", new [] { "Entity" });
            }

            yield break;
        }
    }
}
