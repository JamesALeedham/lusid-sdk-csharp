/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Full content of a holdings adjustment for a single portfolio and effective date.
    /// </summary>
    [DataContract]
    public partial class HoldingsAdjustment :  IEquatable<HoldingsAdjustment>
    {
        /// <summary>
        /// Describes how the holdings were adjusted. If &#39;PositionToZero&#39; the entire transaction portfolio&#39;s holdings were set via a call to &#39;Set holdings&#39;. If &#39;KeepTheSame&#39; only the specified holdings were adjusted via a call to &#39;Adjust holdings&#39;.
        /// </summary>
        /// <value>Describes how the holdings were adjusted. If &#39;PositionToZero&#39; the entire transaction portfolio&#39;s holdings were set via a call to &#39;Set holdings&#39;. If &#39;KeepTheSame&#39; only the specified holdings were adjusted via a call to &#39;Adjust holdings&#39;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnmatchedHoldingMethodEnum
        {
            /// <summary>
            /// Enum PositionToZero for value: PositionToZero
            /// </summary>
            [EnumMember(Value = "PositionToZero")]
            PositionToZero = 1,

            /// <summary>
            /// Enum KeepTheSame for value: KeepTheSame
            /// </summary>
            [EnumMember(Value = "KeepTheSame")]
            KeepTheSame = 2

        }

        /// <summary>
        /// Describes how the holdings were adjusted. If &#39;PositionToZero&#39; the entire transaction portfolio&#39;s holdings were set via a call to &#39;Set holdings&#39;. If &#39;KeepTheSame&#39; only the specified holdings were adjusted via a call to &#39;Adjust holdings&#39;.
        /// </summary>
        /// <value>Describes how the holdings were adjusted. If &#39;PositionToZero&#39; the entire transaction portfolio&#39;s holdings were set via a call to &#39;Set holdings&#39;. If &#39;KeepTheSame&#39; only the specified holdings were adjusted via a call to &#39;Adjust holdings&#39;.</value>
        [DataMember(Name="unmatchedHoldingMethod", EmitDefaultValue=false)]
        public UnmatchedHoldingMethodEnum UnmatchedHoldingMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsAdjustment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HoldingsAdjustment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsAdjustment" /> class.
        /// </summary>
        /// <param name="effectiveAt">The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment. (required).</param>
        /// <param name="version">version (required).</param>
        /// <param name="unmatchedHoldingMethod">Describes how the holdings were adjusted. If &#39;PositionToZero&#39; the entire transaction portfolio&#39;s holdings were set via a call to &#39;Set holdings&#39;. If &#39;KeepTheSame&#39; only the specified holdings were adjusted via a call to &#39;Adjust holdings&#39;. (required).</param>
        /// <param name="adjustments">The holding adjustments. (required).</param>
        /// <param name="links">links.</param>
        public HoldingsAdjustment(DateTimeOffset? effectiveAt = default(DateTimeOffset?), Version version = default(Version), UnmatchedHoldingMethodEnum unmatchedHoldingMethod = default(UnmatchedHoldingMethodEnum), List<HoldingAdjustment> adjustments = default(List<HoldingAdjustment>), List<Link> links = default(List<Link>))
        {
            // to ensure "effectiveAt" is required (not null)
            if (effectiveAt == null)
            {
                throw new InvalidDataException("effectiveAt is a required property for HoldingsAdjustment and cannot be null");
            }
            else
            {
                this.EffectiveAt = effectiveAt;
            }
            
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for HoldingsAdjustment and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            
            // to ensure "unmatchedHoldingMethod" is required (not null)
            if (unmatchedHoldingMethod == null)
            {
                throw new InvalidDataException("unmatchedHoldingMethod is a required property for HoldingsAdjustment and cannot be null");
            }
            else
            {
                this.UnmatchedHoldingMethod = unmatchedHoldingMethod;
            }
            
            // to ensure "adjustments" is required (not null)
            if (adjustments == null)
            {
                throw new InvalidDataException("adjustments is a required property for HoldingsAdjustment and cannot be null");
            }
            else
            {
                this.Adjustments = adjustments;
            }
            
            this.Links = links;
        }
        
        /// <summary>
        /// The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.
        /// </summary>
        /// <value>The effective datetime from which the adjustment is valid. There can only be one holdings adjustment for a transaction portfolio at a specific effective datetime, so this uniquely identifies the adjustment.</value>
        [DataMember(Name="effectiveAt", EmitDefaultValue=false)]
        public DateTimeOffset? EffectiveAt { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public Version Version { get; set; }


        /// <summary>
        /// The holding adjustments.
        /// </summary>
        /// <value>The holding adjustments.</value>
        [DataMember(Name="adjustments", EmitDefaultValue=false)]
        public List<HoldingAdjustment> Adjustments { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HoldingsAdjustment {\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  UnmatchedHoldingMethod: ").Append(UnmatchedHoldingMethod).Append("\n");
            sb.Append("  Adjustments: ").Append(Adjustments).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HoldingsAdjustment);
        }

        /// <summary>
        /// Returns true if HoldingsAdjustment instances are equal
        /// </summary>
        /// <param name="input">Instance of HoldingsAdjustment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoldingsAdjustment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.UnmatchedHoldingMethod == input.UnmatchedHoldingMethod ||
                    (this.UnmatchedHoldingMethod != null &&
                    this.UnmatchedHoldingMethod.Equals(input.UnmatchedHoldingMethod))
                ) && 
                (
                    this.Adjustments == input.Adjustments ||
                    this.Adjustments != null &&
                    input.Adjustments != null &&
                    this.Adjustments.SequenceEqual(input.Adjustments)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveAt != null)
                    hashCode = hashCode * 59 + this.EffectiveAt.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.UnmatchedHoldingMethod != null)
                    hashCode = hashCode * 59 + this.UnmatchedHoldingMethod.GetHashCode();
                if (this.Adjustments != null)
                    hashCode = hashCode * 59 + this.Adjustments.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }
    }

}
