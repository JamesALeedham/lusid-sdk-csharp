/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ConstantVolatilitySurfaceAllOf
    /// </summary>
    [DataContract(Name = "ConstantVolatilitySurface_allOf")]
    public partial class ConstantVolatilitySurfaceAllOf : IEquatable<ConstantVolatilitySurfaceAllOf>, IValidatableObject
    {
        /// <summary>
        /// The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData, ConstantVolatilitySurface
        /// </summary>
        /// <value>The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData, ConstantVolatilitySurface</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MarketDataTypeEnum
        {
            /// <summary>
            /// Enum DiscountFactorCurveData for value: DiscountFactorCurveData
            /// </summary>
            [EnumMember(Value = "DiscountFactorCurveData")]
            DiscountFactorCurveData = 1,

            /// <summary>
            /// Enum EquityVolSurfaceData for value: EquityVolSurfaceData
            /// </summary>
            [EnumMember(Value = "EquityVolSurfaceData")]
            EquityVolSurfaceData = 2,

            /// <summary>
            /// Enum FxVolSurfaceData for value: FxVolSurfaceData
            /// </summary>
            [EnumMember(Value = "FxVolSurfaceData")]
            FxVolSurfaceData = 3,

            /// <summary>
            /// Enum IrVolCubeData for value: IrVolCubeData
            /// </summary>
            [EnumMember(Value = "IrVolCubeData")]
            IrVolCubeData = 4,

            /// <summary>
            /// Enum OpaqueMarketData for value: OpaqueMarketData
            /// </summary>
            [EnumMember(Value = "OpaqueMarketData")]
            OpaqueMarketData = 5,

            /// <summary>
            /// Enum YieldCurveData for value: YieldCurveData
            /// </summary>
            [EnumMember(Value = "YieldCurveData")]
            YieldCurveData = 6,

            /// <summary>
            /// Enum FxForwardCurveData for value: FxForwardCurveData
            /// </summary>
            [EnumMember(Value = "FxForwardCurveData")]
            FxForwardCurveData = 7,

            /// <summary>
            /// Enum FxForwardPipsCurveData for value: FxForwardPipsCurveData
            /// </summary>
            [EnumMember(Value = "FxForwardPipsCurveData")]
            FxForwardPipsCurveData = 8,

            /// <summary>
            /// Enum FxForwardTenorCurveData for value: FxForwardTenorCurveData
            /// </summary>
            [EnumMember(Value = "FxForwardTenorCurveData")]
            FxForwardTenorCurveData = 9,

            /// <summary>
            /// Enum FxForwardTenorPipsCurveData for value: FxForwardTenorPipsCurveData
            /// </summary>
            [EnumMember(Value = "FxForwardTenorPipsCurveData")]
            FxForwardTenorPipsCurveData = 10,

            /// <summary>
            /// Enum FxForwardCurveByQuoteReference for value: FxForwardCurveByQuoteReference
            /// </summary>
            [EnumMember(Value = "FxForwardCurveByQuoteReference")]
            FxForwardCurveByQuoteReference = 11,

            /// <summary>
            /// Enum CreditSpreadCurveData for value: CreditSpreadCurveData
            /// </summary>
            [EnumMember(Value = "CreditSpreadCurveData")]
            CreditSpreadCurveData = 12,

            /// <summary>
            /// Enum EquityCurveByPricesData for value: EquityCurveByPricesData
            /// </summary>
            [EnumMember(Value = "EquityCurveByPricesData")]
            EquityCurveByPricesData = 13,

            /// <summary>
            /// Enum ConstantVolatilitySurface for value: ConstantVolatilitySurface
            /// </summary>
            [EnumMember(Value = "ConstantVolatilitySurface")]
            ConstantVolatilitySurface = 14

        }


        /// <summary>
        /// The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData, ConstantVolatilitySurface
        /// </summary>
        /// <value>The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData, ConstantVolatilitySurface</value>
        [DataMember(Name = "marketDataType", IsRequired = true, EmitDefaultValue = true)]
        public MarketDataTypeEnum MarketDataType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstantVolatilitySurfaceAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConstantVolatilitySurfaceAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConstantVolatilitySurfaceAllOf" /> class.
        /// </summary>
        /// <param name="baseDate">Base date of the engine - this is the reference date for resolution of tenors. (required).</param>
        /// <param name="assetType">What is the asset that the engine is for.  Supported string (enumeration) values are: [Cash, Commodity, Credit, Equity, Fx, Rates, FxVol, IrVol, EquityVol, HolidayCalendar, IndexConvention, FlowConvention, CdsFlowConvention, CorporateActions, FxForwards, Quote, Inflation, EquityCurve, All, VendorOpaque]. (required).</param>
        /// <param name="lineage">lineage.</param>
        /// <param name="volatility">Volatility value. (required).</param>
        /// <param name="marketDataType">The available values are: DiscountFactorCurveData, EquityVolSurfaceData, FxVolSurfaceData, IrVolCubeData, OpaqueMarketData, YieldCurveData, FxForwardCurveData, FxForwardPipsCurveData, FxForwardTenorCurveData, FxForwardTenorPipsCurveData, FxForwardCurveByQuoteReference, CreditSpreadCurveData, EquityCurveByPricesData, ConstantVolatilitySurface (required).</param>
        public ConstantVolatilitySurfaceAllOf(DateTimeOffset baseDate = default(DateTimeOffset), string assetType = default(string), string lineage = default(string), decimal volatility = default(decimal), MarketDataTypeEnum marketDataType = default(MarketDataTypeEnum))
        {
            this.BaseDate = baseDate;
            // to ensure "assetType" is required (not null)
            if (assetType == null)
            {
                throw new ArgumentNullException("assetType is a required property for ConstantVolatilitySurfaceAllOf and cannot be null");
            }
            this.AssetType = assetType;
            this.Volatility = volatility;
            this.MarketDataType = marketDataType;
            this.Lineage = lineage;
        }

        /// <summary>
        /// Base date of the engine - this is the reference date for resolution of tenors.
        /// </summary>
        /// <value>Base date of the engine - this is the reference date for resolution of tenors.</value>
        [DataMember(Name = "baseDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset BaseDate { get; set; }

        /// <summary>
        /// What is the asset that the engine is for.  Supported string (enumeration) values are: [Cash, Commodity, Credit, Equity, Fx, Rates, FxVol, IrVol, EquityVol, HolidayCalendar, IndexConvention, FlowConvention, CdsFlowConvention, CorporateActions, FxForwards, Quote, Inflation, EquityCurve, All, VendorOpaque].
        /// </summary>
        /// <value>What is the asset that the engine is for.  Supported string (enumeration) values are: [Cash, Commodity, Credit, Equity, Fx, Rates, FxVol, IrVol, EquityVol, HolidayCalendar, IndexConvention, FlowConvention, CdsFlowConvention, CorporateActions, FxForwards, Quote, Inflation, EquityCurve, All, VendorOpaque].</value>
        [DataMember(Name = "assetType", IsRequired = true, EmitDefaultValue = true)]
        public string AssetType { get; set; }

        /// <summary>
        /// Gets or Sets Lineage
        /// </summary>
        [DataMember(Name = "lineage", EmitDefaultValue = true)]
        public string Lineage { get; set; }

        /// <summary>
        /// Volatility value.
        /// </summary>
        /// <value>Volatility value.</value>
        [DataMember(Name = "volatility", IsRequired = true, EmitDefaultValue = true)]
        public decimal Volatility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConstantVolatilitySurfaceAllOf {\n");
            sb.Append("  BaseDate: ").Append(BaseDate).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  Lineage: ").Append(Lineage).Append("\n");
            sb.Append("  Volatility: ").Append(Volatility).Append("\n");
            sb.Append("  MarketDataType: ").Append(MarketDataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConstantVolatilitySurfaceAllOf);
        }

        /// <summary>
        /// Returns true if ConstantVolatilitySurfaceAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ConstantVolatilitySurfaceAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConstantVolatilitySurfaceAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BaseDate == input.BaseDate ||
                    (this.BaseDate != null &&
                    this.BaseDate.Equals(input.BaseDate))
                ) && 
                (
                    this.AssetType == input.AssetType ||
                    (this.AssetType != null &&
                    this.AssetType.Equals(input.AssetType))
                ) && 
                (
                    this.Lineage == input.Lineage ||
                    (this.Lineage != null &&
                    this.Lineage.Equals(input.Lineage))
                ) && 
                (
                    this.Volatility == input.Volatility ||
                    this.Volatility.Equals(input.Volatility)
                ) && 
                (
                    this.MarketDataType == input.MarketDataType ||
                    this.MarketDataType.Equals(input.MarketDataType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BaseDate != null)
                {
                    hashCode = (hashCode * 59) + this.BaseDate.GetHashCode();
                }
                if (this.AssetType != null)
                {
                    hashCode = (hashCode * 59) + this.AssetType.GetHashCode();
                }
                if (this.Lineage != null)
                {
                    hashCode = (hashCode * 59) + this.Lineage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Volatility.GetHashCode();
                hashCode = (hashCode * 59) + this.MarketDataType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AssetType (string) minLength
            if (this.AssetType != null && this.AssetType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetType, length must be greater than 1.", new [] { "AssetType" });
            }

            // Lineage (string) maxLength
            if (this.Lineage != null && this.Lineage.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lineage, length must be less than 1024.", new [] { "Lineage" });
            }

            // Lineage (string) minLength
            if (this.Lineage != null && this.Lineage.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lineage, length must be greater than 0.", new [] { "Lineage" });
            }

            yield break;
        }
    }
}
