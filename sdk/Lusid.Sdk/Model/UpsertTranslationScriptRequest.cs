/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// UpsertTranslationScriptRequest
    /// </summary>
    [DataContract(Name = "UpsertTranslationScriptRequest")]
    public partial class UpsertTranslationScriptRequest : IEquatable<UpsertTranslationScriptRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertTranslationScriptRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpsertTranslationScriptRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpsertTranslationScriptRequest" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="body">Body of the translation script, i.e. the actual translation code. (required).</param>
        public UpsertTranslationScriptRequest(TranslationScriptId id = default(TranslationScriptId), string body = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for UpsertTranslationScriptRequest and cannot be null");
            }
            this.Id = id;
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new ArgumentNullException("body is a required property for UpsertTranslationScriptRequest and cannot be null");
            }
            this.Body = body;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public TranslationScriptId Id { get; set; }

        /// <summary>
        /// Body of the translation script, i.e. the actual translation code.
        /// </summary>
        /// <value>Body of the translation script, i.e. the actual translation code.</value>
        [DataMember(Name = "body", IsRequired = true, EmitDefaultValue = true)]
        public string Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpsertTranslationScriptRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpsertTranslationScriptRequest);
        }

        /// <summary>
        /// Returns true if UpsertTranslationScriptRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpsertTranslationScriptRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpsertTranslationScriptRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Body (string) maxLength
            if (this.Body != null && this.Body.Length > 500000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Body, length must be less than 500000.", new [] { "Body" });
            }

            // Body (string) minLength
            if (this.Body != null && this.Body.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Body, length must be greater than 0.", new [] { "Body" });
            }

            yield break;
        }
    }
}
