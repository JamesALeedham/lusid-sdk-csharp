/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A &#39;transition&#39; within a corporate action, representing an output transition.
    /// </summary>
    [DataContract(Name = "OutputTransition")]
    public partial class OutputTransition : IEquatable<OutputTransition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputTransition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OutputTransition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputTransition" /> class.
        /// </summary>
        /// <param name="instrumentIdentifiers">Unique instrument identifiers (required).</param>
        /// <param name="unitsFactor">The factor to scale units by (required).</param>
        /// <param name="costFactor">The factor to scale cost by (required).</param>
        /// <param name="rounding">rounding.</param>
        public OutputTransition(Dictionary<string, string> instrumentIdentifiers = default(Dictionary<string, string>), decimal unitsFactor = default(decimal), decimal costFactor = default(decimal), RoundingConfiguration rounding = default(RoundingConfiguration))
        {
            // to ensure "instrumentIdentifiers" is required (not null)
            if (instrumentIdentifiers == null)
            {
                throw new ArgumentNullException("instrumentIdentifiers is a required property for OutputTransition and cannot be null");
            }
            this.InstrumentIdentifiers = instrumentIdentifiers;
            this.UnitsFactor = unitsFactor;
            this.CostFactor = costFactor;
            this.Rounding = rounding;
        }

        /// <summary>
        /// Unique instrument identifiers
        /// </summary>
        /// <value>Unique instrument identifiers</value>
        [DataMember(Name = "instrumentIdentifiers", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> InstrumentIdentifiers { get; set; }

        /// <summary>
        /// The factor to scale units by
        /// </summary>
        /// <value>The factor to scale units by</value>
        [DataMember(Name = "unitsFactor", IsRequired = true, EmitDefaultValue = true)]
        public decimal UnitsFactor { get; set; }

        /// <summary>
        /// The factor to scale cost by
        /// </summary>
        /// <value>The factor to scale cost by</value>
        [DataMember(Name = "costFactor", IsRequired = true, EmitDefaultValue = true)]
        public decimal CostFactor { get; set; }

        /// <summary>
        /// LUSID&#39;s internal unique instrument identifier, resolved from the instrument identifiers
        /// </summary>
        /// <value>LUSID&#39;s internal unique instrument identifier, resolved from the instrument identifiers</value>
        [DataMember(Name = "lusidInstrumentId", EmitDefaultValue = true)]
        public string LusidInstrumentId { get; private set; }

        /// <summary>
        /// Returns false as LusidInstrumentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLusidInstrumentId()
        {
            return false;
        }
        /// <summary>
        /// The scope in which the instrument lies.
        /// </summary>
        /// <value>The scope in which the instrument lies.</value>
        [DataMember(Name = "instrumentScope", EmitDefaultValue = true)]
        public string InstrumentScope { get; private set; }

        /// <summary>
        /// Returns false as InstrumentScope should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInstrumentScope()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Rounding
        /// </summary>
        [DataMember(Name = "rounding", EmitDefaultValue = false)]
        public RoundingConfiguration Rounding { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OutputTransition {\n");
            sb.Append("  InstrumentIdentifiers: ").Append(InstrumentIdentifiers).Append("\n");
            sb.Append("  UnitsFactor: ").Append(UnitsFactor).Append("\n");
            sb.Append("  CostFactor: ").Append(CostFactor).Append("\n");
            sb.Append("  LusidInstrumentId: ").Append(LusidInstrumentId).Append("\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  Rounding: ").Append(Rounding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutputTransition);
        }

        /// <summary>
        /// Returns true if OutputTransition instances are equal
        /// </summary>
        /// <param name="input">Instance of OutputTransition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutputTransition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstrumentIdentifiers == input.InstrumentIdentifiers ||
                    this.InstrumentIdentifiers != null &&
                    input.InstrumentIdentifiers != null &&
                    this.InstrumentIdentifiers.SequenceEqual(input.InstrumentIdentifiers)
                ) && 
                (
                    this.UnitsFactor == input.UnitsFactor ||
                    this.UnitsFactor.Equals(input.UnitsFactor)
                ) && 
                (
                    this.CostFactor == input.CostFactor ||
                    this.CostFactor.Equals(input.CostFactor)
                ) && 
                (
                    this.LusidInstrumentId == input.LusidInstrumentId ||
                    (this.LusidInstrumentId != null &&
                    this.LusidInstrumentId.Equals(input.LusidInstrumentId))
                ) && 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.Rounding == input.Rounding ||
                    (this.Rounding != null &&
                    this.Rounding.Equals(input.Rounding))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentIdentifiers != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentIdentifiers.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UnitsFactor.GetHashCode();
                hashCode = (hashCode * 59) + this.CostFactor.GetHashCode();
                if (this.LusidInstrumentId != null)
                {
                    hashCode = (hashCode * 59) + this.LusidInstrumentId.GetHashCode();
                }
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.Rounding != null)
                {
                    hashCode = (hashCode * 59) + this.Rounding.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
