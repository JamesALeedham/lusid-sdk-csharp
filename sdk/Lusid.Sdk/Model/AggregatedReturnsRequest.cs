/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// The request used in the AggregatedReturns.
    /// </summary>
    [DataContract(Name = "AggregatedReturnsRequest")]
    public partial class AggregatedReturnsRequest : IEquatable<AggregatedReturnsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedReturnsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AggregatedReturnsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregatedReturnsRequest" /> class.
        /// </summary>
        /// <param name="metrics">A list of metrics to calculate in the AggregatedReturns. (required).</param>
        /// <param name="returnIds">The Scope and code of the returns..</param>
        /// <param name="recipeId">recipeId.</param>
        /// <param name="compositeMethod">The method used to calculate the Portfolio performance: Equal/Asset..</param>
        /// <param name="period">The type of the returns used to calculate the aggregation result: Daily/Monthly..</param>
        /// <param name="outputFrequency">The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly..</param>
        /// <param name="alternativeInceptionDate">Optional - either a date, or the key for a portfolio property containing a date. If provided, the given date will override the inception date for this request..</param>
        /// <param name="holidayCalendars">The holiday calendar(s) that should be used in determining the date schedule. Holiday calendar(s) are supplied by their codes, for example, &#39;CoppClark&#39;. Note that when the calendars are not available (e.g. when the user has insufficient permissions), a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored..</param>
        /// <param name="currency">Optional - either a string or a property. If provided, the results will be converted to the specified currency.</param>
        /// <param name="runMode">The RunMode the aggregation will calculate metrics for. Defaults to ReturnData..</param>
        public AggregatedReturnsRequest(List<PerformanceReturnsMetric> metrics = default(List<PerformanceReturnsMetric>), List<ResourceId> returnIds = default(List<ResourceId>), ResourceId recipeId = default(ResourceId), string compositeMethod = default(string), string period = default(string), string outputFrequency = default(string), string alternativeInceptionDate = default(string), List<string> holidayCalendars = default(List<string>), string currency = default(string), string runMode = default(string))
        {
            // to ensure "metrics" is required (not null)
            if (metrics == null)
            {
                throw new ArgumentNullException("metrics is a required property for AggregatedReturnsRequest and cannot be null");
            }
            this.Metrics = metrics;
            this.ReturnIds = returnIds;
            this.RecipeId = recipeId;
            this.CompositeMethod = compositeMethod;
            this.Period = period;
            this.OutputFrequency = outputFrequency;
            this.AlternativeInceptionDate = alternativeInceptionDate;
            this.HolidayCalendars = holidayCalendars;
            this.Currency = currency;
            this.RunMode = runMode;
        }

        /// <summary>
        /// A list of metrics to calculate in the AggregatedReturns.
        /// </summary>
        /// <value>A list of metrics to calculate in the AggregatedReturns.</value>
        [DataMember(Name = "metrics", IsRequired = true, EmitDefaultValue = true)]
        public List<PerformanceReturnsMetric> Metrics { get; set; }

        /// <summary>
        /// The Scope and code of the returns.
        /// </summary>
        /// <value>The Scope and code of the returns.</value>
        [DataMember(Name = "returnIds", EmitDefaultValue = true)]
        public List<ResourceId> ReturnIds { get; set; }

        /// <summary>
        /// Gets or Sets RecipeId
        /// </summary>
        [DataMember(Name = "recipeId", EmitDefaultValue = false)]
        public ResourceId RecipeId { get; set; }

        /// <summary>
        /// The method used to calculate the Portfolio performance: Equal/Asset.
        /// </summary>
        /// <value>The method used to calculate the Portfolio performance: Equal/Asset.</value>
        [DataMember(Name = "compositeMethod", EmitDefaultValue = true)]
        public string CompositeMethod { get; set; }

        /// <summary>
        /// The type of the returns used to calculate the aggregation result: Daily/Monthly.
        /// </summary>
        /// <value>The type of the returns used to calculate the aggregation result: Daily/Monthly.</value>
        [DataMember(Name = "period", EmitDefaultValue = true)]
        public string Period { get; set; }

        /// <summary>
        /// The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly.
        /// </summary>
        /// <value>The type of calculated output: Daily/Weekly/Monthly/Quarterly/Half-Yearly/Yearly.</value>
        [DataMember(Name = "outputFrequency", EmitDefaultValue = true)]
        public string OutputFrequency { get; set; }

        /// <summary>
        /// Optional - either a date, or the key for a portfolio property containing a date. If provided, the given date will override the inception date for this request.
        /// </summary>
        /// <value>Optional - either a date, or the key for a portfolio property containing a date. If provided, the given date will override the inception date for this request.</value>
        [DataMember(Name = "alternativeInceptionDate", EmitDefaultValue = true)]
        public string AlternativeInceptionDate { get; set; }

        /// <summary>
        /// The holiday calendar(s) that should be used in determining the date schedule. Holiday calendar(s) are supplied by their codes, for example, &#39;CoppClark&#39;. Note that when the calendars are not available (e.g. when the user has insufficient permissions), a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.
        /// </summary>
        /// <value>The holiday calendar(s) that should be used in determining the date schedule. Holiday calendar(s) are supplied by their codes, for example, &#39;CoppClark&#39;. Note that when the calendars are not available (e.g. when the user has insufficient permissions), a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.</value>
        [DataMember(Name = "holidayCalendars", EmitDefaultValue = true)]
        public List<string> HolidayCalendars { get; set; }

        /// <summary>
        /// Optional - either a string or a property. If provided, the results will be converted to the specified currency
        /// </summary>
        /// <value>Optional - either a string or a property. If provided, the results will be converted to the specified currency</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The RunMode the aggregation will calculate metrics for. Defaults to ReturnData.
        /// </summary>
        /// <value>The RunMode the aggregation will calculate metrics for. Defaults to ReturnData.</value>
        [DataMember(Name = "runMode", EmitDefaultValue = true)]
        public string RunMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregatedReturnsRequest {\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  ReturnIds: ").Append(ReturnIds).Append("\n");
            sb.Append("  RecipeId: ").Append(RecipeId).Append("\n");
            sb.Append("  CompositeMethod: ").Append(CompositeMethod).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  OutputFrequency: ").Append(OutputFrequency).Append("\n");
            sb.Append("  AlternativeInceptionDate: ").Append(AlternativeInceptionDate).Append("\n");
            sb.Append("  HolidayCalendars: ").Append(HolidayCalendars).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RunMode: ").Append(RunMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregatedReturnsRequest);
        }

        /// <summary>
        /// Returns true if AggregatedReturnsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregatedReturnsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregatedReturnsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Metrics == input.Metrics ||
                    this.Metrics != null &&
                    input.Metrics != null &&
                    this.Metrics.SequenceEqual(input.Metrics)
                ) && 
                (
                    this.ReturnIds == input.ReturnIds ||
                    this.ReturnIds != null &&
                    input.ReturnIds != null &&
                    this.ReturnIds.SequenceEqual(input.ReturnIds)
                ) && 
                (
                    this.RecipeId == input.RecipeId ||
                    (this.RecipeId != null &&
                    this.RecipeId.Equals(input.RecipeId))
                ) && 
                (
                    this.CompositeMethod == input.CompositeMethod ||
                    (this.CompositeMethod != null &&
                    this.CompositeMethod.Equals(input.CompositeMethod))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.OutputFrequency == input.OutputFrequency ||
                    (this.OutputFrequency != null &&
                    this.OutputFrequency.Equals(input.OutputFrequency))
                ) && 
                (
                    this.AlternativeInceptionDate == input.AlternativeInceptionDate ||
                    (this.AlternativeInceptionDate != null &&
                    this.AlternativeInceptionDate.Equals(input.AlternativeInceptionDate))
                ) && 
                (
                    this.HolidayCalendars == input.HolidayCalendars ||
                    this.HolidayCalendars != null &&
                    input.HolidayCalendars != null &&
                    this.HolidayCalendars.SequenceEqual(input.HolidayCalendars)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.RunMode == input.RunMode ||
                    (this.RunMode != null &&
                    this.RunMode.Equals(input.RunMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Metrics != null)
                {
                    hashCode = (hashCode * 59) + this.Metrics.GetHashCode();
                }
                if (this.ReturnIds != null)
                {
                    hashCode = (hashCode * 59) + this.ReturnIds.GetHashCode();
                }
                if (this.RecipeId != null)
                {
                    hashCode = (hashCode * 59) + this.RecipeId.GetHashCode();
                }
                if (this.CompositeMethod != null)
                {
                    hashCode = (hashCode * 59) + this.CompositeMethod.GetHashCode();
                }
                if (this.Period != null)
                {
                    hashCode = (hashCode * 59) + this.Period.GetHashCode();
                }
                if (this.OutputFrequency != null)
                {
                    hashCode = (hashCode * 59) + this.OutputFrequency.GetHashCode();
                }
                if (this.AlternativeInceptionDate != null)
                {
                    hashCode = (hashCode * 59) + this.AlternativeInceptionDate.GetHashCode();
                }
                if (this.HolidayCalendars != null)
                {
                    hashCode = (hashCode * 59) + this.HolidayCalendars.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.RunMode != null)
                {
                    hashCode = (hashCode * 59) + this.RunMode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Currency (string) maxLength
            if (this.Currency != null && this.Currency.Length > 6000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be less than 6000.", new [] { "Currency" });
            }

            // Currency (string) minLength
            if (this.Currency != null && this.Currency.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be greater than 0.", new [] { "Currency" });
            }

            yield break;
        }
    }
}
