/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Specifies the parameter to be use when performing a Transaction Reconciliation.
    /// </summary>
    [DataContract(Name = "TransactionReconciliationRequest")]
    public partial class TransactionReconciliationRequest : IEquatable<TransactionReconciliationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionReconciliationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionReconciliationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionReconciliationRequest" /> class.
        /// </summary>
        /// <param name="leftPortfolioId">leftPortfolioId (required).</param>
        /// <param name="rightPortfolioId">rightPortfolioId (required).</param>
        /// <param name="mappingId">mappingId.</param>
        /// <param name="fromTransactionDate">fromTransactionDate (required).</param>
        /// <param name="toTransactionDate">toTransactionDate (required).</param>
        /// <param name="asAt">asAt.</param>
        /// <param name="propertyKeys">propertyKeys.</param>
        public TransactionReconciliationRequest(ResourceId leftPortfolioId = default(ResourceId), ResourceId rightPortfolioId = default(ResourceId), ResourceId mappingId = default(ResourceId), DateTimeOffset fromTransactionDate = default(DateTimeOffset), DateTimeOffset toTransactionDate = default(DateTimeOffset), DateTimeOffset? asAt = default(DateTimeOffset?), List<string> propertyKeys = default(List<string>))
        {
            // to ensure "leftPortfolioId" is required (not null)
            if (leftPortfolioId == null)
            {
                throw new ArgumentNullException("leftPortfolioId is a required property for TransactionReconciliationRequest and cannot be null");
            }
            this.LeftPortfolioId = leftPortfolioId;
            // to ensure "rightPortfolioId" is required (not null)
            if (rightPortfolioId == null)
            {
                throw new ArgumentNullException("rightPortfolioId is a required property for TransactionReconciliationRequest and cannot be null");
            }
            this.RightPortfolioId = rightPortfolioId;
            this.FromTransactionDate = fromTransactionDate;
            this.ToTransactionDate = toTransactionDate;
            this.MappingId = mappingId;
            this.AsAt = asAt;
            this.PropertyKeys = propertyKeys;
        }

        /// <summary>
        /// Gets or Sets LeftPortfolioId
        /// </summary>
        [DataMember(Name = "leftPortfolioId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId LeftPortfolioId { get; set; }

        /// <summary>
        /// Gets or Sets RightPortfolioId
        /// </summary>
        [DataMember(Name = "rightPortfolioId", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId RightPortfolioId { get; set; }

        /// <summary>
        /// Gets or Sets MappingId
        /// </summary>
        [DataMember(Name = "mappingId", EmitDefaultValue = false)]
        public ResourceId MappingId { get; set; }

        /// <summary>
        /// Gets or Sets FromTransactionDate
        /// </summary>
        [DataMember(Name = "fromTransactionDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset FromTransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets ToTransactionDate
        /// </summary>
        [DataMember(Name = "toTransactionDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset ToTransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets AsAt
        /// </summary>
        [DataMember(Name = "asAt", EmitDefaultValue = true)]
        public DateTimeOffset? AsAt { get; set; }

        /// <summary>
        /// Gets or Sets PropertyKeys
        /// </summary>
        [DataMember(Name = "propertyKeys", EmitDefaultValue = true)]
        public List<string> PropertyKeys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionReconciliationRequest {\n");
            sb.Append("  LeftPortfolioId: ").Append(LeftPortfolioId).Append("\n");
            sb.Append("  RightPortfolioId: ").Append(RightPortfolioId).Append("\n");
            sb.Append("  MappingId: ").Append(MappingId).Append("\n");
            sb.Append("  FromTransactionDate: ").Append(FromTransactionDate).Append("\n");
            sb.Append("  ToTransactionDate: ").Append(ToTransactionDate).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("  PropertyKeys: ").Append(PropertyKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionReconciliationRequest);
        }

        /// <summary>
        /// Returns true if TransactionReconciliationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionReconciliationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionReconciliationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LeftPortfolioId == input.LeftPortfolioId ||
                    (this.LeftPortfolioId != null &&
                    this.LeftPortfolioId.Equals(input.LeftPortfolioId))
                ) && 
                (
                    this.RightPortfolioId == input.RightPortfolioId ||
                    (this.RightPortfolioId != null &&
                    this.RightPortfolioId.Equals(input.RightPortfolioId))
                ) && 
                (
                    this.MappingId == input.MappingId ||
                    (this.MappingId != null &&
                    this.MappingId.Equals(input.MappingId))
                ) && 
                (
                    this.FromTransactionDate == input.FromTransactionDate ||
                    (this.FromTransactionDate != null &&
                    this.FromTransactionDate.Equals(input.FromTransactionDate))
                ) && 
                (
                    this.ToTransactionDate == input.ToTransactionDate ||
                    (this.ToTransactionDate != null &&
                    this.ToTransactionDate.Equals(input.ToTransactionDate))
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                ) && 
                (
                    this.PropertyKeys == input.PropertyKeys ||
                    this.PropertyKeys != null &&
                    input.PropertyKeys != null &&
                    this.PropertyKeys.SequenceEqual(input.PropertyKeys)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeftPortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.LeftPortfolioId.GetHashCode();
                }
                if (this.RightPortfolioId != null)
                {
                    hashCode = (hashCode * 59) + this.RightPortfolioId.GetHashCode();
                }
                if (this.MappingId != null)
                {
                    hashCode = (hashCode * 59) + this.MappingId.GetHashCode();
                }
                if (this.FromTransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.FromTransactionDate.GetHashCode();
                }
                if (this.ToTransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.ToTransactionDate.GetHashCode();
                }
                if (this.AsAt != null)
                {
                    hashCode = (hashCode * 59) + this.AsAt.GetHashCode();
                }
                if (this.PropertyKeys != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyKeys.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
