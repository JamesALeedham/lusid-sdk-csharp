/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CashLadderRecord
    /// </summary>
    [DataContract(Name = "CashLadderRecord")]
    public partial class CashLadderRecord : IEquatable<CashLadderRecord>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CashLadderRecord" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CashLadderRecord() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashLadderRecord" /> class.
        /// </summary>
        /// <param name="effectiveDate">effectiveDate.</param>
        /// <param name="open">open (required).</param>
        /// <param name="activities">activities (required).</param>
        /// <param name="close">close (required).</param>
        public CashLadderRecord(DateTimeOffset effectiveDate = default(DateTimeOffset), decimal open = default(decimal), Dictionary<string, decimal> activities = default(Dictionary<string, decimal>), decimal close = default(decimal))
        {
            this.Open = open;
            // to ensure "activities" is required (not null)
            if (activities == null)
            {
                throw new ArgumentNullException("activities is a required property for CashLadderRecord and cannot be null");
            }
            this.Activities = activities;
            this.Close = close;
            this.EffectiveDate = effectiveDate;
        }

        /// <summary>
        /// Gets or Sets EffectiveDate
        /// </summary>
        [DataMember(Name = "effectiveDate", EmitDefaultValue = false)]
        public DateTimeOffset EffectiveDate { get; set; }

        /// <summary>
        /// Gets or Sets Open
        /// </summary>
        [DataMember(Name = "open", IsRequired = true, EmitDefaultValue = true)]
        public decimal Open { get; set; }

        /// <summary>
        /// Gets or Sets Activities
        /// </summary>
        [DataMember(Name = "activities", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, decimal> Activities { get; set; }

        /// <summary>
        /// Gets or Sets Close
        /// </summary>
        [DataMember(Name = "close", IsRequired = true, EmitDefaultValue = true)]
        public decimal Close { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CashLadderRecord {\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  Activities: ").Append(Activities).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashLadderRecord);
        }

        /// <summary>
        /// Returns true if CashLadderRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of CashLadderRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashLadderRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.Open == input.Open ||
                    this.Open.Equals(input.Open)
                ) && 
                (
                    this.Activities == input.Activities ||
                    this.Activities != null &&
                    input.Activities != null &&
                    this.Activities.SequenceEqual(input.Activities)
                ) && 
                (
                    this.Close == input.Close ||
                    this.Close.Equals(input.Close)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveDate != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Open.GetHashCode();
                if (this.Activities != null)
                {
                    hashCode = (hashCode * 59) + this.Activities.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Close.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
