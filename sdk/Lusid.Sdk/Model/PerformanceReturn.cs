/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A list of Returns.
    /// </summary>
    [DataContract(Name = "PerformanceReturn")]
    public partial class PerformanceReturn : IEquatable<PerformanceReturn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceReturn" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PerformanceReturn() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceReturn" /> class.
        /// </summary>
        /// <param name="effectiveAt">The effectiveAt for the return. (required).</param>
        /// <param name="rateOfReturn">The return number. (required).</param>
        /// <param name="openingMarketValue">The opening market value..</param>
        /// <param name="closingMarketValue">The closing market value..</param>
        /// <param name="period">Upsert the returns on a Daily or Monthly period. Defaults to Daily..</param>
        public PerformanceReturn(DateTimeOffset effectiveAt = default(DateTimeOffset), decimal rateOfReturn = default(decimal), decimal? openingMarketValue = default(decimal?), decimal? closingMarketValue = default(decimal?), string period = default(string))
        {
            this.EffectiveAt = effectiveAt;
            this.RateOfReturn = rateOfReturn;
            this.OpeningMarketValue = openingMarketValue;
            this.ClosingMarketValue = closingMarketValue;
            this.Period = period;
        }

        /// <summary>
        /// The effectiveAt for the return.
        /// </summary>
        /// <value>The effectiveAt for the return.</value>
        [DataMember(Name = "effectiveAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EffectiveAt { get; set; }

        /// <summary>
        /// The return number.
        /// </summary>
        /// <value>The return number.</value>
        [DataMember(Name = "rateOfReturn", IsRequired = true, EmitDefaultValue = true)]
        public decimal RateOfReturn { get; set; }

        /// <summary>
        /// The opening market value.
        /// </summary>
        /// <value>The opening market value.</value>
        [DataMember(Name = "openingMarketValue", EmitDefaultValue = true)]
        public decimal? OpeningMarketValue { get; set; }

        /// <summary>
        /// The closing market value.
        /// </summary>
        /// <value>The closing market value.</value>
        [DataMember(Name = "closingMarketValue", EmitDefaultValue = true)]
        public decimal? ClosingMarketValue { get; set; }

        /// <summary>
        /// Upsert the returns on a Daily or Monthly period. Defaults to Daily.
        /// </summary>
        /// <value>Upsert the returns on a Daily or Monthly period. Defaults to Daily.</value>
        [DataMember(Name = "period", EmitDefaultValue = true)]
        public string Period { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PerformanceReturn {\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  RateOfReturn: ").Append(RateOfReturn).Append("\n");
            sb.Append("  OpeningMarketValue: ").Append(OpeningMarketValue).Append("\n");
            sb.Append("  ClosingMarketValue: ").Append(ClosingMarketValue).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerformanceReturn);
        }

        /// <summary>
        /// Returns true if PerformanceReturn instances are equal
        /// </summary>
        /// <param name="input">Instance of PerformanceReturn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceReturn input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.RateOfReturn == input.RateOfReturn ||
                    this.RateOfReturn.Equals(input.RateOfReturn)
                ) && 
                (
                    this.OpeningMarketValue == input.OpeningMarketValue ||
                    (this.OpeningMarketValue != null &&
                    this.OpeningMarketValue.Equals(input.OpeningMarketValue))
                ) && 
                (
                    this.ClosingMarketValue == input.ClosingMarketValue ||
                    (this.ClosingMarketValue != null &&
                    this.ClosingMarketValue.Equals(input.ClosingMarketValue))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveAt != null)
                {
                    hashCode = (hashCode * 59) + this.EffectiveAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RateOfReturn.GetHashCode();
                if (this.OpeningMarketValue != null)
                {
                    hashCode = (hashCode * 59) + this.OpeningMarketValue.GetHashCode();
                }
                if (this.ClosingMarketValue != null)
                {
                    hashCode = (hashCode * 59) + this.ClosingMarketValue.GetHashCode();
                }
                if (this.Period != null)
                {
                    hashCode = (hashCode * 59) + this.Period.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
