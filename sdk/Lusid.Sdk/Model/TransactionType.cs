/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// TransactionType
    /// </summary>
    [DataContract(Name = "TransactionType")]
    public partial class TransactionType : IEquatable<TransactionType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionType" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionType() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionType" /> class.
        /// </summary>
        /// <param name="aliases">List of transaction types that map to this specific transaction configuration (required).</param>
        /// <param name="movements">Movement data for the transaction type (required).</param>
        /// <param name="properties">Properties attached to the transaction type.</param>
        /// <param name="links">links.</param>
        public TransactionType(List<TransactionTypeAlias> aliases = default(List<TransactionTypeAlias>), List<TransactionTypeMovement> movements = default(List<TransactionTypeMovement>), Dictionary<string, PerpetualProperty> properties = default(Dictionary<string, PerpetualProperty>), List<Link> links = default(List<Link>))
        {
            // to ensure "aliases" is required (not null)
            if (aliases == null)
            {
                throw new ArgumentNullException("aliases is a required property for TransactionType and cannot be null");
            }
            this.Aliases = aliases;
            // to ensure "movements" is required (not null)
            if (movements == null)
            {
                throw new ArgumentNullException("movements is a required property for TransactionType and cannot be null");
            }
            this.Movements = movements;
            this.Properties = properties;
            this.Links = links;
        }

        /// <summary>
        /// List of transaction types that map to this specific transaction configuration
        /// </summary>
        /// <value>List of transaction types that map to this specific transaction configuration</value>
        [DataMember(Name = "aliases", IsRequired = true, EmitDefaultValue = true)]
        public List<TransactionTypeAlias> Aliases { get; set; }

        /// <summary>
        /// Movement data for the transaction type
        /// </summary>
        /// <value>Movement data for the transaction type</value>
        [DataMember(Name = "movements", IsRequired = true, EmitDefaultValue = true)]
        public List<TransactionTypeMovement> Movements { get; set; }

        /// <summary>
        /// Properties attached to the transaction type
        /// </summary>
        /// <value>Properties attached to the transaction type</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionType {\n");
            sb.Append("  Aliases: ").Append(Aliases).Append("\n");
            sb.Append("  Movements: ").Append(Movements).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionType);
        }

        /// <summary>
        /// Returns true if TransactionType instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Aliases == input.Aliases ||
                    this.Aliases != null &&
                    input.Aliases != null &&
                    this.Aliases.SequenceEqual(input.Aliases)
                ) && 
                (
                    this.Movements == input.Movements ||
                    this.Movements != null &&
                    input.Movements != null &&
                    this.Movements.SequenceEqual(input.Movements)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aliases != null)
                {
                    hashCode = (hashCode * 59) + this.Aliases.GetHashCode();
                }
                if (this.Movements != null)
                {
                    hashCode = (hashCode * 59) + this.Movements.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
