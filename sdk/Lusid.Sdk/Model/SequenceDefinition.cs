/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// SequenceDefinition
    /// </summary>
    [DataContract(Name = "SequenceDefinition")]
    public partial class SequenceDefinition : IEquatable<SequenceDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SequenceDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SequenceDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SequenceDefinition" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="increment">The Resource Id of the sequence definition (required).</param>
        /// <param name="minValue">The minimum value of the sequence (required).</param>
        /// <param name="maxValue">The maximum value of the sequence (required).</param>
        /// <param name="start">The start value of the sequence (required).</param>
        /// <param name="value">The last used value of the sequence.</param>
        /// <param name="cycle">Indicates if the sequence would start from minimun value once it reaches maximum value. If set to false, a failure would return if the sequence reaches maximum value. (required).</param>
        /// <param name="pattern">The pattern to be used to generate next values in the sequence..</param>
        /// <param name="links">links.</param>
        public SequenceDefinition(ResourceId id = default(ResourceId), long increment = default(long), long minValue = default(long), long maxValue = default(long), long start = default(long), long? value = default(long?), bool cycle = default(bool), string pattern = default(string), List<Link> links = default(List<Link>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for SequenceDefinition and cannot be null");
            }
            this.Id = id;
            this.Increment = increment;
            this.MinValue = minValue;
            this.MaxValue = maxValue;
            this.Start = start;
            this.Cycle = cycle;
            this.Value = value;
            this.Pattern = pattern;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public ResourceId Id { get; set; }

        /// <summary>
        /// The Resource Id of the sequence definition
        /// </summary>
        /// <value>The Resource Id of the sequence definition</value>
        [DataMember(Name = "increment", IsRequired = true, EmitDefaultValue = true)]
        public long Increment { get; set; }

        /// <summary>
        /// The minimum value of the sequence
        /// </summary>
        /// <value>The minimum value of the sequence</value>
        [DataMember(Name = "minValue", IsRequired = true, EmitDefaultValue = true)]
        public long MinValue { get; set; }

        /// <summary>
        /// The maximum value of the sequence
        /// </summary>
        /// <value>The maximum value of the sequence</value>
        [DataMember(Name = "maxValue", IsRequired = true, EmitDefaultValue = true)]
        public long MaxValue { get; set; }

        /// <summary>
        /// The start value of the sequence
        /// </summary>
        /// <value>The start value of the sequence</value>
        [DataMember(Name = "start", IsRequired = true, EmitDefaultValue = true)]
        public long Start { get; set; }

        /// <summary>
        /// The last used value of the sequence
        /// </summary>
        /// <value>The last used value of the sequence</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public long? Value { get; set; }

        /// <summary>
        /// Indicates if the sequence would start from minimun value once it reaches maximum value. If set to false, a failure would return if the sequence reaches maximum value.
        /// </summary>
        /// <value>Indicates if the sequence would start from minimun value once it reaches maximum value. If set to false, a failure would return if the sequence reaches maximum value.</value>
        [DataMember(Name = "cycle", IsRequired = true, EmitDefaultValue = true)]
        public bool Cycle { get; set; }

        /// <summary>
        /// The pattern to be used to generate next values in the sequence.
        /// </summary>
        /// <value>The pattern to be used to generate next values in the sequence.</value>
        [DataMember(Name = "pattern", EmitDefaultValue = true)]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SequenceDefinition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Increment: ").Append(Increment).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Cycle: ").Append(Cycle).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SequenceDefinition);
        }

        /// <summary>
        /// Returns true if SequenceDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of SequenceDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SequenceDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Increment == input.Increment ||
                    this.Increment.Equals(input.Increment)
                ) && 
                (
                    this.MinValue == input.MinValue ||
                    this.MinValue.Equals(input.MinValue)
                ) && 
                (
                    this.MaxValue == input.MaxValue ||
                    this.MaxValue.Equals(input.MaxValue)
                ) && 
                (
                    this.Start == input.Start ||
                    this.Start.Equals(input.Start)
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Cycle == input.Cycle ||
                    this.Cycle.Equals(input.Cycle)
                ) && 
                (
                    this.Pattern == input.Pattern ||
                    (this.Pattern != null &&
                    this.Pattern.Equals(input.Pattern))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Increment.GetHashCode();
                hashCode = (hashCode * 59) + this.MinValue.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxValue.GetHashCode();
                hashCode = (hashCode * 59) + this.Start.GetHashCode();
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Cycle.GetHashCode();
                if (this.Pattern != null)
                {
                    hashCode = (hashCode * 59) + this.Pattern.GetHashCode();
                }
                if (this.Links != null)
                {
                    hashCode = (hashCode * 59) + this.Links.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
