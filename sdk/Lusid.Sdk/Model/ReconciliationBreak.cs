/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A reconciliation break
    /// </summary>
    [DataContract(Name = "ReconciliationBreak")]
    public partial class ReconciliationBreak : IEquatable<ReconciliationBreak>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationBreak" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReconciliationBreak() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationBreak" /> class.
        /// </summary>
        /// <param name="instrumentScope">The scope in which the instrument lies..</param>
        /// <param name="instrumentUid">Unique instrument identifier (required).</param>
        /// <param name="subHoldingKeys">Any other properties that comprise the Sub-Holding Key (required).</param>
        /// <param name="leftUnits">Units from the left hand side (required).</param>
        /// <param name="rightUnits">Units from the right hand side (required).</param>
        /// <param name="differenceUnits">Difference in units (required).</param>
        /// <param name="leftCost">leftCost (required).</param>
        /// <param name="rightCost">rightCost (required).</param>
        /// <param name="differenceCost">differenceCost (required).</param>
        /// <param name="instrumentProperties">Additional features relating to the instrument (required).</param>
        public ReconciliationBreak(string instrumentScope = default(string), string instrumentUid = default(string), Dictionary<string, PerpetualProperty> subHoldingKeys = default(Dictionary<string, PerpetualProperty>), decimal leftUnits = default(decimal), decimal rightUnits = default(decimal), decimal differenceUnits = default(decimal), CurrencyAndAmount leftCost = default(CurrencyAndAmount), CurrencyAndAmount rightCost = default(CurrencyAndAmount), CurrencyAndAmount differenceCost = default(CurrencyAndAmount), List<Property> instrumentProperties = default(List<Property>))
        {
            // to ensure "instrumentUid" is required (not null)
            if (instrumentUid == null)
            {
                throw new ArgumentNullException("instrumentUid is a required property for ReconciliationBreak and cannot be null");
            }
            this.InstrumentUid = instrumentUid;
            // to ensure "subHoldingKeys" is required (not null)
            if (subHoldingKeys == null)
            {
                throw new ArgumentNullException("subHoldingKeys is a required property for ReconciliationBreak and cannot be null");
            }
            this.SubHoldingKeys = subHoldingKeys;
            this.LeftUnits = leftUnits;
            this.RightUnits = rightUnits;
            this.DifferenceUnits = differenceUnits;
            // to ensure "leftCost" is required (not null)
            if (leftCost == null)
            {
                throw new ArgumentNullException("leftCost is a required property for ReconciliationBreak and cannot be null");
            }
            this.LeftCost = leftCost;
            // to ensure "rightCost" is required (not null)
            if (rightCost == null)
            {
                throw new ArgumentNullException("rightCost is a required property for ReconciliationBreak and cannot be null");
            }
            this.RightCost = rightCost;
            // to ensure "differenceCost" is required (not null)
            if (differenceCost == null)
            {
                throw new ArgumentNullException("differenceCost is a required property for ReconciliationBreak and cannot be null");
            }
            this.DifferenceCost = differenceCost;
            // to ensure "instrumentProperties" is required (not null)
            if (instrumentProperties == null)
            {
                throw new ArgumentNullException("instrumentProperties is a required property for ReconciliationBreak and cannot be null");
            }
            this.InstrumentProperties = instrumentProperties;
            this.InstrumentScope = instrumentScope;
        }

        /// <summary>
        /// The scope in which the instrument lies.
        /// </summary>
        /// <value>The scope in which the instrument lies.</value>
        [DataMember(Name = "instrumentScope", EmitDefaultValue = true)]
        public string InstrumentScope { get; set; }

        /// <summary>
        /// Unique instrument identifier
        /// </summary>
        /// <value>Unique instrument identifier</value>
        [DataMember(Name = "instrumentUid", IsRequired = true, EmitDefaultValue = true)]
        public string InstrumentUid { get; set; }

        /// <summary>
        /// Any other properties that comprise the Sub-Holding Key
        /// </summary>
        /// <value>Any other properties that comprise the Sub-Holding Key</value>
        [DataMember(Name = "subHoldingKeys", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, PerpetualProperty> SubHoldingKeys { get; set; }

        /// <summary>
        /// Units from the left hand side
        /// </summary>
        /// <value>Units from the left hand side</value>
        [DataMember(Name = "leftUnits", IsRequired = true, EmitDefaultValue = true)]
        public decimal LeftUnits { get; set; }

        /// <summary>
        /// Units from the right hand side
        /// </summary>
        /// <value>Units from the right hand side</value>
        [DataMember(Name = "rightUnits", IsRequired = true, EmitDefaultValue = true)]
        public decimal RightUnits { get; set; }

        /// <summary>
        /// Difference in units
        /// </summary>
        /// <value>Difference in units</value>
        [DataMember(Name = "differenceUnits", IsRequired = true, EmitDefaultValue = true)]
        public decimal DifferenceUnits { get; set; }

        /// <summary>
        /// Gets or Sets LeftCost
        /// </summary>
        [DataMember(Name = "leftCost", IsRequired = true, EmitDefaultValue = true)]
        public CurrencyAndAmount LeftCost { get; set; }

        /// <summary>
        /// Gets or Sets RightCost
        /// </summary>
        [DataMember(Name = "rightCost", IsRequired = true, EmitDefaultValue = true)]
        public CurrencyAndAmount RightCost { get; set; }

        /// <summary>
        /// Gets or Sets DifferenceCost
        /// </summary>
        [DataMember(Name = "differenceCost", IsRequired = true, EmitDefaultValue = true)]
        public CurrencyAndAmount DifferenceCost { get; set; }

        /// <summary>
        /// Additional features relating to the instrument
        /// </summary>
        /// <value>Additional features relating to the instrument</value>
        [DataMember(Name = "instrumentProperties", IsRequired = true, EmitDefaultValue = true)]
        public List<Property> InstrumentProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReconciliationBreak {\n");
            sb.Append("  InstrumentScope: ").Append(InstrumentScope).Append("\n");
            sb.Append("  InstrumentUid: ").Append(InstrumentUid).Append("\n");
            sb.Append("  SubHoldingKeys: ").Append(SubHoldingKeys).Append("\n");
            sb.Append("  LeftUnits: ").Append(LeftUnits).Append("\n");
            sb.Append("  RightUnits: ").Append(RightUnits).Append("\n");
            sb.Append("  DifferenceUnits: ").Append(DifferenceUnits).Append("\n");
            sb.Append("  LeftCost: ").Append(LeftCost).Append("\n");
            sb.Append("  RightCost: ").Append(RightCost).Append("\n");
            sb.Append("  DifferenceCost: ").Append(DifferenceCost).Append("\n");
            sb.Append("  InstrumentProperties: ").Append(InstrumentProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReconciliationBreak);
        }

        /// <summary>
        /// Returns true if ReconciliationBreak instances are equal
        /// </summary>
        /// <param name="input">Instance of ReconciliationBreak to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReconciliationBreak input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstrumentScope == input.InstrumentScope ||
                    (this.InstrumentScope != null &&
                    this.InstrumentScope.Equals(input.InstrumentScope))
                ) && 
                (
                    this.InstrumentUid == input.InstrumentUid ||
                    (this.InstrumentUid != null &&
                    this.InstrumentUid.Equals(input.InstrumentUid))
                ) && 
                (
                    this.SubHoldingKeys == input.SubHoldingKeys ||
                    this.SubHoldingKeys != null &&
                    input.SubHoldingKeys != null &&
                    this.SubHoldingKeys.SequenceEqual(input.SubHoldingKeys)
                ) && 
                (
                    this.LeftUnits == input.LeftUnits ||
                    this.LeftUnits.Equals(input.LeftUnits)
                ) && 
                (
                    this.RightUnits == input.RightUnits ||
                    this.RightUnits.Equals(input.RightUnits)
                ) && 
                (
                    this.DifferenceUnits == input.DifferenceUnits ||
                    this.DifferenceUnits.Equals(input.DifferenceUnits)
                ) && 
                (
                    this.LeftCost == input.LeftCost ||
                    (this.LeftCost != null &&
                    this.LeftCost.Equals(input.LeftCost))
                ) && 
                (
                    this.RightCost == input.RightCost ||
                    (this.RightCost != null &&
                    this.RightCost.Equals(input.RightCost))
                ) && 
                (
                    this.DifferenceCost == input.DifferenceCost ||
                    (this.DifferenceCost != null &&
                    this.DifferenceCost.Equals(input.DifferenceCost))
                ) && 
                (
                    this.InstrumentProperties == input.InstrumentProperties ||
                    this.InstrumentProperties != null &&
                    input.InstrumentProperties != null &&
                    this.InstrumentProperties.SequenceEqual(input.InstrumentProperties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstrumentScope != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentScope.GetHashCode();
                }
                if (this.InstrumentUid != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentUid.GetHashCode();
                }
                if (this.SubHoldingKeys != null)
                {
                    hashCode = (hashCode * 59) + this.SubHoldingKeys.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LeftUnits.GetHashCode();
                hashCode = (hashCode * 59) + this.RightUnits.GetHashCode();
                hashCode = (hashCode * 59) + this.DifferenceUnits.GetHashCode();
                if (this.LeftCost != null)
                {
                    hashCode = (hashCode * 59) + this.LeftCost.GetHashCode();
                }
                if (this.RightCost != null)
                {
                    hashCode = (hashCode * 59) + this.RightCost.GetHashCode();
                }
                if (this.DifferenceCost != null)
                {
                    hashCode = (hashCode * 59) + this.DifferenceCost.GetHashCode();
                }
                if (this.InstrumentProperties != null)
                {
                    hashCode = (hashCode * 59) + this.InstrumentProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // InstrumentUid (string) minLength
            if (this.InstrumentUid != null && this.InstrumentUid.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstrumentUid, length must be greater than 1.", new [] { "InstrumentUid" });
            }

            yield break;
        }
    }
}
