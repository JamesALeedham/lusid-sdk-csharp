/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A &#39;transition&#39; within a corporate action, representing a set of output movements paired to a single input position
    /// </summary>
    [DataContract(Name = "CorporateActionTransitionRequest")]
    public partial class CorporateActionTransitionRequest : IEquatable<CorporateActionTransitionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CorporateActionTransitionRequest" /> class.
        /// </summary>
        /// <param name="inputTransition">inputTransition.</param>
        /// <param name="outputTransitions">outputTransitions.</param>
        public CorporateActionTransitionRequest(CorporateActionTransitionComponentRequest inputTransition = default(CorporateActionTransitionComponentRequest), List<CorporateActionTransitionComponentRequest> outputTransitions = default(List<CorporateActionTransitionComponentRequest>))
        {
            this.InputTransition = inputTransition;
            this.OutputTransitions = outputTransitions;
        }

        /// <summary>
        /// Gets or Sets InputTransition
        /// </summary>
        [DataMember(Name = "inputTransition", EmitDefaultValue = false)]
        public CorporateActionTransitionComponentRequest InputTransition { get; set; }

        /// <summary>
        /// Gets or Sets OutputTransitions
        /// </summary>
        [DataMember(Name = "outputTransitions", EmitDefaultValue = true)]
        public List<CorporateActionTransitionComponentRequest> OutputTransitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CorporateActionTransitionRequest {\n");
            sb.Append("  InputTransition: ").Append(InputTransition).Append("\n");
            sb.Append("  OutputTransitions: ").Append(OutputTransitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CorporateActionTransitionRequest);
        }

        /// <summary>
        /// Returns true if CorporateActionTransitionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CorporateActionTransitionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CorporateActionTransitionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InputTransition == input.InputTransition ||
                    (this.InputTransition != null &&
                    this.InputTransition.Equals(input.InputTransition))
                ) && 
                (
                    this.OutputTransitions == input.OutputTransitions ||
                    this.OutputTransitions != null &&
                    input.OutputTransitions != null &&
                    this.OutputTransitions.SequenceEqual(input.OutputTransitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InputTransition != null)
                {
                    hashCode = (hashCode * 59) + this.InputTransition.GetHashCode();
                }
                if (this.OutputTransitions != null)
                {
                    hashCode = (hashCode * 59) + this.OutputTransitions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
