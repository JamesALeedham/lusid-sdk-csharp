/* 
 * LUSID API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// TransactionPropertyMapping
    /// </summary>
    [DataContract]
    public partial class TransactionPropertyMapping :  IEquatable<TransactionPropertyMapping>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionPropertyMapping" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionPropertyMapping() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionPropertyMapping" /> class.
        /// </summary>
        /// <param name="propertyKey">The Side (required).</param>
        /// <param name="mapFrom">The Side.</param>
        /// <param name="setTo">The Side.</param>
        public TransactionPropertyMapping(string propertyKey = default(string), string mapFrom = default(string), Object setTo = default(Object))
        {
            // to ensure "propertyKey" is required (not null)
            if (propertyKey == null)
            {
                throw new InvalidDataException("propertyKey is a required property for TransactionPropertyMapping and cannot be null");
            }
            else
            {
                this.PropertyKey = propertyKey;
            }
            
            this.MapFrom = mapFrom;
            this.SetTo = setTo;
        }
        
        /// <summary>
        /// The Side
        /// </summary>
        /// <value>The Side</value>
        [DataMember(Name="propertyKey", EmitDefaultValue=false)]
        public string PropertyKey { get; set; }

        /// <summary>
        /// The Side
        /// </summary>
        /// <value>The Side</value>
        [DataMember(Name="mapFrom", EmitDefaultValue=false)]
        public string MapFrom { get; set; }

        /// <summary>
        /// The Side
        /// </summary>
        /// <value>The Side</value>
        [DataMember(Name="setTo", EmitDefaultValue=false)]
        public Object SetTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionPropertyMapping {\n");
            sb.Append("  PropertyKey: ").Append(PropertyKey).Append("\n");
            sb.Append("  MapFrom: ").Append(MapFrom).Append("\n");
            sb.Append("  SetTo: ").Append(SetTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionPropertyMapping);
        }

        /// <summary>
        /// Returns true if TransactionPropertyMapping instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionPropertyMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionPropertyMapping input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PropertyKey == input.PropertyKey ||
                    (this.PropertyKey != null &&
                    this.PropertyKey.Equals(input.PropertyKey))
                ) && 
                (
                    this.MapFrom == input.MapFrom ||
                    (this.MapFrom != null &&
                    this.MapFrom.Equals(input.MapFrom))
                ) && 
                (
                    this.SetTo == input.SetTo ||
                    (this.SetTo != null &&
                    this.SetTo.Equals(input.SetTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PropertyKey != null)
                    hashCode = hashCode * 59 + this.PropertyKey.GetHashCode();
                if (this.MapFrom != null)
                    hashCode = hashCode * 59 + this.MapFrom.GetHashCode();
                if (this.SetTo != null)
                    hashCode = hashCode * 59 + this.SetTo.GetHashCode();
                return hashCode;
            }
        }
    }

}
