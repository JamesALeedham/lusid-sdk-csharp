/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Specification for the transactions of a scheduled reconciliation
    /// </summary>
    [DataContract(Name = "ReconciliationTransactions")]
    public partial class ReconciliationTransactions : IEquatable<ReconciliationTransactions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationTransactions" /> class.
        /// </summary>
        /// <param name="transactionWindow">transactionWindow.</param>
        /// <param name="mappingId">mappingId.</param>
        public ReconciliationTransactions(DateRange transactionWindow = default(DateRange), ResourceId mappingId = default(ResourceId))
        {
            this.TransactionWindow = transactionWindow;
            this.MappingId = mappingId;
        }

        /// <summary>
        /// Gets or Sets TransactionWindow
        /// </summary>
        [DataMember(Name = "transactionWindow", EmitDefaultValue = false)]
        public DateRange TransactionWindow { get; set; }

        /// <summary>
        /// Gets or Sets MappingId
        /// </summary>
        [DataMember(Name = "mappingId", EmitDefaultValue = false)]
        public ResourceId MappingId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReconciliationTransactions {\n");
            sb.Append("  TransactionWindow: ").Append(TransactionWindow).Append("\n");
            sb.Append("  MappingId: ").Append(MappingId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReconciliationTransactions);
        }

        /// <summary>
        /// Returns true if ReconciliationTransactions instances are equal
        /// </summary>
        /// <param name="input">Instance of ReconciliationTransactions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReconciliationTransactions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TransactionWindow == input.TransactionWindow ||
                    (this.TransactionWindow != null &&
                    this.TransactionWindow.Equals(input.TransactionWindow))
                ) && 
                (
                    this.MappingId == input.MappingId ||
                    (this.MappingId != null &&
                    this.MappingId.Equals(input.MappingId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionWindow != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionWindow.GetHashCode();
                }
                if (this.MappingId != null)
                {
                    hashCode = (hashCode * 59) + this.MappingId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
