/*
 * LUSID API
 *
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// ComplianceRuleUpsertRequest
    /// </summary>
    [DataContract(Name = "ComplianceRuleUpsertRequest")]
    public partial class ComplianceRuleUpsertRequest : IEquatable<ComplianceRuleUpsertRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceRuleUpsertRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComplianceRuleUpsertRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceRuleUpsertRequest" /> class.
        /// </summary>
        /// <param name="scope">scope (required).</param>
        /// <param name="code">code.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="type">type (required).</param>
        /// <param name="propertyKey">propertyKey.</param>
        /// <param name="value">value.</param>
        /// <param name="lowerBound">lowerBound (required).</param>
        /// <param name="upperBound">upperBound (required).</param>
        /// <param name="schedule">schedule (required).</param>
        /// <param name="hardRequirement">hardRequirement (required).</param>
        /// <param name="targetPortfolioIds">targetPortfolioIds (required).</param>
        /// <param name="description">description.</param>
        /// <param name="addressKey">addressKey.</param>
        public ComplianceRuleUpsertRequest(string scope = default(string), string code = default(string), string displayName = default(string), string type = default(string), string propertyKey = default(string), string value = default(string), decimal lowerBound = default(decimal), decimal upperBound = default(decimal), string schedule = default(string), bool hardRequirement = default(bool), List<ResourceId> targetPortfolioIds = default(List<ResourceId>), string description = default(string), string addressKey = default(string))
        {
            // to ensure "scope" is required (not null)
            if (scope == null)
            {
                throw new ArgumentNullException("scope is a required property for ComplianceRuleUpsertRequest and cannot be null");
            }
            this.Scope = scope;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ComplianceRuleUpsertRequest and cannot be null");
            }
            this.Type = type;
            this.LowerBound = lowerBound;
            this.UpperBound = upperBound;
            // to ensure "schedule" is required (not null)
            if (schedule == null)
            {
                throw new ArgumentNullException("schedule is a required property for ComplianceRuleUpsertRequest and cannot be null");
            }
            this.Schedule = schedule;
            this.HardRequirement = hardRequirement;
            // to ensure "targetPortfolioIds" is required (not null)
            if (targetPortfolioIds == null)
            {
                throw new ArgumentNullException("targetPortfolioIds is a required property for ComplianceRuleUpsertRequest and cannot be null");
            }
            this.TargetPortfolioIds = targetPortfolioIds;
            this.Code = code;
            this.DisplayName = displayName;
            this.PropertyKey = propertyKey;
            this.Value = value;
            this.Description = description;
            this.AddressKey = addressKey;
        }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name = "scope", IsRequired = true, EmitDefaultValue = true)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets PropertyKey
        /// </summary>
        [DataMember(Name = "propertyKey", EmitDefaultValue = true)]
        public string PropertyKey { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets LowerBound
        /// </summary>
        [DataMember(Name = "lowerBound", IsRequired = true, EmitDefaultValue = true)]
        public decimal LowerBound { get; set; }

        /// <summary>
        /// Gets or Sets UpperBound
        /// </summary>
        [DataMember(Name = "upperBound", IsRequired = true, EmitDefaultValue = true)]
        public decimal UpperBound { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name = "schedule", IsRequired = true, EmitDefaultValue = true)]
        public string Schedule { get; set; }

        /// <summary>
        /// Gets or Sets HardRequirement
        /// </summary>
        [DataMember(Name = "hardRequirement", IsRequired = true, EmitDefaultValue = true)]
        public bool HardRequirement { get; set; }

        /// <summary>
        /// Gets or Sets TargetPortfolioIds
        /// </summary>
        [DataMember(Name = "targetPortfolioIds", IsRequired = true, EmitDefaultValue = true)]
        public List<ResourceId> TargetPortfolioIds { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets AddressKey
        /// </summary>
        [DataMember(Name = "addressKey", EmitDefaultValue = true)]
        public string AddressKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComplianceRuleUpsertRequest {\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PropertyKey: ").Append(PropertyKey).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  LowerBound: ").Append(LowerBound).Append("\n");
            sb.Append("  UpperBound: ").Append(UpperBound).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  HardRequirement: ").Append(HardRequirement).Append("\n");
            sb.Append("  TargetPortfolioIds: ").Append(TargetPortfolioIds).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AddressKey: ").Append(AddressKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComplianceRuleUpsertRequest);
        }

        /// <summary>
        /// Returns true if ComplianceRuleUpsertRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ComplianceRuleUpsertRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComplianceRuleUpsertRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PropertyKey == input.PropertyKey ||
                    (this.PropertyKey != null &&
                    this.PropertyKey.Equals(input.PropertyKey))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.LowerBound == input.LowerBound ||
                    this.LowerBound.Equals(input.LowerBound)
                ) && 
                (
                    this.UpperBound == input.UpperBound ||
                    this.UpperBound.Equals(input.UpperBound)
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.HardRequirement == input.HardRequirement ||
                    this.HardRequirement.Equals(input.HardRequirement)
                ) && 
                (
                    this.TargetPortfolioIds == input.TargetPortfolioIds ||
                    this.TargetPortfolioIds != null &&
                    input.TargetPortfolioIds != null &&
                    this.TargetPortfolioIds.SequenceEqual(input.TargetPortfolioIds)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.AddressKey == input.AddressKey ||
                    (this.AddressKey != null &&
                    this.AddressKey.Equals(input.AddressKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Scope != null)
                {
                    hashCode = (hashCode * 59) + this.Scope.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.PropertyKey != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyKey.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LowerBound.GetHashCode();
                hashCode = (hashCode * 59) + this.UpperBound.GetHashCode();
                if (this.Schedule != null)
                {
                    hashCode = (hashCode * 59) + this.Schedule.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HardRequirement.GetHashCode();
                if (this.TargetPortfolioIds != null)
                {
                    hashCode = (hashCode * 59) + this.TargetPortfolioIds.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.AddressKey != null)
                {
                    hashCode = (hashCode * 59) + this.AddressKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Scope (string) maxLength
            if (this.Scope != null && this.Scope.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, length must be less than 64.", new [] { "Scope" });
            }

            // Scope (string) minLength
            if (this.Scope != null && this.Scope.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, length must be greater than 1.", new [] { "Scope" });
            }

            // Scope (string) pattern
            Regex regexScope = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexScope.Match(this.Scope).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Scope, must match a pattern of " + regexScope, new [] { "Scope" });
            }

            // Code (string) maxLength
            if (this.Code != null && this.Code.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be less than 64.", new [] { "Code" });
            }

            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Code (string) pattern
            Regex regexCode = new Regex(@"^[a-zA-Z0-9\-_]+$", RegexOptions.CultureInvariant);
            if (false == regexCode.Match(this.Code).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Code, must match a pattern of " + regexCode, new [] { "Code" });
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be less than 512.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, length must be greater than 1.", new [] { "DisplayName" });
            }

            // DisplayName (string) pattern
            Regex regexDisplayName = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDisplayName.Match(this.DisplayName).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DisplayName, must match a pattern of " + regexDisplayName, new [] { "DisplayName" });
            }

            // Type (string) minLength
            if (this.Type != null && this.Type.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, length must be greater than 1.", new [] { "Type" });
            }

            // Value (string) maxLength
            if (this.Value != null && this.Value.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be less than 512.", new [] { "Value" });
            }

            // Value (string) minLength
            if (this.Value != null && this.Value.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, length must be greater than 1.", new [] { "Value" });
            }

            // Value (string) pattern
            Regex regexValue = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexValue.Match(this.Value).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Value, must match a pattern of " + regexValue, new [] { "Value" });
            }

            // Schedule (string) minLength
            if (this.Schedule != null && this.Schedule.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Schedule, length must be greater than 1.", new [] { "Schedule" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 1024.", new [] { "Description" });
            }

            // Description (string) minLength
            if (this.Description != null && this.Description.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be greater than 0.", new [] { "Description" });
            }

            // Description (string) pattern
            Regex regexDescription = new Regex(@"^[\s\S]*$", RegexOptions.CultureInvariant);
            if (false == regexDescription.Match(this.Description).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, must match a pattern of " + regexDescription, new [] { "Description" });
            }

            yield break;
        }
    }
}
