/* 
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3424
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Lusid.Sdk.Client;
using Lusid.Sdk.Model;

namespace Lusid.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferencePortfolioApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create reference portfolio
        /// </summary>
        /// <remarks>
        /// Create a reference portfolio in a particular scope.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope in which to create the reference portfolio.</param>
        /// <param name="createReferencePortfolioRequest">The definition of the reference portfolio.</param>
        /// <returns>Portfolio</returns>
        Portfolio CreateReferencePortfolio (string scope, CreateReferencePortfolioRequest createReferencePortfolioRequest);

        /// <summary>
        /// Create reference portfolio
        /// </summary>
        /// <remarks>
        /// Create a reference portfolio in a particular scope.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope in which to create the reference portfolio.</param>
        /// <param name="createReferencePortfolioRequest">The definition of the reference portfolio.</param>
        /// <returns>ApiResponse of Portfolio</returns>
        ApiResponse<Portfolio> CreateReferencePortfolioWithHttpInfo (string scope, CreateReferencePortfolioRequest createReferencePortfolioRequest);
        /// <summary>
        /// Get reference portfolio constituents
        /// </summary>
        /// <remarks>
        /// Get constituents from a reference portfolio at a particular effective time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="effectiveAt">The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)</param>
        /// <param name="asAt">The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)</param>
        /// <param name="propertyKeys">A list of property keys from the &#39;Instrument&#39; or &#39;ReferenceHolding&#39; domain to decorate onto              constituents. These take the format {domain}/{scope}/{code} e.g. &#39;Instrument/system/Name&#39; or              &#39;ReferenceHolding/strategy/quantsignal&#39;. Defaults to return all available instrument and reference holding properties if not specified. (optional)</param>
        /// <returns>GetReferencePortfolioConstituentsResponse</returns>
        GetReferencePortfolioConstituentsResponse GetReferencePortfolioConstituents (string scope, string code, DateTimeOrCutLabel effectiveAt = null, DateTimeOffset? asAt = null, List<string> propertyKeys = null);

        /// <summary>
        /// Get reference portfolio constituents
        /// </summary>
        /// <remarks>
        /// Get constituents from a reference portfolio at a particular effective time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="effectiveAt">The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)</param>
        /// <param name="asAt">The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)</param>
        /// <param name="propertyKeys">A list of property keys from the &#39;Instrument&#39; or &#39;ReferenceHolding&#39; domain to decorate onto              constituents. These take the format {domain}/{scope}/{code} e.g. &#39;Instrument/system/Name&#39; or              &#39;ReferenceHolding/strategy/quantsignal&#39;. Defaults to return all available instrument and reference holding properties if not specified. (optional)</param>
        /// <returns>ApiResponse of GetReferencePortfolioConstituentsResponse</returns>
        ApiResponse<GetReferencePortfolioConstituentsResponse> GetReferencePortfolioConstituentsWithHttpInfo (string scope, string code, DateTimeOrCutLabel effectiveAt = null, DateTimeOffset? asAt = null, List<string> propertyKeys = null);
        /// <summary>
        /// List constituents adjustments
        /// </summary>
        /// <remarks>
        /// List adjustments made to constituents in a reference portfolio.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="fromEffectiveAt">Events between this time (inclusive) and the toEffectiveAt are returned.</param>
        /// <param name="toEffectiveAt">Events between this time (inclusive) and the fromEffectiveAt are returned.</param>
        /// <param name="asAtTime">The asAt time for which the result is valid. (optional)</param>
        /// <returns>ResourceListOfConstituentsAdjustmentHeader</returns>
        ResourceListOfConstituentsAdjustmentHeader ListConstituentsAdjustments (string scope, string code, DateTimeOrCutLabel fromEffectiveAt, DateTimeOrCutLabel toEffectiveAt, DateTimeOffset? asAtTime = null);

        /// <summary>
        /// List constituents adjustments
        /// </summary>
        /// <remarks>
        /// List adjustments made to constituents in a reference portfolio.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="fromEffectiveAt">Events between this time (inclusive) and the toEffectiveAt are returned.</param>
        /// <param name="toEffectiveAt">Events between this time (inclusive) and the fromEffectiveAt are returned.</param>
        /// <param name="asAtTime">The asAt time for which the result is valid. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfConstituentsAdjustmentHeader</returns>
        ApiResponse<ResourceListOfConstituentsAdjustmentHeader> ListConstituentsAdjustmentsWithHttpInfo (string scope, string code, DateTimeOrCutLabel fromEffectiveAt, DateTimeOrCutLabel toEffectiveAt, DateTimeOffset? asAtTime = null);
        /// <summary>
        /// Upsert reference portfolio constituents
        /// </summary>
        /// <remarks>
        /// Add constituents to a reference portfolio.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="upsertReferencePortfolioConstituentsRequest">The constituents to upload to the reference portfolio.</param>
        /// <returns>UpsertReferencePortfolioConstituentsResponse</returns>
        UpsertReferencePortfolioConstituentsResponse UpsertReferencePortfolioConstituents (string scope, string code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest);

        /// <summary>
        /// Upsert reference portfolio constituents
        /// </summary>
        /// <remarks>
        /// Add constituents to a reference portfolio.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="upsertReferencePortfolioConstituentsRequest">The constituents to upload to the reference portfolio.</param>
        /// <returns>ApiResponse of UpsertReferencePortfolioConstituentsResponse</returns>
        ApiResponse<UpsertReferencePortfolioConstituentsResponse> UpsertReferencePortfolioConstituentsWithHttpInfo (string scope, string code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create reference portfolio
        /// </summary>
        /// <remarks>
        /// Create a reference portfolio in a particular scope.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope in which to create the reference portfolio.</param>
        /// <param name="createReferencePortfolioRequest">The definition of the reference portfolio.</param>
        /// <returns>Task of Portfolio</returns>
        System.Threading.Tasks.Task<Portfolio> CreateReferencePortfolioAsync (string scope, CreateReferencePortfolioRequest createReferencePortfolioRequest);

        /// <summary>
        /// Create reference portfolio
        /// </summary>
        /// <remarks>
        /// Create a reference portfolio in a particular scope.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope in which to create the reference portfolio.</param>
        /// <param name="createReferencePortfolioRequest">The definition of the reference portfolio.</param>
        /// <returns>Task of ApiResponse (Portfolio)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portfolio>> CreateReferencePortfolioAsyncWithHttpInfo (string scope, CreateReferencePortfolioRequest createReferencePortfolioRequest);
        /// <summary>
        /// Get reference portfolio constituents
        /// </summary>
        /// <remarks>
        /// Get constituents from a reference portfolio at a particular effective time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="effectiveAt">The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)</param>
        /// <param name="asAt">The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)</param>
        /// <param name="propertyKeys">A list of property keys from the &#39;Instrument&#39; or &#39;ReferenceHolding&#39; domain to decorate onto              constituents. These take the format {domain}/{scope}/{code} e.g. &#39;Instrument/system/Name&#39; or              &#39;ReferenceHolding/strategy/quantsignal&#39;. Defaults to return all available instrument and reference holding properties if not specified. (optional)</param>
        /// <returns>Task of GetReferencePortfolioConstituentsResponse</returns>
        System.Threading.Tasks.Task<GetReferencePortfolioConstituentsResponse> GetReferencePortfolioConstituentsAsync (string scope, string code, DateTimeOrCutLabel effectiveAt = null, DateTimeOffset? asAt = null, List<string> propertyKeys = null);

        /// <summary>
        /// Get reference portfolio constituents
        /// </summary>
        /// <remarks>
        /// Get constituents from a reference portfolio at a particular effective time.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="effectiveAt">The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)</param>
        /// <param name="asAt">The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)</param>
        /// <param name="propertyKeys">A list of property keys from the &#39;Instrument&#39; or &#39;ReferenceHolding&#39; domain to decorate onto              constituents. These take the format {domain}/{scope}/{code} e.g. &#39;Instrument/system/Name&#39; or              &#39;ReferenceHolding/strategy/quantsignal&#39;. Defaults to return all available instrument and reference holding properties if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (GetReferencePortfolioConstituentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReferencePortfolioConstituentsResponse>> GetReferencePortfolioConstituentsAsyncWithHttpInfo (string scope, string code, DateTimeOrCutLabel effectiveAt = null, DateTimeOffset? asAt = null, List<string> propertyKeys = null);
        /// <summary>
        /// List constituents adjustments
        /// </summary>
        /// <remarks>
        /// List adjustments made to constituents in a reference portfolio.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="fromEffectiveAt">Events between this time (inclusive) and the toEffectiveAt are returned.</param>
        /// <param name="toEffectiveAt">Events between this time (inclusive) and the fromEffectiveAt are returned.</param>
        /// <param name="asAtTime">The asAt time for which the result is valid. (optional)</param>
        /// <returns>Task of ResourceListOfConstituentsAdjustmentHeader</returns>
        System.Threading.Tasks.Task<ResourceListOfConstituentsAdjustmentHeader> ListConstituentsAdjustmentsAsync (string scope, string code, DateTimeOrCutLabel fromEffectiveAt, DateTimeOrCutLabel toEffectiveAt, DateTimeOffset? asAtTime = null);

        /// <summary>
        /// List constituents adjustments
        /// </summary>
        /// <remarks>
        /// List adjustments made to constituents in a reference portfolio.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="fromEffectiveAt">Events between this time (inclusive) and the toEffectiveAt are returned.</param>
        /// <param name="toEffectiveAt">Events between this time (inclusive) and the fromEffectiveAt are returned.</param>
        /// <param name="asAtTime">The asAt time for which the result is valid. (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfConstituentsAdjustmentHeader)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfConstituentsAdjustmentHeader>> ListConstituentsAdjustmentsAsyncWithHttpInfo (string scope, string code, DateTimeOrCutLabel fromEffectiveAt, DateTimeOrCutLabel toEffectiveAt, DateTimeOffset? asAtTime = null);
        /// <summary>
        /// Upsert reference portfolio constituents
        /// </summary>
        /// <remarks>
        /// Add constituents to a reference portfolio.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="upsertReferencePortfolioConstituentsRequest">The constituents to upload to the reference portfolio.</param>
        /// <returns>Task of UpsertReferencePortfolioConstituentsResponse</returns>
        System.Threading.Tasks.Task<UpsertReferencePortfolioConstituentsResponse> UpsertReferencePortfolioConstituentsAsync (string scope, string code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest);

        /// <summary>
        /// Upsert reference portfolio constituents
        /// </summary>
        /// <remarks>
        /// Add constituents to a reference portfolio.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="upsertReferencePortfolioConstituentsRequest">The constituents to upload to the reference portfolio.</param>
        /// <returns>Task of ApiResponse (UpsertReferencePortfolioConstituentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpsertReferencePortfolioConstituentsResponse>> UpsertReferencePortfolioConstituentsAsyncWithHttpInfo (string scope, string code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReferencePortfolioApi : IReferencePortfolioApi
    {
        private Lusid.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferencePortfolioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferencePortfolioApi(String basePath)
        {
            this.Configuration = new Lusid.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferencePortfolioApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReferencePortfolioApi()
        {
            this.Configuration = Lusid.Sdk.Client.Configuration.Default;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferencePortfolioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReferencePortfolioApi(Lusid.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Lusid.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Lusid.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Lusid.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create reference portfolio Create a reference portfolio in a particular scope.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope in which to create the reference portfolio.</param>
        /// <param name="createReferencePortfolioRequest">The definition of the reference portfolio.</param>
        /// <returns>Portfolio</returns>
        public Portfolio CreateReferencePortfolio (string scope, CreateReferencePortfolioRequest createReferencePortfolioRequest)
        {
             ApiResponse<Portfolio> localVarResponse = CreateReferencePortfolioWithHttpInfo(scope, createReferencePortfolioRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create reference portfolio Create a reference portfolio in a particular scope.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope in which to create the reference portfolio.</param>
        /// <param name="createReferencePortfolioRequest">The definition of the reference portfolio.</param>
        /// <returns>ApiResponse of Portfolio</returns>
        public ApiResponse< Portfolio > CreateReferencePortfolioWithHttpInfo (string scope, CreateReferencePortfolioRequest createReferencePortfolioRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ReferencePortfolioApi->CreateReferencePortfolio");
            // verify the required parameter 'createReferencePortfolioRequest' is set
            if (createReferencePortfolioRequest == null)
                throw new ApiException(400, "Missing required parameter 'createReferencePortfolioRequest' when calling ReferencePortfolioApi->CreateReferencePortfolio");

            var localVarPath = "./api/referenceportfolios/{scope}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (createReferencePortfolioRequest != null && createReferencePortfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createReferencePortfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createReferencePortfolioRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReferencePortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Portfolio) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portfolio)));
        }

        /// <summary>
        /// Create reference portfolio Create a reference portfolio in a particular scope.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope in which to create the reference portfolio.</param>
        /// <param name="createReferencePortfolioRequest">The definition of the reference portfolio.</param>
        /// <returns>Task of Portfolio</returns>
        public async System.Threading.Tasks.Task<Portfolio> CreateReferencePortfolioAsync (string scope, CreateReferencePortfolioRequest createReferencePortfolioRequest)
        {
             ApiResponse<Portfolio> localVarResponse = await CreateReferencePortfolioAsyncWithHttpInfo(scope, createReferencePortfolioRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create reference portfolio Create a reference portfolio in a particular scope.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope in which to create the reference portfolio.</param>
        /// <param name="createReferencePortfolioRequest">The definition of the reference portfolio.</param>
        /// <returns>Task of ApiResponse (Portfolio)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portfolio>> CreateReferencePortfolioAsyncWithHttpInfo (string scope, CreateReferencePortfolioRequest createReferencePortfolioRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ReferencePortfolioApi->CreateReferencePortfolio");
            // verify the required parameter 'createReferencePortfolioRequest' is set
            if (createReferencePortfolioRequest == null)
                throw new ApiException(400, "Missing required parameter 'createReferencePortfolioRequest' when calling ReferencePortfolioApi->CreateReferencePortfolio");

            var localVarPath = "./api/referenceportfolios/{scope}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (createReferencePortfolioRequest != null && createReferencePortfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createReferencePortfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createReferencePortfolioRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReferencePortfolio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Portfolio) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portfolio)));
        }

        /// <summary>
        /// Get reference portfolio constituents Get constituents from a reference portfolio at a particular effective time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="effectiveAt">The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)</param>
        /// <param name="asAt">The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)</param>
        /// <param name="propertyKeys">A list of property keys from the &#39;Instrument&#39; or &#39;ReferenceHolding&#39; domain to decorate onto              constituents. These take the format {domain}/{scope}/{code} e.g. &#39;Instrument/system/Name&#39; or              &#39;ReferenceHolding/strategy/quantsignal&#39;. Defaults to return all available instrument and reference holding properties if not specified. (optional)</param>
        /// <returns>GetReferencePortfolioConstituentsResponse</returns>
        public GetReferencePortfolioConstituentsResponse GetReferencePortfolioConstituents (string scope, string code, DateTimeOrCutLabel effectiveAt = null, DateTimeOffset? asAt = null, List<string> propertyKeys = null)
        {
             ApiResponse<GetReferencePortfolioConstituentsResponse> localVarResponse = GetReferencePortfolioConstituentsWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get reference portfolio constituents Get constituents from a reference portfolio at a particular effective time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="effectiveAt">The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)</param>
        /// <param name="asAt">The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)</param>
        /// <param name="propertyKeys">A list of property keys from the &#39;Instrument&#39; or &#39;ReferenceHolding&#39; domain to decorate onto              constituents. These take the format {domain}/{scope}/{code} e.g. &#39;Instrument/system/Name&#39; or              &#39;ReferenceHolding/strategy/quantsignal&#39;. Defaults to return all available instrument and reference holding properties if not specified. (optional)</param>
        /// <returns>ApiResponse of GetReferencePortfolioConstituentsResponse</returns>
        public ApiResponse< GetReferencePortfolioConstituentsResponse > GetReferencePortfolioConstituentsWithHttpInfo (string scope, string code, DateTimeOrCutLabel effectiveAt = null, DateTimeOffset? asAt = null, List<string> propertyKeys = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ReferencePortfolioApi->GetReferencePortfolioConstituents");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ReferencePortfolioApi->GetReferencePortfolioConstituents");

            var localVarPath = "./api/referenceportfolios/{scope}/{code}/constituents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (effectiveAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "effectiveAt", effectiveAt)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (propertyKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "propertyKeys", propertyKeys)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferencePortfolioConstituents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetReferencePortfolioConstituentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetReferencePortfolioConstituentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetReferencePortfolioConstituentsResponse)));
        }

        /// <summary>
        /// Get reference portfolio constituents Get constituents from a reference portfolio at a particular effective time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="effectiveAt">The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)</param>
        /// <param name="asAt">The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)</param>
        /// <param name="propertyKeys">A list of property keys from the &#39;Instrument&#39; or &#39;ReferenceHolding&#39; domain to decorate onto              constituents. These take the format {domain}/{scope}/{code} e.g. &#39;Instrument/system/Name&#39; or              &#39;ReferenceHolding/strategy/quantsignal&#39;. Defaults to return all available instrument and reference holding properties if not specified. (optional)</param>
        /// <returns>Task of GetReferencePortfolioConstituentsResponse</returns>
        public async System.Threading.Tasks.Task<GetReferencePortfolioConstituentsResponse> GetReferencePortfolioConstituentsAsync (string scope, string code, DateTimeOrCutLabel effectiveAt = null, DateTimeOffset? asAt = null, List<string> propertyKeys = null)
        {
             ApiResponse<GetReferencePortfolioConstituentsResponse> localVarResponse = await GetReferencePortfolioConstituentsAsyncWithHttpInfo(scope, code, effectiveAt, asAt, propertyKeys);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get reference portfolio constituents Get constituents from a reference portfolio at a particular effective time.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="effectiveAt">The effective date of the constituents to retrieve. Defaults to the current LUSID system datetime if not specified. (optional)</param>
        /// <param name="asAt">The asAt datetime at which to retrieve constituents. Defaults to return the latest version              of each constituent if not specified. (optional)</param>
        /// <param name="propertyKeys">A list of property keys from the &#39;Instrument&#39; or &#39;ReferenceHolding&#39; domain to decorate onto              constituents. These take the format {domain}/{scope}/{code} e.g. &#39;Instrument/system/Name&#39; or              &#39;ReferenceHolding/strategy/quantsignal&#39;. Defaults to return all available instrument and reference holding properties if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (GetReferencePortfolioConstituentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetReferencePortfolioConstituentsResponse>> GetReferencePortfolioConstituentsAsyncWithHttpInfo (string scope, string code, DateTimeOrCutLabel effectiveAt = null, DateTimeOffset? asAt = null, List<string> propertyKeys = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ReferencePortfolioApi->GetReferencePortfolioConstituents");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ReferencePortfolioApi->GetReferencePortfolioConstituents");

            var localVarPath = "./api/referenceportfolios/{scope}/{code}/constituents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (effectiveAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "effectiveAt", effectiveAt)); // query parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (propertyKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "propertyKeys", propertyKeys)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferencePortfolioConstituents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetReferencePortfolioConstituentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (GetReferencePortfolioConstituentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetReferencePortfolioConstituentsResponse)));
        }

        /// <summary>
        /// List constituents adjustments List adjustments made to constituents in a reference portfolio.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="fromEffectiveAt">Events between this time (inclusive) and the toEffectiveAt are returned.</param>
        /// <param name="toEffectiveAt">Events between this time (inclusive) and the fromEffectiveAt are returned.</param>
        /// <param name="asAtTime">The asAt time for which the result is valid. (optional)</param>
        /// <returns>ResourceListOfConstituentsAdjustmentHeader</returns>
        public ResourceListOfConstituentsAdjustmentHeader ListConstituentsAdjustments (string scope, string code, DateTimeOrCutLabel fromEffectiveAt, DateTimeOrCutLabel toEffectiveAt, DateTimeOffset? asAtTime = null)
        {
             ApiResponse<ResourceListOfConstituentsAdjustmentHeader> localVarResponse = ListConstituentsAdjustmentsWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List constituents adjustments List adjustments made to constituents in a reference portfolio.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="fromEffectiveAt">Events between this time (inclusive) and the toEffectiveAt are returned.</param>
        /// <param name="toEffectiveAt">Events between this time (inclusive) and the fromEffectiveAt are returned.</param>
        /// <param name="asAtTime">The asAt time for which the result is valid. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfConstituentsAdjustmentHeader</returns>
        public ApiResponse< ResourceListOfConstituentsAdjustmentHeader > ListConstituentsAdjustmentsWithHttpInfo (string scope, string code, DateTimeOrCutLabel fromEffectiveAt, DateTimeOrCutLabel toEffectiveAt, DateTimeOffset? asAtTime = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ReferencePortfolioApi->ListConstituentsAdjustments");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ReferencePortfolioApi->ListConstituentsAdjustments");
            // verify the required parameter 'fromEffectiveAt' is set
            if (fromEffectiveAt == null)
                throw new ApiException(400, "Missing required parameter 'fromEffectiveAt' when calling ReferencePortfolioApi->ListConstituentsAdjustments");
            // verify the required parameter 'toEffectiveAt' is set
            if (toEffectiveAt == null)
                throw new ApiException(400, "Missing required parameter 'toEffectiveAt' when calling ReferencePortfolioApi->ListConstituentsAdjustments");

            var localVarPath = "./api/referenceportfolios/{scope}/{code}/constituentsadjustments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (fromEffectiveAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromEffectiveAt", fromEffectiveAt)); // query parameter
            if (toEffectiveAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toEffectiveAt", toEffectiveAt)); // query parameter
            if (asAtTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAtTime", asAtTime)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConstituentsAdjustments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfConstituentsAdjustmentHeader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfConstituentsAdjustmentHeader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfConstituentsAdjustmentHeader)));
        }

        /// <summary>
        /// List constituents adjustments List adjustments made to constituents in a reference portfolio.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="fromEffectiveAt">Events between this time (inclusive) and the toEffectiveAt are returned.</param>
        /// <param name="toEffectiveAt">Events between this time (inclusive) and the fromEffectiveAt are returned.</param>
        /// <param name="asAtTime">The asAt time for which the result is valid. (optional)</param>
        /// <returns>Task of ResourceListOfConstituentsAdjustmentHeader</returns>
        public async System.Threading.Tasks.Task<ResourceListOfConstituentsAdjustmentHeader> ListConstituentsAdjustmentsAsync (string scope, string code, DateTimeOrCutLabel fromEffectiveAt, DateTimeOrCutLabel toEffectiveAt, DateTimeOffset? asAtTime = null)
        {
             ApiResponse<ResourceListOfConstituentsAdjustmentHeader> localVarResponse = await ListConstituentsAdjustmentsAsyncWithHttpInfo(scope, code, fromEffectiveAt, toEffectiveAt, asAtTime);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List constituents adjustments List adjustments made to constituents in a reference portfolio.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="fromEffectiveAt">Events between this time (inclusive) and the toEffectiveAt are returned.</param>
        /// <param name="toEffectiveAt">Events between this time (inclusive) and the fromEffectiveAt are returned.</param>
        /// <param name="asAtTime">The asAt time for which the result is valid. (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfConstituentsAdjustmentHeader)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceListOfConstituentsAdjustmentHeader>> ListConstituentsAdjustmentsAsyncWithHttpInfo (string scope, string code, DateTimeOrCutLabel fromEffectiveAt, DateTimeOrCutLabel toEffectiveAt, DateTimeOffset? asAtTime = null)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ReferencePortfolioApi->ListConstituentsAdjustments");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ReferencePortfolioApi->ListConstituentsAdjustments");
            // verify the required parameter 'fromEffectiveAt' is set
            if (fromEffectiveAt == null)
                throw new ApiException(400, "Missing required parameter 'fromEffectiveAt' when calling ReferencePortfolioApi->ListConstituentsAdjustments");
            // verify the required parameter 'toEffectiveAt' is set
            if (toEffectiveAt == null)
                throw new ApiException(400, "Missing required parameter 'toEffectiveAt' when calling ReferencePortfolioApi->ListConstituentsAdjustments");

            var localVarPath = "./api/referenceportfolios/{scope}/{code}/constituentsadjustments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (fromEffectiveAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fromEffectiveAt", fromEffectiveAt)); // query parameter
            if (toEffectiveAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "toEffectiveAt", toEffectiveAt)); // query parameter
            if (asAtTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAtTime", asAtTime)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListConstituentsAdjustments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfConstituentsAdjustmentHeader>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfConstituentsAdjustmentHeader) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfConstituentsAdjustmentHeader)));
        }

        /// <summary>
        /// Upsert reference portfolio constituents Add constituents to a reference portfolio.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="upsertReferencePortfolioConstituentsRequest">The constituents to upload to the reference portfolio.</param>
        /// <returns>UpsertReferencePortfolioConstituentsResponse</returns>
        public UpsertReferencePortfolioConstituentsResponse UpsertReferencePortfolioConstituents (string scope, string code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest)
        {
             ApiResponse<UpsertReferencePortfolioConstituentsResponse> localVarResponse = UpsertReferencePortfolioConstituentsWithHttpInfo(scope, code, upsertReferencePortfolioConstituentsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert reference portfolio constituents Add constituents to a reference portfolio.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="upsertReferencePortfolioConstituentsRequest">The constituents to upload to the reference portfolio.</param>
        /// <returns>ApiResponse of UpsertReferencePortfolioConstituentsResponse</returns>
        public ApiResponse< UpsertReferencePortfolioConstituentsResponse > UpsertReferencePortfolioConstituentsWithHttpInfo (string scope, string code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ReferencePortfolioApi->UpsertReferencePortfolioConstituents");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ReferencePortfolioApi->UpsertReferencePortfolioConstituents");
            // verify the required parameter 'upsertReferencePortfolioConstituentsRequest' is set
            if (upsertReferencePortfolioConstituentsRequest == null)
                throw new ApiException(400, "Missing required parameter 'upsertReferencePortfolioConstituentsRequest' when calling ReferencePortfolioApi->UpsertReferencePortfolioConstituents");

            var localVarPath = "./api/referenceportfolios/{scope}/{code}/constituents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (upsertReferencePortfolioConstituentsRequest != null && upsertReferencePortfolioConstituentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(upsertReferencePortfolioConstituentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = upsertReferencePortfolioConstituentsRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertReferencePortfolioConstituents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertReferencePortfolioConstituentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UpsertReferencePortfolioConstituentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertReferencePortfolioConstituentsResponse)));
        }

        /// <summary>
        /// Upsert reference portfolio constituents Add constituents to a reference portfolio.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="upsertReferencePortfolioConstituentsRequest">The constituents to upload to the reference portfolio.</param>
        /// <returns>Task of UpsertReferencePortfolioConstituentsResponse</returns>
        public async System.Threading.Tasks.Task<UpsertReferencePortfolioConstituentsResponse> UpsertReferencePortfolioConstituentsAsync (string scope, string code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest)
        {
             ApiResponse<UpsertReferencePortfolioConstituentsResponse> localVarResponse = await UpsertReferencePortfolioConstituentsAsyncWithHttpInfo(scope, code, upsertReferencePortfolioConstituentsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upsert reference portfolio constituents Add constituents to a reference portfolio.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the reference portfolio.</param>
        /// <param name="code">The code of the reference portfolio. Together with the scope this uniquely identifies              the reference portfolio.</param>
        /// <param name="upsertReferencePortfolioConstituentsRequest">The constituents to upload to the reference portfolio.</param>
        /// <returns>Task of ApiResponse (UpsertReferencePortfolioConstituentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpsertReferencePortfolioConstituentsResponse>> UpsertReferencePortfolioConstituentsAsyncWithHttpInfo (string scope, string code, UpsertReferencePortfolioConstituentsRequest upsertReferencePortfolioConstituentsRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling ReferencePortfolioApi->UpsertReferencePortfolioConstituents");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling ReferencePortfolioApi->UpsertReferencePortfolioConstituents");
            // verify the required parameter 'upsertReferencePortfolioConstituentsRequest' is set
            if (upsertReferencePortfolioConstituentsRequest == null)
                throw new ApiException(400, "Missing required parameter 'upsertReferencePortfolioConstituentsRequest' when calling ReferencePortfolioApi->UpsertReferencePortfolioConstituents");

            var localVarPath = "./api/referenceportfolios/{scope}/{code}/constituents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (upsertReferencePortfolioConstituentsRequest != null && upsertReferencePortfolioConstituentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(upsertReferencePortfolioConstituentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = upsertReferencePortfolioConstituentsRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3424";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertReferencePortfolioConstituents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpsertReferencePortfolioConstituentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (UpsertReferencePortfolioConstituentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpsertReferencePortfolioConstituentsResponse)));
        }

    }
}