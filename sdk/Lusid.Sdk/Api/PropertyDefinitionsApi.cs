/* 
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3421
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Lusid.Sdk.Client;
using Lusid.Sdk.Model;

namespace Lusid.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropertyDefinitionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EARLY ACCESS] Create derived property definition
        /// </summary>
        /// <remarks>
        /// Define a new derived property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDerivedPropertyDefinitionRequest">The definition of the new derived property.</param>
        /// <returns>PropertyDefinition</returns>
        PropertyDefinition CreateDerivedPropertyDefinition (CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest);

        /// <summary>
        /// [EARLY ACCESS] Create derived property definition
        /// </summary>
        /// <remarks>
        /// Define a new derived property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDerivedPropertyDefinitionRequest">The definition of the new derived property.</param>
        /// <returns>ApiResponse of PropertyDefinition</returns>
        ApiResponse<PropertyDefinition> CreateDerivedPropertyDefinitionWithHttpInfo (CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest);
        /// <summary>
        /// Create property definition
        /// </summary>
        /// <remarks>
        /// Define a new property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPropertyDefinitionRequest">The definition of the new property.</param>
        /// <returns>PropertyDefinition</returns>
        PropertyDefinition CreatePropertyDefinition (CreatePropertyDefinitionRequest createPropertyDefinitionRequest);

        /// <summary>
        /// Create property definition
        /// </summary>
        /// <remarks>
        /// Define a new property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPropertyDefinitionRequest">The definition of the new property.</param>
        /// <returns>ApiResponse of PropertyDefinition</returns>
        ApiResponse<PropertyDefinition> CreatePropertyDefinitionWithHttpInfo (CreatePropertyDefinitionRequest createPropertyDefinitionRequest);
        /// <summary>
        /// Delete property definition
        /// </summary>
        /// <remarks>
        /// Delete the definition of the specified property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property to be deleted.</param>
        /// <param name="scope">The scope of the property to be deleted.</param>
        /// <param name="code">The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <returns>DeletedEntityResponse</returns>
        DeletedEntityResponse DeletePropertyDefinition (string domain, string scope, string code);

        /// <summary>
        /// Delete property definition
        /// </summary>
        /// <remarks>
        /// Delete the definition of the specified property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property to be deleted.</param>
        /// <param name="scope">The scope of the property to be deleted.</param>
        /// <param name="code">The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <returns>ApiResponse of DeletedEntityResponse</returns>
        ApiResponse<DeletedEntityResponse> DeletePropertyDefinitionWithHttpInfo (string domain, string scope, string code);
        /// <summary>
        /// Get multiple property definitions
        /// </summary>
        /// <remarks>
        /// Retrieve the definition of one or more specified properties.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyKeys">One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ResourceListOfPropertyDefinition</returns>
        ResourceListOfPropertyDefinition GetMultiplePropertyDefinitions (List<string> propertyKeys, DateTimeOffset? asAt = null, string filter = null);

        /// <summary>
        /// Get multiple property definitions
        /// </summary>
        /// <remarks>
        /// Retrieve the definition of one or more specified properties.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyKeys">One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfPropertyDefinition</returns>
        ApiResponse<ResourceListOfPropertyDefinition> GetMultiplePropertyDefinitionsWithHttpInfo (List<string> propertyKeys, DateTimeOffset? asAt = null, string filter = null);
        /// <summary>
        /// Get property definition
        /// </summary>
        /// <remarks>
        /// Retrieve the definition of a specified property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the specified property.</param>
        /// <param name="scope">The scope of the specified property.</param>
        /// <param name="code">The code of the specified property. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)</param>
        /// <returns>PropertyDefinition</returns>
        PropertyDefinition GetPropertyDefinition (string domain, string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// Get property definition
        /// </summary>
        /// <remarks>
        /// Retrieve the definition of a specified property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the specified property.</param>
        /// <param name="scope">The scope of the specified property.</param>
        /// <param name="code">The code of the specified property. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)</param>
        /// <returns>ApiResponse of PropertyDefinition</returns>
        ApiResponse<PropertyDefinition> GetPropertyDefinitionWithHttpInfo (string domain, string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// Update property definition
        /// </summary>
        /// <remarks>
        /// Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property being updated.</param>
        /// <param name="scope">The scope of the property being updated.</param>
        /// <param name="code">The code of the property being updated. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="updatePropertyDefinitionRequest">The updated definition of the property.</param>
        /// <returns>PropertyDefinition</returns>
        PropertyDefinition UpdatePropertyDefinition (string domain, string scope, string code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest);

        /// <summary>
        /// Update property definition
        /// </summary>
        /// <remarks>
        /// Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property being updated.</param>
        /// <param name="scope">The scope of the property being updated.</param>
        /// <param name="code">The code of the property being updated. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="updatePropertyDefinitionRequest">The updated definition of the property.</param>
        /// <returns>ApiResponse of PropertyDefinition</returns>
        ApiResponse<PropertyDefinition> UpdatePropertyDefinitionWithHttpInfo (string domain, string scope, string code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// [EARLY ACCESS] Create derived property definition
        /// </summary>
        /// <remarks>
        /// Define a new derived property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDerivedPropertyDefinitionRequest">The definition of the new derived property.</param>
        /// <returns>Task of PropertyDefinition</returns>
        System.Threading.Tasks.Task<PropertyDefinition> CreateDerivedPropertyDefinitionAsync (CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest);

        /// <summary>
        /// [EARLY ACCESS] Create derived property definition
        /// </summary>
        /// <remarks>
        /// Define a new derived property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDerivedPropertyDefinitionRequest">The definition of the new derived property.</param>
        /// <returns>Task of ApiResponse (PropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDefinition>> CreateDerivedPropertyDefinitionAsyncWithHttpInfo (CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest);
        /// <summary>
        /// Create property definition
        /// </summary>
        /// <remarks>
        /// Define a new property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPropertyDefinitionRequest">The definition of the new property.</param>
        /// <returns>Task of PropertyDefinition</returns>
        System.Threading.Tasks.Task<PropertyDefinition> CreatePropertyDefinitionAsync (CreatePropertyDefinitionRequest createPropertyDefinitionRequest);

        /// <summary>
        /// Create property definition
        /// </summary>
        /// <remarks>
        /// Define a new property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPropertyDefinitionRequest">The definition of the new property.</param>
        /// <returns>Task of ApiResponse (PropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDefinition>> CreatePropertyDefinitionAsyncWithHttpInfo (CreatePropertyDefinitionRequest createPropertyDefinitionRequest);
        /// <summary>
        /// Delete property definition
        /// </summary>
        /// <remarks>
        /// Delete the definition of the specified property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property to be deleted.</param>
        /// <param name="scope">The scope of the property to be deleted.</param>
        /// <param name="code">The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <returns>Task of DeletedEntityResponse</returns>
        System.Threading.Tasks.Task<DeletedEntityResponse> DeletePropertyDefinitionAsync (string domain, string scope, string code);

        /// <summary>
        /// Delete property definition
        /// </summary>
        /// <remarks>
        /// Delete the definition of the specified property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property to be deleted.</param>
        /// <param name="scope">The scope of the property to be deleted.</param>
        /// <param name="code">The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <returns>Task of ApiResponse (DeletedEntityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletedEntityResponse>> DeletePropertyDefinitionAsyncWithHttpInfo (string domain, string scope, string code);
        /// <summary>
        /// Get multiple property definitions
        /// </summary>
        /// <remarks>
        /// Retrieve the definition of one or more specified properties.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyKeys">One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ResourceListOfPropertyDefinition</returns>
        System.Threading.Tasks.Task<ResourceListOfPropertyDefinition> GetMultiplePropertyDefinitionsAsync (List<string> propertyKeys, DateTimeOffset? asAt = null, string filter = null);

        /// <summary>
        /// Get multiple property definitions
        /// </summary>
        /// <remarks>
        /// Retrieve the definition of one or more specified properties.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyKeys">One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfPropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfPropertyDefinition>> GetMultiplePropertyDefinitionsAsyncWithHttpInfo (List<string> propertyKeys, DateTimeOffset? asAt = null, string filter = null);
        /// <summary>
        /// Get property definition
        /// </summary>
        /// <remarks>
        /// Retrieve the definition of a specified property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the specified property.</param>
        /// <param name="scope">The scope of the specified property.</param>
        /// <param name="code">The code of the specified property. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)</param>
        /// <returns>Task of PropertyDefinition</returns>
        System.Threading.Tasks.Task<PropertyDefinition> GetPropertyDefinitionAsync (string domain, string scope, string code, DateTimeOffset? asAt = null);

        /// <summary>
        /// Get property definition
        /// </summary>
        /// <remarks>
        /// Retrieve the definition of a specified property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the specified property.</param>
        /// <param name="scope">The scope of the specified property.</param>
        /// <param name="code">The code of the specified property. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDefinition>> GetPropertyDefinitionAsyncWithHttpInfo (string domain, string scope, string code, DateTimeOffset? asAt = null);
        /// <summary>
        /// Update property definition
        /// </summary>
        /// <remarks>
        /// Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property being updated.</param>
        /// <param name="scope">The scope of the property being updated.</param>
        /// <param name="code">The code of the property being updated. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="updatePropertyDefinitionRequest">The updated definition of the property.</param>
        /// <returns>Task of PropertyDefinition</returns>
        System.Threading.Tasks.Task<PropertyDefinition> UpdatePropertyDefinitionAsync (string domain, string scope, string code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest);

        /// <summary>
        /// Update property definition
        /// </summary>
        /// <remarks>
        /// Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
        /// </remarks>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property being updated.</param>
        /// <param name="scope">The scope of the property being updated.</param>
        /// <param name="code">The code of the property being updated. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="updatePropertyDefinitionRequest">The updated definition of the property.</param>
        /// <returns>Task of ApiResponse (PropertyDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertyDefinition>> UpdatePropertyDefinitionAsyncWithHttpInfo (string domain, string scope, string code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PropertyDefinitionsApi : IPropertyDefinitionsApi
    {
        private Lusid.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyDefinitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropertyDefinitionsApi(String basePath)
        {
            this.Configuration = new Lusid.Sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyDefinitionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PropertyDefinitionsApi()
        {
            this.Configuration = Lusid.Sdk.Client.Configuration.Default;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyDefinitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PropertyDefinitionsApi(Lusid.Sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Lusid.Sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Lusid.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Lusid.Sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Lusid.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// [EARLY ACCESS] Create derived property definition Define a new derived property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDerivedPropertyDefinitionRequest">The definition of the new derived property.</param>
        /// <returns>PropertyDefinition</returns>
        public PropertyDefinition CreateDerivedPropertyDefinition (CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest)
        {
             ApiResponse<PropertyDefinition> localVarResponse = CreateDerivedPropertyDefinitionWithHttpInfo(createDerivedPropertyDefinitionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// [EARLY ACCESS] Create derived property definition Define a new derived property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDerivedPropertyDefinitionRequest">The definition of the new derived property.</param>
        /// <returns>ApiResponse of PropertyDefinition</returns>
        public ApiResponse< PropertyDefinition > CreateDerivedPropertyDefinitionWithHttpInfo (CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest)
        {
            // verify the required parameter 'createDerivedPropertyDefinitionRequest' is set
            if (createDerivedPropertyDefinitionRequest == null)
                throw new ApiException(400, "Missing required parameter 'createDerivedPropertyDefinitionRequest' when calling PropertyDefinitionsApi->CreateDerivedPropertyDefinition");

            var localVarPath = "./api/propertydefinitions/derived";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createDerivedPropertyDefinitionRequest != null && createDerivedPropertyDefinitionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createDerivedPropertyDefinitionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDerivedPropertyDefinitionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDerivedPropertyDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PropertyDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDefinition)));
        }

        /// <summary>
        /// [EARLY ACCESS] Create derived property definition Define a new derived property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDerivedPropertyDefinitionRequest">The definition of the new derived property.</param>
        /// <returns>Task of PropertyDefinition</returns>
        public async System.Threading.Tasks.Task<PropertyDefinition> CreateDerivedPropertyDefinitionAsync (CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest)
        {
             ApiResponse<PropertyDefinition> localVarResponse = await CreateDerivedPropertyDefinitionAsyncWithHttpInfo(createDerivedPropertyDefinitionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// [EARLY ACCESS] Create derived property definition Define a new derived property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDerivedPropertyDefinitionRequest">The definition of the new derived property.</param>
        /// <returns>Task of ApiResponse (PropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDefinition>> CreateDerivedPropertyDefinitionAsyncWithHttpInfo (CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest)
        {
            // verify the required parameter 'createDerivedPropertyDefinitionRequest' is set
            if (createDerivedPropertyDefinitionRequest == null)
                throw new ApiException(400, "Missing required parameter 'createDerivedPropertyDefinitionRequest' when calling PropertyDefinitionsApi->CreateDerivedPropertyDefinition");

            var localVarPath = "./api/propertydefinitions/derived";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createDerivedPropertyDefinitionRequest != null && createDerivedPropertyDefinitionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createDerivedPropertyDefinitionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createDerivedPropertyDefinitionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDerivedPropertyDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PropertyDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDefinition)));
        }

        /// <summary>
        /// Create property definition Define a new property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPropertyDefinitionRequest">The definition of the new property.</param>
        /// <returns>PropertyDefinition</returns>
        public PropertyDefinition CreatePropertyDefinition (CreatePropertyDefinitionRequest createPropertyDefinitionRequest)
        {
             ApiResponse<PropertyDefinition> localVarResponse = CreatePropertyDefinitionWithHttpInfo(createPropertyDefinitionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create property definition Define a new property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPropertyDefinitionRequest">The definition of the new property.</param>
        /// <returns>ApiResponse of PropertyDefinition</returns>
        public ApiResponse< PropertyDefinition > CreatePropertyDefinitionWithHttpInfo (CreatePropertyDefinitionRequest createPropertyDefinitionRequest)
        {
            // verify the required parameter 'createPropertyDefinitionRequest' is set
            if (createPropertyDefinitionRequest == null)
                throw new ApiException(400, "Missing required parameter 'createPropertyDefinitionRequest' when calling PropertyDefinitionsApi->CreatePropertyDefinition");

            var localVarPath = "./api/propertydefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createPropertyDefinitionRequest != null && createPropertyDefinitionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPropertyDefinitionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPropertyDefinitionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePropertyDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PropertyDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDefinition)));
        }

        /// <summary>
        /// Create property definition Define a new property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPropertyDefinitionRequest">The definition of the new property.</param>
        /// <returns>Task of PropertyDefinition</returns>
        public async System.Threading.Tasks.Task<PropertyDefinition> CreatePropertyDefinitionAsync (CreatePropertyDefinitionRequest createPropertyDefinitionRequest)
        {
             ApiResponse<PropertyDefinition> localVarResponse = await CreatePropertyDefinitionAsyncWithHttpInfo(createPropertyDefinitionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create property definition Define a new property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPropertyDefinitionRequest">The definition of the new property.</param>
        /// <returns>Task of ApiResponse (PropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDefinition>> CreatePropertyDefinitionAsyncWithHttpInfo (CreatePropertyDefinitionRequest createPropertyDefinitionRequest)
        {
            // verify the required parameter 'createPropertyDefinitionRequest' is set
            if (createPropertyDefinitionRequest == null)
                throw new ApiException(400, "Missing required parameter 'createPropertyDefinitionRequest' when calling PropertyDefinitionsApi->CreatePropertyDefinition");

            var localVarPath = "./api/propertydefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createPropertyDefinitionRequest != null && createPropertyDefinitionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createPropertyDefinitionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createPropertyDefinitionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePropertyDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PropertyDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDefinition)));
        }

        /// <summary>
        /// Delete property definition Delete the definition of the specified property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property to be deleted.</param>
        /// <param name="scope">The scope of the property to be deleted.</param>
        /// <param name="code">The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <returns>DeletedEntityResponse</returns>
        public DeletedEntityResponse DeletePropertyDefinition (string domain, string scope, string code)
        {
             ApiResponse<DeletedEntityResponse> localVarResponse = DeletePropertyDefinitionWithHttpInfo(domain, scope, code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete property definition Delete the definition of the specified property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property to be deleted.</param>
        /// <param name="scope">The scope of the property to be deleted.</param>
        /// <param name="code">The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <returns>ApiResponse of DeletedEntityResponse</returns>
        public ApiResponse< DeletedEntityResponse > DeletePropertyDefinitionWithHttpInfo (string domain, string scope, string code)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling PropertyDefinitionsApi->DeletePropertyDefinition");
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling PropertyDefinitionsApi->DeletePropertyDefinition");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PropertyDefinitionsApi->DeletePropertyDefinition");

            var localVarPath = "./api/propertydefinitions/{domain}/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePropertyDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedEntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DeletedEntityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedEntityResponse)));
        }

        /// <summary>
        /// Delete property definition Delete the definition of the specified property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property to be deleted.</param>
        /// <param name="scope">The scope of the property to be deleted.</param>
        /// <param name="code">The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <returns>Task of DeletedEntityResponse</returns>
        public async System.Threading.Tasks.Task<DeletedEntityResponse> DeletePropertyDefinitionAsync (string domain, string scope, string code)
        {
             ApiResponse<DeletedEntityResponse> localVarResponse = await DeletePropertyDefinitionAsyncWithHttpInfo(domain, scope, code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete property definition Delete the definition of the specified property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property to be deleted.</param>
        /// <param name="scope">The scope of the property to be deleted.</param>
        /// <param name="code">The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <returns>Task of ApiResponse (DeletedEntityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletedEntityResponse>> DeletePropertyDefinitionAsyncWithHttpInfo (string domain, string scope, string code)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling PropertyDefinitionsApi->DeletePropertyDefinition");
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling PropertyDefinitionsApi->DeletePropertyDefinition");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PropertyDefinitionsApi->DeletePropertyDefinition");

            var localVarPath = "./api/propertydefinitions/{domain}/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePropertyDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletedEntityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (DeletedEntityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletedEntityResponse)));
        }

        /// <summary>
        /// Get multiple property definitions Retrieve the definition of one or more specified properties.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyKeys">One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ResourceListOfPropertyDefinition</returns>
        public ResourceListOfPropertyDefinition GetMultiplePropertyDefinitions (List<string> propertyKeys, DateTimeOffset? asAt = null, string filter = null)
        {
             ApiResponse<ResourceListOfPropertyDefinition> localVarResponse = GetMultiplePropertyDefinitionsWithHttpInfo(propertyKeys, asAt, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get multiple property definitions Retrieve the definition of one or more specified properties.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyKeys">One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfPropertyDefinition</returns>
        public ApiResponse< ResourceListOfPropertyDefinition > GetMultiplePropertyDefinitionsWithHttpInfo (List<string> propertyKeys, DateTimeOffset? asAt = null, string filter = null)
        {
            // verify the required parameter 'propertyKeys' is set
            if (propertyKeys == null)
                throw new ApiException(400, "Missing required parameter 'propertyKeys' when calling PropertyDefinitionsApi->GetMultiplePropertyDefinitions");

            var localVarPath = "./api/propertydefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (propertyKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "propertyKeys", propertyKeys)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiplePropertyDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfPropertyDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfPropertyDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfPropertyDefinition)));
        }

        /// <summary>
        /// Get multiple property definitions Retrieve the definition of one or more specified properties.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyKeys">One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ResourceListOfPropertyDefinition</returns>
        public async System.Threading.Tasks.Task<ResourceListOfPropertyDefinition> GetMultiplePropertyDefinitionsAsync (List<string> propertyKeys, DateTimeOffset? asAt = null, string filter = null)
        {
             ApiResponse<ResourceListOfPropertyDefinition> localVarResponse = await GetMultiplePropertyDefinitionsAsyncWithHttpInfo(propertyKeys, asAt, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get multiple property definitions Retrieve the definition of one or more specified properties.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyKeys">One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)</param>
        /// <param name="filter">Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)</param>
        /// <returns>Task of ApiResponse (ResourceListOfPropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResourceListOfPropertyDefinition>> GetMultiplePropertyDefinitionsAsyncWithHttpInfo (List<string> propertyKeys, DateTimeOffset? asAt = null, string filter = null)
        {
            // verify the required parameter 'propertyKeys' is set
            if (propertyKeys == null)
                throw new ApiException(400, "Missing required parameter 'propertyKeys' when calling PropertyDefinitionsApi->GetMultiplePropertyDefinitions");

            var localVarPath = "./api/propertydefinitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (propertyKeys != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "propertyKeys", propertyKeys)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMultiplePropertyDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResourceListOfPropertyDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ResourceListOfPropertyDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResourceListOfPropertyDefinition)));
        }

        /// <summary>
        /// Get property definition Retrieve the definition of a specified property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the specified property.</param>
        /// <param name="scope">The scope of the specified property.</param>
        /// <param name="code">The code of the specified property. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)</param>
        /// <returns>PropertyDefinition</returns>
        public PropertyDefinition GetPropertyDefinition (string domain, string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<PropertyDefinition> localVarResponse = GetPropertyDefinitionWithHttpInfo(domain, scope, code, asAt);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get property definition Retrieve the definition of a specified property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the specified property.</param>
        /// <param name="scope">The scope of the specified property.</param>
        /// <param name="code">The code of the specified property. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)</param>
        /// <returns>ApiResponse of PropertyDefinition</returns>
        public ApiResponse< PropertyDefinition > GetPropertyDefinitionWithHttpInfo (string domain, string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling PropertyDefinitionsApi->GetPropertyDefinition");
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling PropertyDefinitionsApi->GetPropertyDefinition");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PropertyDefinitionsApi->GetPropertyDefinition");

            var localVarPath = "./api/propertydefinitions/{domain}/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPropertyDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PropertyDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDefinition)));
        }

        /// <summary>
        /// Get property definition Retrieve the definition of a specified property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the specified property.</param>
        /// <param name="scope">The scope of the specified property.</param>
        /// <param name="code">The code of the specified property. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)</param>
        /// <returns>Task of PropertyDefinition</returns>
        public async System.Threading.Tasks.Task<PropertyDefinition> GetPropertyDefinitionAsync (string domain, string scope, string code, DateTimeOffset? asAt = null)
        {
             ApiResponse<PropertyDefinition> localVarResponse = await GetPropertyDefinitionAsyncWithHttpInfo(domain, scope, code, asAt);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get property definition Retrieve the definition of a specified property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the specified property.</param>
        /// <param name="scope">The scope of the specified property.</param>
        /// <param name="code">The code of the specified property. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="asAt">The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (PropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDefinition>> GetPropertyDefinitionAsyncWithHttpInfo (string domain, string scope, string code, DateTimeOffset? asAt = null)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling PropertyDefinitionsApi->GetPropertyDefinition");
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling PropertyDefinitionsApi->GetPropertyDefinition");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PropertyDefinitionsApi->GetPropertyDefinition");

            var localVarPath = "./api/propertydefinitions/{domain}/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (asAt != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "asAt", asAt)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPropertyDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PropertyDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDefinition)));
        }

        /// <summary>
        /// Update property definition Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property being updated.</param>
        /// <param name="scope">The scope of the property being updated.</param>
        /// <param name="code">The code of the property being updated. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="updatePropertyDefinitionRequest">The updated definition of the property.</param>
        /// <returns>PropertyDefinition</returns>
        public PropertyDefinition UpdatePropertyDefinition (string domain, string scope, string code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest)
        {
             ApiResponse<PropertyDefinition> localVarResponse = UpdatePropertyDefinitionWithHttpInfo(domain, scope, code, updatePropertyDefinitionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update property definition Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property being updated.</param>
        /// <param name="scope">The scope of the property being updated.</param>
        /// <param name="code">The code of the property being updated. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="updatePropertyDefinitionRequest">The updated definition of the property.</param>
        /// <returns>ApiResponse of PropertyDefinition</returns>
        public ApiResponse< PropertyDefinition > UpdatePropertyDefinitionWithHttpInfo (string domain, string scope, string code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling PropertyDefinitionsApi->UpdatePropertyDefinition");
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling PropertyDefinitionsApi->UpdatePropertyDefinition");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PropertyDefinitionsApi->UpdatePropertyDefinition");
            // verify the required parameter 'updatePropertyDefinitionRequest' is set
            if (updatePropertyDefinitionRequest == null)
                throw new ApiException(400, "Missing required parameter 'updatePropertyDefinitionRequest' when calling PropertyDefinitionsApi->UpdatePropertyDefinition");

            var localVarPath = "./api/propertydefinitions/{domain}/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (updatePropertyDefinitionRequest != null && updatePropertyDefinitionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePropertyDefinitionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePropertyDefinitionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-SDK-Language"] = "C#";
            localVarHeaderParams["X-LUSID-SDK-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePropertyDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PropertyDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDefinition)));
        }

        /// <summary>
        /// Update property definition Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property being updated.</param>
        /// <param name="scope">The scope of the property being updated.</param>
        /// <param name="code">The code of the property being updated. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="updatePropertyDefinitionRequest">The updated definition of the property.</param>
        /// <returns>Task of PropertyDefinition</returns>
        public async System.Threading.Tasks.Task<PropertyDefinition> UpdatePropertyDefinitionAsync (string domain, string scope, string code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest)
        {
             ApiResponse<PropertyDefinition> localVarResponse = await UpdatePropertyDefinitionAsyncWithHttpInfo(domain, scope, code, updatePropertyDefinitionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update property definition Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
        /// </summary>
        /// <exception cref="Lusid.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">The domain of the property being updated.</param>
        /// <param name="scope">The scope of the property being updated.</param>
        /// <param name="code">The code of the property being updated. Together with the domain and scope this uniquely              identifies the property.</param>
        /// <param name="updatePropertyDefinitionRequest">The updated definition of the property.</param>
        /// <returns>Task of ApiResponse (PropertyDefinition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PropertyDefinition>> UpdatePropertyDefinitionAsyncWithHttpInfo (string domain, string scope, string code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest)
        {
            // verify the required parameter 'domain' is set
            if (domain == null)
                throw new ApiException(400, "Missing required parameter 'domain' when calling PropertyDefinitionsApi->UpdatePropertyDefinition");
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new ApiException(400, "Missing required parameter 'scope' when calling PropertyDefinitionsApi->UpdatePropertyDefinition");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling PropertyDefinitionsApi->UpdatePropertyDefinition");
            // verify the required parameter 'updatePropertyDefinitionRequest' is set
            if (updatePropertyDefinitionRequest == null)
                throw new ApiException(400, "Missing required parameter 'updatePropertyDefinitionRequest' when calling PropertyDefinitionsApi->UpdatePropertyDefinition");

            var localVarPath = "./api/propertydefinitions/{domain}/{scope}/{code}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (domain != null) localVarPathParams.Add("domain", this.Configuration.ApiClient.ParameterToString(domain)); // path parameter
            if (scope != null) localVarPathParams.Add("scope", this.Configuration.ApiClient.ParameterToString(scope)); // path parameter
            if (code != null) localVarPathParams.Add("code", this.Configuration.ApiClient.ParameterToString(code)); // path parameter
            if (updatePropertyDefinitionRequest != null && updatePropertyDefinitionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updatePropertyDefinitionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updatePropertyDefinitionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            //  set the LUSID header
            localVarHeaderParams["X-LUSID-Sdk-Language"] = "C#";
            localVarHeaderParams["X-LUSID-Sdk-Version"] = "0.11.3421";

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePropertyDefinition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PropertyDefinition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (PropertyDefinition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PropertyDefinition)));
        }

    }
}